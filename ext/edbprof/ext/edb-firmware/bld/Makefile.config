# Available configuration options to be set in the master makefile

# Enable communication to host workstation via a UART module
#
ifeq ($(CONFIG_HOST_UART),1)
	CFLAGS += -DCONFIG_HOST_UART
endif

# Enable communication to target device via a UART module
#
ifeq ($(CONFIG_TARGET_UART),1)
	CFLAGS += -DCONFIG_TARGET_UART

# Let target send EDB messages without EDB having issued a request
#      This is for STDIO output for example.
ifeq ($(CONFIG_TARGET_UART_PUSH),1)
    CFLAGS += -DCONFIG_TARGET_UART_PUSH
endif

endif # CONFIG_TARGET_UART

# Enable code for decoding the RF protocol
# 		Currently, this is disabled because it causes spurious interrupts.
#
#       TODO: setup RF pins only upon cmd to monitor RF because otherwise we
#       get spurious interrupts on RX pin
#
ifeq ($(CONFIG_ENABLE_RF_PROTOCOL_MONITORING),1)
	CFLAGS += -DCONFIG_ENABLE_RF_PROTOCOL_MONITORING

# 		When parsing RFID messages, use calculated bounds on symbol duration
# 			For some symbols, their duration depends on the duration of
# 			previous symbols (e.g. some symbol durations are defined in
# 			terms of Tari symbol duration). This flag turns on implementation
# 			of symbol time validity checks using such dynamic bounds
# 			calculated at runtime.  This is a true implementation of the
# 			spec, as opposed to static magic bounds chosen by trial and error
# 			in a particular setup, However this is expensive in terms of
# 			cycles (too expensive to work?).
ifeq ($(CONFIG_RFID_DECODER_RUNTIME_BOUNDS),1)
	CFLAGS += -DCONFIG_RFID_DECODER_RUNTIME_BOUNDS
endif

endif # CONFIG_ENABLE_RF_PROTOCOL_MONITORING

# Enable listening and recording communication on I2C bus
# 		TODO: this is not currently implemented
ifeq ($(CONFIG_ENABLE_I2C_MONITORING),1)
	CFLAGS += -DCONFIG_ENABLE_I2C_MONITORING
endif

# Enable a time-keeping timer (systick)
ifeq ($(CONFIG_SYSTICK),1)
	CFLAGS += -DCONFIG_SYSTICK

# Maintain 32-bit system time (systick)
# 		Handle overflow in system timer and increment a 32-bit timestamp.
ifeq ($(CONFIG_SYSTICK_32BIT),1)
	CFLAGS += -DCONFIG_SYSTICK_32BIT
endif

endif # CONFIG_SYSTICK

# Capacitor charge implemented by a PWM with a control loop around the duty-cycle
# 		The alternative is an "valve" method of raising a GPIO high and watching
#       the voltage level with ADC or comparator and pulling the GPIO low once
#       the target threshold is crossed.
#
ifeq ($(CONFIG_PWM_CHARGING),1)
	CFLAGS += -DCONFIG_PWM_CHARGING
endif

# Enable pull-down on the debugger<->target communication lines.
#
# 		  We watch for interrupts the target raises when the target requests
#         to enter active debug mode, such as upon hitting an internal or
#         external breakpoint. If the target is off or not present, then both
#         ends of this line are in high impedence mode (effectively
#         floating?). This does not seem to cause spurious interrupts, but if
#         this problem did arise, enabling pull-down resistors should solve
#         it.
#
#         Also, when using watchpoints, unconnected lines (at least on
#         dev boards) may float high without the pull-down.
#
#         NOTE: The pull-down causes energy interference (current is sourced
#         from the target when target drives this pin high), but the target
#         only drives this pin high for at most one cycle (signal
#         communication is exclusively done using one-cycle-long pulses).
#
ifeq ($(CONFIG_PULL_DOWN_ON_COMM_LINES),1)
	CFLAGS += -DCONFIG_PULL_DOWN_ON_COMM_LINES
endif

# Enable code to decode RFID transmissions from the target
#
ifeq ($(CONFIG_ENABLE_RF_TX_DECODING),1)
	CFLAGS += -DCONFIG_ENABLE_RF_TX_DECODING
endif

# Decode the RFID command payload bits (not only the command code)
# 	TODO: NOT IMPLEMENTED
#
ifeq ($(CONFIG_DECODE_RFID_CMD_PAYLOAD),1)
	CFLAGS += -DCONFIG_DECODE_RFID_CMD_PAYLOAD
endif

# Route serial decoder events to external pins
# 		For testing and tuning decoding of serial protocol over the signal
# 		line.
# 
ifeq ($(CONFIG_SIG_SERIAL_DECODE_PINS),1)
	CFLAGS += -DCONFIG_SIG_SERIAL_DECODE_PINS
endif


# Enable an auxiliary signal useful for triggering a scope
# 		A pulse is issued when a host command is ready for execution.
#
ifeq ($(CONFIG_SCOPE_TRIGGER_SIGNAL),1)
	CFLAGS += -DCONFIG_SCOPE_TRIGGER_SIGNAL
endif

# Enable breakpoints stored on the target-side 
# 		The number of such breakpoints is not limited by the number of
# 		codepoints pins. The downside is that to enable a passive breakpoint,
# 		the target must be interrupted first to enter interactive debugging
# 		mode and run the enable command in the console.
#
ifeq ($(CONFIG_ENABLE_PASSIVE_BREAKPOINTS),1)
	CFLAGS += -DCONFIG_ENABLE_PASSIVE_BREAKPOINTS
endif

# Enable handling of watchpoint (streaming to host and/or collecting a profile)
#
ifeq ($(CONFIG_ENABLE_WATCHPOINTS),1)
	CFLAGS += -DCONFIG_ENABLE_WATCHPOINTS

#     Enable this many consecutive watchpoints automatically when EDB starts
ifneq ($(CONFIG_AUTO_ENABLED_WATCHPOINTS),)
	CFLAGS += -DCONFIG_AUTO_ENABLED_WATCHPOINTS=$(CONFIG_AUTO_ENABLED_WATCHPOINTS)
endif # CONFIG_AUTO_ENABLED_WATCHPOINTS

endif # CONFIG_ENABLE_WATCHPOINTS

# 		Enable feature to deliver watchpoint events to host via 'stream' cmd
#
ifeq ($(CONFIG_ENABLE_WATCHPOINT_STREAM),1)

ifneq ($(CONFIG_ENABLE_WATCHPOINTS),1)
$(error CONFIG_ENABLE_WATCHPOINT_STREAM requires CONFIG_ENABLE_WATCHPOINTS)
endif

	CFLAGS += -DCONFIG_ENABLE_WATCHPOINT_STREAM
endif

# Collect and send to host/ground a packet with energy profile and/or app output
ifeq ($(CONFIG_ENABLE_PAYLOAD),1)

CFLAGS += -DCONFIG_ENABLE_PAYLOAD

#      Turn on periodic payload sending automatically
ifeq ($(CONFIG_PERIODIC_PAYLOAD),auto)
	CFLAGS += -DCONFIG_PERIODIC_PAYLOAD_AUTO
else ifeq ($(CONFIG_PERIODIC_PAYLOAD),manual)
	# nothing to setup, console command always available
endif

# 		Collect an energy profile using watchpoints
# 			An energy profile is a distribution of energy at each watchpoint
# 			event, where the distribution is given by the count in each
# 			quantized energy level.
#
ifeq ($(CONFIG_COLLECT_ENERGY_PROFILE),1)

ifneq ($(CONFIG_ENABLE_WATCHPOINTS),1)
$(error CONFIG_COLLECT_ENERGY_PROFILE requires CONFIG_ENABLE_WATCHPOINTS)
endif

	CFLAGS += -DCONFIG_COLLECT_ENERGY_PROFILE
endif # CONFIG_COLLECT_ENERGY_PROFILE

#		Collect a data packet from the app on the target
ifeq ($(CONFIG_COLLECT_APP_OUTPUT),1)

ifneq ($(CONFIG_ENABLE_WATCHPOINTS),1)
$(error CONFIG_COLLECT_APP_OUTPUT requires CONFIG_ENABLE_DEBUG_MODE)
endif

	CFLAGS += -DCONFIG_COLLECT_APP_OUTPUT
endif # CONFIG_COLLECT_APP_OUTPUT

ifeq ($(CONFIG_RADIO_TRANSMIT_PAYLOAD),1)
	CFLAGS += -DCONFIG_RADIO_TRANSMIT_PAYLOAD
endif # CONFIG_RADIO_TRANSMIT_PAYLOAD

endif # CONFIG_ENABLE_PAYLOAD

# Support entering and exiting active debug mode
# 		   The reason we have a switch are the limited resources
#          on the MCU that need to be shared (specifically, timers).
#          Right now, RFID TX decoding and debug mode cannot
#          co-exist.
# 
ifeq ($(CONFIG_ENABLE_DEBUG_MODE),1)
	CFLAGS += -DCONFIG_ENABLE_DEBUG_MODE

#	Support requests to enter debug mode initiated by the target
ifeq ($(CONFIG_ENABLE_TARGET_SIDE_DEBUG_MODE),1)
	CFLAGS += -DCONFIG_ENABLE_TARGET_SIDE_DEBUG_MODE
endif

#   Power target in debug mode
ifeq ($(CONFIG_POWER_TARGET_IN_DEBUG_MODE),1)
	CFLAGS += -DCONFIG_POWER_TARGET_IN_DEBUG_MODE
endif

#   Fetch interrupt context from target
ifeq ($(CONFIG_FETCH_INTERRUPT_CONTEXT),1)
	CFLAGS += -DCONFIG_FETCH_INTERRUPT_CONTEXT
endif

#   Have a time out for entering and exiting debug mode (reset state machine on
#   timeout)
ifeq ($(CONFIG_ENABLE_DEBUG_MODE_TIMEOUTS),1)
	CFLAGS += -DCONFIG_ENABLE_DEBUG_MODE_TIMEOUTS
endif

endif # CONFIG_ENABLE_DEBUG_MODE

# Reset debug mode state machine when target detected to turn on
# 			The detection is done by monitoring Vreg rising to MCU_ON_THRES
#           using the comparator.
#  
#           This conflicts with other uses of the comparator: charge, discharge,
#           and energy breakpoint. All of these have alternative implementations
#           using the ADC.
#  
#           TODO: this should be enablable at runtime using a console command
#           	  from the host and persisted in an option dictionary (not
#           	  implemented)
ifeq ($(CONFIG_RESET_STATE_ON_BOOT),1)
	CFLAGS += -DCONFIG_RESET_STATE_ON_BOOT
endif

# Enable streaming voltages
# 		Requires a timer to be allocated for the ADC trigger (see
# 		TMRMOD_ADC_TRIGGER).
# 
ifeq ($(CONFIG_ENABLE_VOLTAGE_STREAM),1)
	CFLAGS += -DCONFIG_ENABLE_VOLTAGE_STREAM
endif

# Abort if a fault in the UART module is detected
# 		Indication: red led on, and iff error is overflow, then green led blinking.
#
ifeq ($(CONFIG_ABORT_ON_HOST_UART_ERROR),1)
	CFLAGS += -DCONFIG_ABORT_ON_HOST_UART_ERROR
endif

# Abort if RFID event buffer overflows (as opposed to dropping events)
#
ifeq ($(CONFIG_ABORT_ON_RFID_EVENT_OVERFLOW),1)
	CFLAGS += -DCONFIG_ABORT_ON_RFID_EVENT_OVERFLOW
endif

# Encode debugger state machine state onto pins
#
ifeq ($(CONFIG_STATE_PINS),1)
	CFLAGS += -DCONFIG_STATE_PINS
endif

# Enable pins for general-purpose event reporting (for debugging)
#
ifeq ($(CONFIG_EVENT_PINS),1)
	CFLAGS += -DCONFIG_EVENT_PINS
endif

# Enable pins for general-purpose event reporting (for debugging)
#
ifeq ($(CONFIG_EVENT_PINS),1)
	CFLAGS += -DCONFIG_EVENT_PINS
endif

# Encode RFID decoder state onto pins for debugging purposes
#
ifeq ($(CONFIG_RFID_DECODER_STATE_PINS),1)
	CFLAGS += -DCONFIG_RFID_DECODER_STATE_PINS
endif

# Clock testing mode: enter a blinker loop after configuring clocks
ifeq ($(CONFIG_CLOCK_TEST_MODE),1)
	CFLAGS += -DCONFIG_CLOCK_TEST_MODE
endif

# Configure MCU to output ACLK to a pin
# 		On edb board must "unplug" op amp buffers by disconnecting JP1
ifeq ($(CONFIG_ROUTE_ACLK_TO_PIN),1)
	CFLAGS += -DCONFIG_ROUTE_ACLK_TO_PIN
endif

# TODO: convert into a bitmask with all LEDs

# Blink an LED in the main loop
ifeq ($(CONFIG_BOOT_LED),1)
	CFLAGS += -DCONFIG_BOOT_LED
endif

# Blink an LED in the main loop
ifeq ($(CONFIG_MAIN_LOOP_LED),1)
	CFLAGS += -DCONFIG_MAIN_LOOP_LED
endif

# Turn on an LED when in debug mode
ifeq ($(CONFIG_DEBUG_MODE_LED),1)
	CFLAGS += -DCONFIG_DEBUG_MODE_LED
endif

# Turn on an LED when errors are encountered
ifeq ($(CONFIG_ERROR_LED),1)
	CFLAGS += -DCONFIG_ERROR_LED
endif

# Enable functionality for manipulating charge on target capacitor
ifeq ($(CONFIG_CHARGE_MANIP),1)
    CFLAGS += -DCONFIG_CHARGE_MANIP
endif

ifeq ($(CONFIG_TARGET_POWER_SWITCH),1)
    CFLAGS += -DCONFIG_TARGET_POWER_SWITCH
endif

# Go to sleep at the end of the main loop (interrupt-driven operation)
ifeq ($(CONFIG_SLEEP_IN_MAIN_LOOP),1)
    CFLAGS += -DCONFIG_SLEEP_IN_MAIN_LOOP
endif

# Enable a watchdog timer to issue a reset on hang
#    Currently watchdog is never kicked, so reset is unconditional.
ifeq ($(CONFIG_WATCHDOG),1)
    CFLAGS += -DCONFIG_WATCHDOG
endif

# Task-driven main-loop
#    On each boot randomly select a task to perform.
ifeq ($(CONFIG_TASK_DRIVEN),1)
    CFLAGS += -DCONFIG_TASK_DRIVEN
endif
