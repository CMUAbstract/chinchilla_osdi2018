#ifndef EDBPROF_BOUNDARYPLACER_H
#define EDBPROF_BOUNDARYPLACER_H

#include "BallLarusGraph.h"

#include "llvm/Pass.h"
#include "llvm/IR/LLVMContext.h"

#include <set>

namespace edbprof {

  // Place boundaries specified in a spec file (generated by BoundaryGenerator).
  // This pass creates an object file (.bc).
  class BoundaryPlacer : public llvm::ModulePass {
   public:
    static char ID;

    // TODO: factor this into a class and use it from here and from PathProfiler
    static const char *TaskBoundaryFuncName;
    static const char *DinoTaskBoundaryFuncName;

    BoundaryPlacer();

    bool runOnModule(llvm::Module &M) override;

   private:
    void loadBoundarySpec(std::string &specFilename);

    void placeBoundaries(llvm::Function &F, const std::set<std::string> &boundaryBlocks);
    void placeBoundaries(llvm::BasicBlock *block,
                         const std::set<std::string> &boundaryBlocks,
                         std::set<llvm::BasicBlock *> &processedBlocks,
                         unsigned taskId,
                         llvm::Function *taskBoundaryFunc, llvm::Function *dinoTaskBoundaryFunc,
                         llvm::LLVMContext &ctx);

    // boundarySpec: func -> list of blocks at which to place boundaries
    std::map< std::string, std::set<std::string> > boundarySpec;
  };

} // namespace edbprof

#endif // EDBPROF_BOUNDARYPLACER
