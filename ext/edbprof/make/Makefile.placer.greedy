# Generate boundary placement according to the greedy algorithm

# TODO: some of these artifacts should be per program, not per module,
#  	    but since passes are per module, for now, just assume there is
#  	    only one module in the program, and do everything per module.

DIST_EVALUATOR_PIPE_IN := $(shell mktemp -u /tmp/dist-evaluator_in-XXXXXXXX)
DIST_EVALUATOR_PIPE_OUT := $(shell mktemp -u /tmp/dist-evaluator_out-XXXXXXXX)
DIST_EVALUATOR_PIPES := $(DIST_EVALUATOR_PIPE_IN) $(DIST_EVALUATOR_PIPE_OUT)

define create-pipe-rule
$(1) :
	mkfifo $(1)
endef

$(foreach pipe,$(DIST_EVALUATOR_PIPES),$(eval $(call create-pipe-rule,$(pipe))))

%.boundary-spec.csv %.placer-time.csv : %.bc $(ENERGY_CAPACITY_DIR)/energy-capacity.csv $(LOOP_ITERS_DIR)/loop-iters.csv \
										$(DIST_EVALUATOR_PIPES)
	$(EDBPROF_BIN_ROOT)/dist-expr-evaluator.py \
	  --grid $(ENERGY_DIST_EXPR_EVALUATOR_GRID) \
	  --hist-data-path '$(BLOCK_ENERGY_DIR)/instances/%id/energy-hist-interp.csv' \
	  $(DIST_EVALUATOR_PIPES) &
	$(OPT) $(EDBPROF_OPT_FLAGS) -split-tasks -edbprof--greedy--place-boundaries \
	  -edbprof-inline-calls=true \
	  -edbprof-opaque-functions "$(call optpath,$(EDBPROF_BUILD_DIR),$(EDBPROF_OPAQUE_FUNCTIONS))" \
	  -edbprof-loop-iters "$(LOOP_ITERS_DIR)/loop-iters.csv" \
	  -edbprof--boundary-gen--filename "$*.boundary-spec.csv" \
	  -edbprof--boundary-gen--func-blacklist \
	  	"$(call optpath,$(EDBPROF_BUILD_DIR),$(BOUNDARY_GEN_FUNC_BLACKLIST))" \
	  -edbprof-block-hash-map="$(BLOCK_ENERGY_DIR)/$*.block-map.csv" \
	  -edbprof-path-counts="$(PATH_FREQ_DIR)/$*.path-freq.csv" \
	  -edbprof--energy-capacity="$(ENERGY_CAPACITY_DIR)/energy-capacity.csv" \
	  -edbprof--greedy-score-weight-length="$(GREEDY_SCORE_WEIGHT_LENGTH)" \
	  -edbprof--greedy-score-weight-checkpoint="$(GREEDY_SCORE_WEIGHT_CHECKPOINT)" \
	  -edbprof--greedy-time="$*.placer-time.csv" \
	  -edbprof--dist-expr-evaluator-pipes='$(DIST_EVALUATOR_PIPES)' \
	  -o /dev/null $<

# TODO: add a module column (for now we assume only one module)
boundary-spec.csv : $(PROFILED_OBJECTS:=.boundary-spec.csv)
	$(EDBPROF_BIN_ROOT)/concat-datasets.py -o $@ $^

placer-run-time.csv : $(PROFILED_OBJECTS:=.placer-time.csv)
	$(EDBPROF_BIN_ROOT)/concat-datasets.py -o $@ $^

# NOTE: The source must not contain manual dino boundaries (because a manual
# DINO boundary has a branch in them, which changes block names, invalidating
# the block energy profile). NOTE: manual boundaries are not the same as
# manually inserted automatic boundaries (see modes in libdino/dino.h); having
# the latter should not cause issues.
%.with-boundaries.bc : %.bc %.boundary-spec.csv
	$(OPT) $(EDBPROF_OPT_FLAGS) -split-tasks -place-boundaries \
	  -edbprof--boundary-placer--spec $*.boundary-spec.csv \
	  -o $@ $<

