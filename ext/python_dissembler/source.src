
./bld/alpaca/cem.out:     file format elf32-msp430


Disassembly of section __interrupt_vector_49:

0000fff0 <__interrupt_vector_49>:
    fff0:	4a d2       	interrupt service routine at 0xd24a

Disassembly of section .text:

0000aeac <__crt0_start>:
    aeac:	31 40 00 24 	mov	#9216,	r1	;#0x2400

0000aeb0 <__crt0_init_bss>:
    aeb0:	3c 40 80 1c 	mov	#7296,	r12	;#0x1c80
    aeb4:	0d 43       	clr	r13		;
    aeb6:	3e 40 24 00 	mov	#36,	r14	;#0x0024
    aeba:	b0 12 2a d5 	call	#54570		;#0xd52a

0000aebe <__crt0_movedata>:
    aebe:	3c 40 00 1c 	mov	#7168,	r12	;#0x1c00
    aec2:	3d 40 28 ae 	mov	#44584,	r13	;#0xae28
    aec6:	0d 9c       	cmp	r12,	r13	;
    aec8:	04 24       	jz	$+10     	;abs 0xaed2
    aeca:	3e 40 80 00 	mov	#128,	r14	;#0x0080
    aece:	b0 12 ea d4 	call	#54506		;#0xd4ea

0000aed2 <__crt0_call_init_then_main>:
    aed2:	b0 12 5c d5 	call	#54620		;#0xd55c
    aed6:	0c 43       	clr	r12		;
    aed8:	b0 12 28 b4 	call	#46120		;#0xb428

0000aedc <_msp430_run_init_array>:
    aedc:	34 40 40 44 	mov	#17472,	r4	;#0x4440
    aee0:	35 40 40 44 	mov	#17472,	r5	;#0x4440
    aee4:	26 43       	mov	#2,	r6	;r3 As==10
    aee6:	0d 3c       	jmp	$+28     	;abs 0xaf02

0000aee8 <_msp430_run_preinit_array>:
    aee8:	34 40 40 44 	mov	#17472,	r4	;#0x4440
    aeec:	35 40 40 44 	mov	#17472,	r5	;#0x4440
    aef0:	26 43       	mov	#2,	r6	;r3 As==10
    aef2:	07 3c       	jmp	$+16     	;abs 0xaf02

0000aef4 <_msp430_run_fini_array>:
    aef4:	34 40 40 44 	mov	#17472,	r4	;#0x4440
    aef8:	35 40 40 44 	mov	#17472,	r5	;#0x4440
    aefc:	36 40 fe ff 	mov	#65534,	r6	;#0xfffe
    af00:	00 3c       	jmp	$+2      	;abs 0xaf02

0000af02 <_msp430_run_array>:
    af02:	05 94       	cmp	r4,	r5	;
    af04:	05 24       	jz	$+12     	;abs 0xaf10
    af06:	27 44       	mov	@r4,	r7	;
    af08:	04 56       	add	r6,	r4	;
    af0a:	a7 12       	call	@r7		;
    af0c:	10 40 f4 ff 	br	0xfff4		;PC rel. 0xaf02

0000af10 <_msp430_run_done>:
    af10:	30 41       	ret			

0000af12 <deregister_tm_clones>:
    af12:	3c 40 78 d5 	mov	#54648,	r12	;#0xd578
    af16:	3c 80 77 d5 	sub	#54647,	r12	;#0xd577
    af1a:	2d 43       	mov	#2,	r13	;r3 As==10
    af1c:	0d 9c       	cmp	r12,	r13	;
    af1e:	07 2c       	jc	$+16     	;abs 0xaf2e
    af20:	3d 40 00 00 	mov	#0,	r13	;
    af24:	0d 93       	cmp	#0,	r13	;r3 As==00
    af26:	03 24       	jz	$+8      	;abs 0xaf2e
    af28:	3c 40 78 d5 	mov	#54648,	r12	;#0xd578
    af2c:	8d 12       	call	r13		;
    af2e:	30 41       	ret			

0000af30 <register_tm_clones>:
    af30:	3d 40 78 d5 	mov	#54648,	r13	;#0xd578
    af34:	3d 80 78 d5 	sub	#54648,	r13	;#0xd578
    af38:	0d 11       	rra	r13		;
    af3a:	0c 4d       	mov	r13,	r12	;
    af3c:	5c 03       	rrum	#1,	r12	;
    af3e:	4d 18 0c 11 	rpt #14 { rrax.w	r12		;
    af42:	0d 5c       	add	r12,	r13	;
    af44:	0d 11       	rra	r13		;
    af46:	0d 93       	cmp	#0,	r13	;r3 As==00
    af48:	07 24       	jz	$+16     	;abs 0xaf58
    af4a:	3e 40 00 00 	mov	#0,	r14	;
    af4e:	0e 93       	cmp	#0,	r14	;r3 As==00
    af50:	03 24       	jz	$+8      	;abs 0xaf58
    af52:	3c 40 78 d5 	mov	#54648,	r12	;#0xd578
    af56:	8e 12       	call	r14		;
    af58:	30 41       	ret			

0000af5a <__do_global_dtors_aux>:
    af5a:	0a 15       	pushm	#1,	r10	;16-bit words
    af5c:	c2 93 80 1c 	cmp.b	#0,	&0x1c80	;r3 As==00
    af60:	20 20       	jnz	$+66     	;abs 0xafa2
    af62:	1c 42 82 1c 	mov	&0x1c82,r12	;0x1c82
    af66:	3a 40 4a 44 	mov	#17482,	r10	;#0x444a
    af6a:	3a 80 48 44 	sub	#17480,	r10	;#0x4448
    af6e:	0a 11       	rra	r10		;
    af70:	3a 53       	add	#-1,	r10	;r3 As==11
    af72:	0c 9a       	cmp	r10,	r12	;
    af74:	0b 2c       	jc	$+24     	;abs 0xaf8c
    af76:	1c 53       	inc	r12		;
    af78:	82 4c 82 1c 	mov	r12,	&0x1c82	;
    af7c:	0c 5c       	rla	r12		;
    af7e:	1c 4c 48 44 	mov	17480(r12),r12	;0x04448
    af82:	8c 12       	call	r12		;
    af84:	1c 42 82 1c 	mov	&0x1c82,r12	;0x1c82
    af88:	0c 9a       	cmp	r10,	r12	;
    af8a:	f5 2b       	jnc	$-20     	;abs 0xaf76
    af8c:	b0 12 12 af 	call	#44818		;#0xaf12
    af90:	3d 40 00 00 	mov	#0,	r13	;
    af94:	0d 93       	cmp	#0,	r13	;r3 As==00
    af96:	03 24       	jz	$+8      	;abs 0xaf9e
    af98:	3c 40 3c 44 	mov	#17468,	r12	;#0x443c
    af9c:	8d 12       	call	r13		;
    af9e:	d2 43 80 1c 	mov.b	#1,	&0x1c80	;r3 As==01
    afa2:	0a 17       	popm	#1,	r10	;16-bit words
    afa4:	30 41       	ret			

0000afa6 <call___do_global_dtors_aux>:
    afa6:	30 41       	ret			

0000afa8 <frame_dummy>:
    afa8:	3e 40 00 00 	mov	#0,	r14	;
    afac:	0e 93       	cmp	#0,	r14	;r3 As==00
    afae:	05 24       	jz	$+12     	;abs 0xafba
    afb0:	3c 40 3c 44 	mov	#17468,	r12	;#0x443c
    afb4:	3d 40 84 1c 	mov	#7300,	r13	;#0x1c84
    afb8:	8e 12       	call	r14		;
    afba:	3c 40 00 1c 	mov	#7168,	r12	;#0x1c00
    afbe:	8c 93 00 00 	cmp	#0,	0(r12)	;r3 As==00
    afc2:	03 20       	jnz	$+8      	;abs 0xafca
    afc4:	b0 12 30 af 	call	#44848		;#0xaf30
    afc8:	30 41       	ret			
    afca:	3d 40 00 00 	mov	#0,	r13	;
    afce:	0d 93       	cmp	#0,	r13	;r3 As==00
    afd0:	f9 27       	jz	$-12     	;abs 0xafc4
    afd2:	8d 12       	call	r13		;
    afd4:	f7 3f       	jmp	$-16     	;abs 0xafc4

0000afd6 <call_frame_dummy>:
    afd6:	30 41       	ret			

0000afd8 <__loop_bound__>:
    afd8:	04 12       	push	r4		;
    afda:	04 41       	mov	r1,	r4	;
    afdc:	21 82       	sub	#4,	r1	;r2 As==10
    afde:	0c 4f       	mov	r15,	r12	;
    afe0:	84 4f fe ff 	mov	r15,	-2(r4)	; 0xfffe
    afe4:	84 4c fc ff 	mov	r12,	-4(r4)	; 0xfffc
    afe8:	21 52       	add	#4,	r1	;r2 As==10
    afea:	34 41       	pop	r4		;
    afec:	30 41       	ret			
	...

0000aff0 <TimerB1_ISR>:
    aff0:	04 12       	push	r4		;
    aff2:	04 41       	mov	r1,	r4	;
    aff4:	0c 12       	push	r12		;
    aff6:	1c 42 c0 03 	mov	&0x03c0,r12	;0x03c0
    affa:	3c f0 fd ff 	and	#65533,	r12	;#0xfffd
    affe:	82 4c c0 03 	mov	r12,	&0x03c0	;
    b002:	1c 42 c0 03 	mov	&0x03c0,r12	;0x03c0
    b006:	0c 93       	cmp	#0,	r12	;r3 As==00
    b008:	17 24       	jz	$+48     	;abs 0xb038
    b00a:	00 3c       	jmp	$+2      	;abs 0xb00c
    b00c:	1c 42 92 1c 	mov	&0x1c92,r12	;0x1c92
    b010:	1c 53       	inc	r12		;
    b012:	82 4c 92 1c 	mov	r12,	&0x1c92	;
    b016:	1c 42 c0 03 	mov	&0x03c0,r12	;0x03c0
    b01a:	2c d2       	bis	#4,	r12	;r2 As==10
    b01c:	82 4c c0 03 	mov	r12,	&0x03c0	;
    b020:	1c 42 c0 03 	mov	&0x03c0,r12	;0x03c0
    b024:	2c d3       	bis	#2,	r12	;r3 As==10
    b026:	82 4c c0 03 	mov	r12,	&0x03c0	;
    b02a:	1c 42 c0 03 	mov	&0x03c0,r12	;0x03c0
    b02e:	3c f0 fe ff 	and	#65534,	r12	;#0xfffe
    b032:	82 4c c0 03 	mov	r12,	&0x03c0	;
    b036:	00 3c       	jmp	$+2      	;abs 0xb038
    b038:	3c 41       	pop	r12		;
    b03a:	34 41       	pop	r4		;
    b03c:	00 13       	reti			
	...

0000b040 <print_log>:
    b040:	04 12       	push	r4		;
    b042:	04 41       	mov	r1,	r4	;
    b044:	31 80 0c 00 	sub	#12,	r1	;#0x000c
    b048:	0c 4f       	mov	r15,	r12	;
    b04a:	84 4f fe ff 	mov	r15,	-2(r4)	; 0xfffe
    b04e:	1d 4f 82 00 	mov	130(r15),r13	;0x00082
    b052:	1f 4f 80 00 	mov	128(r15),r15	;0x00080
    b056:	0e 41       	mov	r1,	r14	;
    b058:	8e 4f 04 00 	mov	r15,	4(r14)	;
    b05c:	8e 4d 02 00 	mov	r13,	2(r14)	;
    b060:	be 40 4c 44 	mov	#17484,	0(r14)	;#0x444c
    b064:	00 00 
    b066:	84 4c fc ff 	mov	r12,	-4(r4)	; 0xfffc
    b06a:	b0 12 be ce 	call	#52926		;#0xcebe
    b06e:	1c 44 fe ff 	mov	-2(r4),	r12	;
    b072:	1c 4c 82 00 	mov	130(r12),r12	;0x00082
    b076:	3c 90 61 01 	cmp	#353,	r12	;#0x0161
    b07a:	84 4f fa ff 	mov	r15,	-6(r4)	; 0xfffa
    b07e:	04 24       	jz	$+10     	;abs 0xb088
    b080:	00 3c       	jmp	$+2      	;abs 0xb082
    b082:	0f 43       	clr	r15		;
    b084:	b0 12 ce d2 	call	#53966		;#0xd2ce
    b088:	31 50 0c 00 	add	#12,	r1	;#0x000c
    b08c:	34 41       	pop	r4		;
    b08e:	30 41       	ret			

0000b090 <init_dict>:
    b090:	04 12       	push	r4		;
    b092:	04 41       	mov	r1,	r4	;
    b094:	31 80 0a 00 	sub	#10,	r1	;#0x000a
    b098:	0c 4f       	mov	r15,	r12	;
    b09a:	84 4f fe ff 	mov	r15,	-2(r4)	; 0xfffe
    b09e:	8f 43 00 0c 	mov	#0,	3072(r15);r3 As==00, 0x0c00
    b0a2:	84 43 fc ff 	mov	#0,	-4(r4)	;r3 As==00, 0xfffc
    b0a6:	84 4c f8 ff 	mov	r12,	-8(r4)	; 0xfff8
    b0aa:	00 3c       	jmp	$+2      	;abs 0xb0ac
    b0ac:	1c 44 fc ff 	mov	-4(r4),	r12	;
    b0b0:	3c 90 00 01 	cmp	#256,	r12	;#0x0100
    b0b4:	2e 2c       	jc	$+94     	;abs 0xb112
    b0b6:	00 3c       	jmp	$+2      	;abs 0xb0b8
    b0b8:	1c 44 fc ff 	mov	-4(r4),	r12	;
    b0bc:	82 4c ac 5f 	mov	r12,	&0x5fac	;
    b0c0:	1f 44 fc ff 	mov	-4(r4),	r15	;
    b0c4:	1c 44 fe ff 	mov	-2(r4),	r12	;
    b0c8:	3e 40 06 00 	mov	#6,	r14	;
    b0cc:	84 4c f6 ff 	mov	r12,	-10(r4)	; 0xfff6
    b0d0:	b0 12 00 ce 	call	#52736		;#0xce00
    b0d4:	1c 44 f6 ff 	mov	-10(r4),r12	;0xfffffff6
    b0d8:	0c 5f       	add	r15,	r12	;
    b0da:	84 4c fa ff 	mov	r12,	-6(r4)	; 0xfffa
    b0de:	1e 44 fc ff 	mov	-4(r4),	r14	;
    b0e2:	8c 4e 00 00 	mov	r14,	0(r12)	;
    b0e6:	1c 44 fa ff 	mov	-6(r4),	r12	;
    b0ea:	8c 43 02 00 	mov	#0,	2(r12)	;r3 As==00
    b0ee:	1c 44 fa ff 	mov	-6(r4),	r12	;
    b0f2:	8c 43 04 00 	mov	#0,	4(r12)	;r3 As==00
    b0f6:	1c 44 fe ff 	mov	-2(r4),	r12	;
    b0fa:	1e 4c 00 0c 	mov	3072(r12),r14	;0x00c00
    b0fe:	1e 53       	inc	r14		;
    b100:	8c 4e 00 0c 	mov	r14,	3072(r12); 0x0c00
    b104:	00 3c       	jmp	$+2      	;abs 0xb106
    b106:	1c 44 fc ff 	mov	-4(r4),	r12	;
    b10a:	1c 53       	inc	r12		;
    b10c:	84 4c fc ff 	mov	r12,	-4(r4)	; 0xfffc
    b110:	cd 3f       	jmp	$-100    	;abs 0xb0ac
    b112:	31 50 0a 00 	add	#10,	r1	;#0x000a
    b116:	34 41       	pop	r4		;
    b118:	30 41       	ret			
	...

0000b11c <find_child>:
    b11c:	04 12       	push	r4		;
    b11e:	04 41       	mov	r1,	r4	;
    b120:	0b 12       	push	r11		;
    b122:	0a 12       	push	r10		;
    b124:	31 80 18 00 	sub	#24,	r1	;#0x0018
    b128:	0c 4d       	mov	r13,	r12	;
    b12a:	0b 4e       	mov	r14,	r11	;
    b12c:	0a 4f       	mov	r15,	r10	;
    b12e:	84 4f f8 ff 	mov	r15,	-8(r4)	; 0xfff8
    b132:	84 4e f6 ff 	mov	r14,	-10(r4)	; 0xfff6
    b136:	84 4d f4 ff 	mov	r13,	-12(r4)	; 0xfff4
    b13a:	1f 44 f6 ff 	mov	-10(r4),r15	;0xfffffff6
    b13e:	3e 40 06 00 	mov	#6,	r14	;
    b142:	84 4d ec ff 	mov	r13,	-20(r4)	; 0xffec
    b146:	84 4b ea ff 	mov	r11,	-22(r4)	; 0xffea
    b14a:	84 4a e8 ff 	mov	r10,	-24(r4)	; 0xffe8
    b14e:	84 4c e6 ff 	mov	r12,	-26(r4)	; 0xffe6
    b152:	b0 12 00 ce 	call	#52736		;#0xce00
    b156:	1c 44 ec ff 	mov	-20(r4),r12	;0xffffffec
    b15a:	0c 5f       	add	r15,	r12	;
    b15c:	84 4c f2 ff 	mov	r12,	-14(r4)	; 0xfff2
    b160:	1c 4c 04 00 	mov	4(r12),	r12	;
    b164:	0c 93       	cmp	#0,	r12	;r3 As==00
    b166:	04 20       	jnz	$+10     	;abs 0xb170
    b168:	00 3c       	jmp	$+2      	;abs 0xb16a
    b16a:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa
    b16e:	31 3c       	jmp	$+100    	;abs 0xb1d2
    b170:	1c 44 f2 ff 	mov	-14(r4),r12	;0xfffffff2
    b174:	1c 4c 04 00 	mov	4(r12),	r12	;
    b178:	84 4c f0 ff 	mov	r12,	-16(r4)	; 0xfff0
    b17c:	00 3c       	jmp	$+2      	;abs 0xb17e
    b17e:	1c 44 f0 ff 	mov	-16(r4),r12	;0xfffffff0
    b182:	0c 93       	cmp	#0,	r12	;r3 As==00
    b184:	23 24       	jz	$+72     	;abs 0xb1cc
    b186:	00 3c       	jmp	$+2      	;abs 0xb188
    b188:	1f 44 f0 ff 	mov	-16(r4),r15	;0xfffffff0
    b18c:	1c 44 f4 ff 	mov	-12(r4),r12	;0xfffffff4
    b190:	3e 40 06 00 	mov	#6,	r14	;
    b194:	84 4c e4 ff 	mov	r12,	-28(r4)	; 0xffe4
    b198:	b0 12 00 ce 	call	#52736		;#0xce00
    b19c:	1c 44 e4 ff 	mov	-28(r4),r12	;0xffffffe4
    b1a0:	0c 5f       	add	r15,	r12	;
    b1a2:	84 4c ee ff 	mov	r12,	-18(r4)	; 0xffee
    b1a6:	2c 4c       	mov	@r12,	r12	;
    b1a8:	1e 44 f8 ff 	mov	-8(r4),	r14	;
    b1ac:	0c 9e       	cmp	r14,	r12	;
    b1ae:	06 20       	jnz	$+14     	;abs 0xb1bc
    b1b0:	00 3c       	jmp	$+2      	;abs 0xb1b2
    b1b2:	1c 44 f0 ff 	mov	-16(r4),r12	;0xfffffff0
    b1b6:	84 4c fa ff 	mov	r12,	-6(r4)	; 0xfffa
    b1ba:	0b 3c       	jmp	$+24     	;abs 0xb1d2
    b1bc:	1c 44 ee ff 	mov	-18(r4),r12	;0xffffffee
    b1c0:	1c 4c 02 00 	mov	2(r12),	r12	;
    b1c4:	84 4c f0 ff 	mov	r12,	-16(r4)	; 0xfff0
    b1c8:	00 3c       	jmp	$+2      	;abs 0xb1ca
    b1ca:	d9 3f       	jmp	$-76     	;abs 0xb17e
    b1cc:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa
    b1d0:	00 3c       	jmp	$+2      	;abs 0xb1d2
    b1d2:	1f 44 fa ff 	mov	-6(r4),	r15	;
    b1d6:	31 50 18 00 	add	#24,	r1	;#0x0018
    b1da:	3a 41       	pop	r10		;
    b1dc:	3b 41       	pop	r11		;
    b1de:	34 41       	pop	r4		;
    b1e0:	30 41       	ret			
	...

0000b1e4 <add_node>:
    b1e4:	04 12       	push	r4		;
    b1e6:	04 41       	mov	r1,	r4	;
    b1e8:	0b 12       	push	r11		;
    b1ea:	0a 12       	push	r10		;
    b1ec:	31 80 2c 00 	sub	#44,	r1	;#0x002c
    b1f0:	0c 4d       	mov	r13,	r12	;
    b1f2:	0b 4e       	mov	r14,	r11	;
    b1f4:	0a 4f       	mov	r15,	r10	;
    b1f6:	84 4f fa ff 	mov	r15,	-6(r4)	; 0xfffa
    b1fa:	84 4e f8 ff 	mov	r14,	-8(r4)	; 0xfff8
    b1fe:	84 4d f6 ff 	mov	r13,	-10(r4)	; 0xfff6
    b202:	1d 4d 00 0c 	mov	3072(r13),r13	;0x00c00
    b206:	3d 90 00 02 	cmp	#512,	r13	;#0x0200
    b20a:	84 4c ea ff 	mov	r12,	-22(r4)	; 0xffea
    b20e:	84 4b e8 ff 	mov	r11,	-24(r4)	; 0xffe8
    b212:	84 4a e6 ff 	mov	r10,	-26(r4)	; 0xffe6
    b216:	0a 20       	jnz	$+22     	;abs 0xb22c
    b218:	00 3c       	jmp	$+2      	;abs 0xb21a
    b21a:	0c 41       	mov	r1,	r12	;
    b21c:	bc 40 69 44 	mov	#17513,	0(r12)	;#0x4469
    b220:	00 00 
    b222:	b0 12 be ce 	call	#52926		;#0xcebe
    b226:	84 4f e4 ff 	mov	r15,	-28(r4)	; 0xffe4
    b22a:	00 3c       	jmp	$+2      	;abs 0xb22c
    b22c:	1c 44 f6 ff 	mov	-10(r4),r12	;0xfffffff6
    b230:	1f 4c 00 0c 	mov	3072(r12),r15	;0x00c00
    b234:	3d 40 06 00 	mov	#6,	r13	;
    b238:	0e 4d       	mov	r13,	r14	;
    b23a:	84 4c e2 ff 	mov	r12,	-30(r4)	; 0xffe2
    b23e:	84 4d e0 ff 	mov	r13,	-32(r4)	; 0xffe0
    b242:	b0 12 00 ce 	call	#52736		;#0xce00
    b246:	1c 44 e2 ff 	mov	-30(r4),r12	;0xffffffe2
    b24a:	0c 5f       	add	r15,	r12	;
    b24c:	84 4c f4 ff 	mov	r12,	-12(r4)	; 0xfff4
    b250:	1d 44 fa ff 	mov	-6(r4),	r13	;
    b254:	8c 4d 00 00 	mov	r13,	0(r12)	;
    b258:	1c 44 f4 ff 	mov	-12(r4),r12	;0xfffffff4
    b25c:	8c 43 02 00 	mov	#0,	2(r12)	;r3 As==00
    b260:	1c 44 f4 ff 	mov	-12(r4),r12	;0xfffffff4
    b264:	8c 43 04 00 	mov	#0,	4(r12)	;r3 As==00
    b268:	1c 44 f6 ff 	mov	-10(r4),r12	;0xfffffff6
    b26c:	1d 4c 00 0c 	mov	3072(r12),r13	;0x00c00
    b270:	0e 4d       	mov	r13,	r14	;
    b272:	1e 53       	inc	r14		;
    b274:	8c 4e 00 0c 	mov	r14,	3072(r12); 0x0c00
    b278:	84 4d f2 ff 	mov	r13,	-14(r4)	; 0xfff2
    b27c:	1f 44 f8 ff 	mov	-8(r4),	r15	;
    b280:	1c 44 f6 ff 	mov	-10(r4),r12	;0xfffffff6
    b284:	1e 44 e0 ff 	mov	-32(r4),r14	;0xffffffe0
    b288:	84 4c de ff 	mov	r12,	-34(r4)	; 0xffde
    b28c:	b0 12 00 ce 	call	#52736		;#0xce00
    b290:	1c 44 de ff 	mov	-34(r4),r12	;0xffffffde
    b294:	0c 5f       	add	r15,	r12	;
    b296:	1c 4c 04 00 	mov	4(r12),	r12	;
    b29a:	84 4c f0 ff 	mov	r12,	-16(r4)	; 0xfff0
    b29e:	0c 93       	cmp	#0,	r12	;r3 As==00
    b2a0:	4b 24       	jz	$+152    	;abs 0xb338
    b2a2:	00 3c       	jmp	$+2      	;abs 0xb2a4
    b2a4:	1c 44 f0 ff 	mov	-16(r4),r12	;0xfffffff0
    b2a8:	84 4c ee ff 	mov	r12,	-18(r4)	; 0xffee
    b2ac:	1d 44 f6 ff 	mov	-10(r4),r13	;0xfffffff6
    b2b0:	3e 40 06 00 	mov	#6,	r14	;
    b2b4:	0f 4c       	mov	r12,	r15	;
    b2b6:	84 4d dc ff 	mov	r13,	-36(r4)	; 0xffdc
    b2ba:	b0 12 00 ce 	call	#52736		;#0xce00
    b2be:	1c 44 dc ff 	mov	-36(r4),r12	;0xffffffdc
    b2c2:	0c 5f       	add	r15,	r12	;
    b2c4:	84 4c ec ff 	mov	r12,	-20(r4)	; 0xffec
    b2c8:	00 3c       	jmp	$+2      	;abs 0xb2ca
    b2ca:	1c 44 ec ff 	mov	-20(r4),r12	;0xffffffec
    b2ce:	1c 4c 02 00 	mov	2(r12),	r12	;
    b2d2:	0c 93       	cmp	#0,	r12	;r3 As==00
    b2d4:	18 24       	jz	$+50     	;abs 0xb306
    b2d6:	00 3c       	jmp	$+2      	;abs 0xb2d8
    b2d8:	b2 42 ac 5f 	mov	#8,	&0x5fac	;r2 As==11
    b2dc:	1c 44 ec ff 	mov	-20(r4),r12	;0xffffffec
    b2e0:	1c 4c 02 00 	mov	2(r12),	r12	;
    b2e4:	84 4c ee ff 	mov	r12,	-18(r4)	; 0xffee
    b2e8:	1d 44 f6 ff 	mov	-10(r4),r13	;0xfffffff6
    b2ec:	3e 40 06 00 	mov	#6,	r14	;
    b2f0:	0f 4c       	mov	r12,	r15	;
    b2f2:	84 4d da ff 	mov	r13,	-38(r4)	; 0xffda
    b2f6:	b0 12 00 ce 	call	#52736		;#0xce00
    b2fa:	1c 44 da ff 	mov	-38(r4),r12	;0xffffffda
    b2fe:	0c 5f       	add	r15,	r12	;
    b300:	84 4c ec ff 	mov	r12,	-20(r4)	; 0xffec
    b304:	e2 3f       	jmp	$-58     	;abs 0xb2ca
    b306:	b2 40 09 00 	mov	#9,	&0x5fac	;
    b30a:	ac 5f 
    b30c:	1c 44 f2 ff 	mov	-14(r4),r12	;0xfffffff2
    b310:	1f 44 ee ff 	mov	-18(r4),r15	;0xffffffee
    b314:	1d 44 f6 ff 	mov	-10(r4),r13	;0xfffffff6
    b318:	3e 40 06 00 	mov	#6,	r14	;
    b31c:	84 4c d8 ff 	mov	r12,	-40(r4)	; 0xffd8
    b320:	84 4d d6 ff 	mov	r13,	-42(r4)	; 0xffd6
    b324:	b0 12 00 ce 	call	#52736		;#0xce00
    b328:	1c 44 d6 ff 	mov	-42(r4),r12	;0xffffffd6
    b32c:	0c 5f       	add	r15,	r12	;
    b32e:	1d 44 d8 ff 	mov	-40(r4),r13	;0xffffffd8
    b332:	8c 4d 02 00 	mov	r13,	2(r12)	;
    b336:	19 3c       	jmp	$+52     	;abs 0xb36a
    b338:	b2 40 0a 00 	mov	#10,	&0x5fac	;#0x000a
    b33c:	ac 5f 
    b33e:	1c 44 f2 ff 	mov	-14(r4),r12	;0xfffffff2
    b342:	1f 44 f8 ff 	mov	-8(r4),	r15	;
    b346:	1d 44 f6 ff 	mov	-10(r4),r13	;0xfffffff6
    b34a:	3e 40 06 00 	mov	#6,	r14	;
    b34e:	84 4c d4 ff 	mov	r12,	-44(r4)	; 0xffd4
    b352:	84 4d d2 ff 	mov	r13,	-46(r4)	; 0xffd2
    b356:	b0 12 00 ce 	call	#52736		;#0xce00
    b35a:	1c 44 d2 ff 	mov	-46(r4),r12	;0xffffffd2
    b35e:	0c 5f       	add	r15,	r12	;
    b360:	1d 44 d4 ff 	mov	-44(r4),r13	;0xffffffd4
    b364:	8c 4d 04 00 	mov	r13,	4(r12)	;
    b368:	00 3c       	jmp	$+2      	;abs 0xb36a
    b36a:	31 50 2c 00 	add	#44,	r1	;#0x002c
    b36e:	3a 41       	pop	r10		;
    b370:	3b 41       	pop	r11		;
    b372:	34 41       	pop	r4		;
    b374:	30 41       	ret			
	...

0000b378 <append_compressed>:
    b378:	04 12       	push	r4		;
    b37a:	04 41       	mov	r1,	r4	;
    b37c:	0b 12       	push	r11		;
    b37e:	0a 12       	push	r10		;
    b380:	31 82       	sub	#8,	r1	;r2 As==11
    b382:	0c 4e       	mov	r14,	r12	;
    b384:	0d 4f       	mov	r15,	r13	;
    b386:	84 4f fa ff 	mov	r15,	-6(r4)	; 0xfffa
    b38a:	84 4e f8 ff 	mov	r14,	-8(r4)	; 0xfff8
    b38e:	1f 44 fa ff 	mov	-6(r4),	r15	;
    b392:	1b 4e 80 00 	mov	128(r14),r11	;0x00080
    b396:	0a 4b       	mov	r11,	r10	;
    b398:	1a 53       	inc	r10		;
    b39a:	8e 4a 80 00 	mov	r10,	128(r14); 0x0080
    b39e:	1e 44 f8 ff 	mov	-8(r4),	r14	;
    b3a2:	0b 5b       	rla	r11		;
    b3a4:	0e 5b       	add	r11,	r14	;
    b3a6:	8e 4f 00 00 	mov	r15,	0(r14)	;
    b3aa:	84 4c f6 ff 	mov	r12,	-10(r4)	; 0xfff6
    b3ae:	84 4d f4 ff 	mov	r13,	-12(r4)	; 0xfff4
    b3b2:	31 52       	add	#8,	r1	;r2 As==11
    b3b4:	3a 41       	pop	r10		;
    b3b6:	3b 41       	pop	r11		;
    b3b8:	34 41       	pop	r4		;
    b3ba:	30 41       	ret			

0000b3bc <init>:
    b3bc:	04 12       	push	r4		;
    b3be:	04 41       	mov	r1,	r4	;
    b3c0:	3f 40 f6 52 	mov	#21238,	r15	;#0x52f6
    b3c4:	3e 40 aa 5f 	mov	#24490,	r14	;#0x5faa
    b3c8:	3d 40 40 46 	mov	#17984,	r13	;#0x4640
    b3cc:	b0 12 fc c7 	call	#51196		;#0xc7fc
    b3d0:	1d 42 c0 03 	mov	&0x03c0,r13	;0x03c0
    b3d4:	3d f0 ff e6 	and	#59135,	r13	;#0xe6ff
    b3d8:	82 4d c0 03 	mov	r13,	&0x03c0	;
    b3dc:	1d 42 c0 03 	mov	&0x03c0,r13	;0x03c0
    b3e0:	3d d0 00 02 	bis	#512,	r13	;#0x0200
    b3e4:	82 4d c0 03 	mov	r13,	&0x03c0	;
    b3e8:	1d 42 c0 03 	mov	&0x03c0,r13	;0x03c0
    b3ec:	3d d0 c0 00 	bis	#192,	r13	;#0x00c0
    b3f0:	82 4d c0 03 	mov	r13,	&0x03c0	;
    b3f4:	1d 42 c0 03 	mov	&0x03c0,r13	;0x03c0
    b3f8:	3d f0 ef ff 	and	#65519,	r13	;#0xffef
    b3fc:	82 4d c0 03 	mov	r13,	&0x03c0	;
    b400:	1d 42 c0 03 	mov	&0x03c0,r13	;0x03c0
    b404:	3d d0 20 00 	bis	#32,	r13	;#0x0020
    b408:	82 4d c0 03 	mov	r13,	&0x03c0	;
    b40c:	1d 42 c0 03 	mov	&0x03c0,r13	;0x03c0
    b410:	2d d3       	bis	#2,	r13	;r3 As==10
    b412:	82 4d c0 03 	mov	r13,	&0x03c0	;
    b416:	b0 12 64 c2 	call	#49764		;#0xc264
    b41a:	b0 12 32 d0 	call	#53298		;#0xd032
    b41e:	32 d2       	eint			
    b420:	03 43       	nop			
    b422:	34 41       	pop	r4		;
    b424:	30 41       	ret			
	...

0000b428 <main>:
    b428:	04 12       	push	r4		;
    b42a:	04 41       	mov	r1,	r4	;
    b42c:	0b 12       	push	r11		;
    b42e:	31 80 c0 00 	sub	#192,	r1	;#0x00c0
    b432:	b0 12 bc b3 	call	#46012		;#0xb3bc
    b436:	b0 12 a8 c9 	call	#51624		;#0xc9a8
    b43a:	84 43 ec ff 	mov	#0,	-20(r4)	;r3 As==00, 0xffec
    b43e:	00 3c       	jmp	$+2      	;abs 0xb440
    b440:	5c 42 f0 44 	mov.b	&0x44f0,r12	;0x44f0
    b444:	4c 93       	cmp.b	#0,	r12	;r3 As==00
    b446:	17 20       	jnz	$+48     	;abs 0xb476
    b448:	00 3c       	jmp	$+2      	;abs 0xb44a
    b44a:	1c 42 b6 5f 	mov	&0x5fb6,r12	;0x5fb6
    b44e:	2c 4c       	mov	@r12,	r12	;
    b450:	8c 43 1e 00 	mov	#0,	30(r12)	;r3 As==00, 0x001e
    b454:	b0 12 60 ca 	call	#51808		;#0xca60
    b458:	0e 3c       	jmp	$+30     	;abs 0xb476
    b45a:	5c 42 15 45 	mov.b	&0x4515,r12	;0x4515
    b45e:	4c 93       	cmp.b	#0,	r12	;r3 As==00
    b460:	0a 20       	jnz	$+22     	;abs 0xb476
    b462:	00 3c       	jmp	$+2      	;abs 0xb464
    b464:	1c 42 b6 5f 	mov	&0x5fb6,r12	;0x5fb6
    b468:	2c 4c       	mov	@r12,	r12	;
    b46a:	bc 40 25 00 	mov	#37,	30(r12)	;#0x0025, 0x001e
    b46e:	1e 00 
    b470:	b0 12 60 ca 	call	#51808		;#0xca60
    b474:	00 3c       	jmp	$+2      	;abs 0xb476
    b476:	0c 41       	mov	r1,	r12	;
    b478:	bc 40 80 44 	mov	#17536,	0(r12)	;#0x4480
    b47c:	00 00 
    b47e:	b0 12 be ce 	call	#52926		;#0xcebe
    b482:	3c 40 f8 5e 	mov	#24312,	r12	;#0x5ef8
    b486:	2d 43       	mov	#2,	r13	;r3 As==10
    b488:	84 4f e6 ff 	mov	r15,	-26(r4)	; 0xffe6
    b48c:	0f 4c       	mov	r12,	r15	;
    b48e:	0e 4d       	mov	r13,	r14	;
    b490:	84 4d e4 ff 	mov	r13,	-28(r4)	; 0xffe4
    b494:	b0 12 14 cd 	call	#52500		;#0xcd14
    b498:	b2 40 f6 52 	mov	#21238,	&0x5ef8	;#0x52f6
    b49c:	f8 5e 
    b49e:	3c 40 00 0c 	mov	#3072,	r12	;#0x0c00
    b4a2:	3c 50 f6 52 	add	#21238,	r12	;#0x52f6
    b4a6:	0f 4c       	mov	r12,	r15	;
    b4a8:	1e 44 e4 ff 	mov	-28(r4),r14	;0xffffffe4
    b4ac:	b0 12 14 cd 	call	#52500		;#0xcd14
    b4b0:	82 43 f6 5e 	mov	#0,	&0x5ef6	;r3 As==00
    b4b4:	3f 40 fa 5e 	mov	#24314,	r15	;#0x5efa
    b4b8:	1e 44 e4 ff 	mov	-28(r4),r14	;0xffffffe4
    b4bc:	b0 12 14 cd 	call	#52500		;#0xcd14
    b4c0:	82 43 fa 5e 	mov	#0,	&0x5efa	;r3 As==00
    b4c4:	00 3c       	jmp	$+2      	;abs 0xb4c6
    b4c6:	5c 42 f1 44 	mov.b	&0x44f1,r12	;0x44f1
    b4ca:	4c 93       	cmp.b	#0,	r12	;r3 As==00
    b4cc:	16 20       	jnz	$+46     	;abs 0xb4fa
    b4ce:	00 3c       	jmp	$+2      	;abs 0xb4d0
    b4d0:	1c 42 b6 5f 	mov	&0x5fb6,r12	;0x5fb6
    b4d4:	2c 4c       	mov	@r12,	r12	;
    b4d6:	9c 43 1e 00 	mov	#1,	30(r12)	;r3 As==01, 0x001e
    b4da:	b0 12 60 ca 	call	#51808		;#0xca60
    b4de:	0d 3c       	jmp	$+28     	;abs 0xb4fa
    b4e0:	5c 42 f4 44 	mov.b	&0x44f4,r12	;0x44f4
    b4e4:	4c 93       	cmp.b	#0,	r12	;r3 As==00
    b4e6:	09 20       	jnz	$+20     	;abs 0xb4fa
    b4e8:	00 3c       	jmp	$+2      	;abs 0xb4ea
    b4ea:	1c 42 b6 5f 	mov	&0x5fb6,r12	;0x5fb6
    b4ee:	2c 4c       	mov	@r12,	r12	;
    b4f0:	ac 42 1e 00 	mov	#4,	30(r12)	;r2 As==10, 0x001e
    b4f4:	b0 12 60 ca 	call	#51808		;#0xca60
    b4f8:	00 3c       	jmp	$+2      	;abs 0xb4fa
    b4fa:	1c 42 fa 5e 	mov	&0x5efa,r12	;0x5efa
    b4fe:	3c 90 00 01 	cmp	#256,	r12	;#0x0100
    b502:	87 2c       	jc	$+272    	;abs 0xb612
    b504:	00 3c       	jmp	$+2      	;abs 0xb506
    b506:	5c 42 f2 44 	mov.b	&0x44f2,r12	;0x44f2
    b50a:	4c 93       	cmp.b	#0,	r12	;r3 As==00
    b50c:	09 20       	jnz	$+20     	;abs 0xb520
    b50e:	00 3c       	jmp	$+2      	;abs 0xb510
    b510:	1c 42 b6 5f 	mov	&0x5fb6,r12	;0x5fb6
    b514:	2c 4c       	mov	@r12,	r12	;
    b516:	ac 43 1e 00 	mov	#2,	30(r12)	;r3 As==10, 0x001e
    b51a:	b0 12 60 ca 	call	#51808		;#0xca60
    b51e:	00 3c       	jmp	$+2      	;abs 0xb520
    b520:	3f 40 fa 5e 	mov	#24314,	r15	;#0x5efa
    b524:	1c 42 fa 5e 	mov	&0x5efa,r12	;0x5efa
    b528:	3d 40 fc 5e 	mov	#24316,	r13	;#0x5efc
    b52c:	2e 43       	mov	#2,	r14	;r3 As==10
    b52e:	84 4f e2 ff 	mov	r15,	-30(r4)	; 0xffe2
    b532:	0f 4d       	mov	r13,	r15	;
    b534:	84 4e e0 ff 	mov	r14,	-32(r4)	; 0xffe0
    b538:	84 4c de ff 	mov	r12,	-34(r4)	; 0xffde
    b53c:	b0 12 14 cd 	call	#52500		;#0xcd14
    b540:	1c 44 de ff 	mov	-34(r4),r12	;0xffffffde
    b544:	82 4c fc 5e 	mov	r12,	&0x5efc	;
    b548:	1f 42 fa 5e 	mov	&0x5efa,r15	;0x5efa
    b54c:	1c 42 f8 5e 	mov	&0x5ef8,r12	;0x5ef8
    b550:	3e 40 06 00 	mov	#6,	r14	;
    b554:	84 4c dc ff 	mov	r12,	-36(r4)	; 0xffdc
    b558:	b0 12 00 ce 	call	#52736		;#0xce00
    b55c:	1c 44 dc ff 	mov	-36(r4),r12	;0xffffffdc
    b560:	0c 5f       	add	r15,	r12	;
    b562:	84 4c ee ff 	mov	r12,	-18(r4)	; 0xffee
    b566:	1d 42 fa 5e 	mov	&0x5efa,r13	;0x5efa
    b56a:	0f 4c       	mov	r12,	r15	;
    b56c:	1e 44 e0 ff 	mov	-32(r4),r14	;0xffffffe0
    b570:	84 4c da ff 	mov	r12,	-38(r4)	; 0xffda
    b574:	84 4d d8 ff 	mov	r13,	-40(r4)	; 0xffd8
    b578:	b0 12 14 cd 	call	#52500		;#0xcd14
    b57c:	1c 44 da ff 	mov	-38(r4),r12	;0xffffffda
    b580:	1d 44 d8 ff 	mov	-40(r4),r13	;0xffffffd8
    b584:	8c 4d 00 00 	mov	r13,	0(r12)	;
    b588:	1d 44 ee ff 	mov	-18(r4),r13	;0xffffffee
    b58c:	0e 4d       	mov	r13,	r14	;
    b58e:	2e 53       	incd	r14		;
    b590:	0f 4e       	mov	r14,	r15	;
    b592:	1e 44 e0 ff 	mov	-32(r4),r14	;0xffffffe0
    b596:	84 4d d6 ff 	mov	r13,	-42(r4)	; 0xffd6
    b59a:	b0 12 14 cd 	call	#52500		;#0xcd14
    b59e:	1c 44 d6 ff 	mov	-42(r4),r12	;0xffffffd6
    b5a2:	8c 43 02 00 	mov	#0,	2(r12)	;r3 As==00
    b5a6:	1d 44 ee ff 	mov	-18(r4),r13	;0xffffffee
    b5aa:	0e 4d       	mov	r13,	r14	;
    b5ac:	2e 52       	add	#4,	r14	;r2 As==10
    b5ae:	0f 4e       	mov	r14,	r15	;
    b5b0:	1e 44 e0 ff 	mov	-32(r4),r14	;0xffffffe0
    b5b4:	84 4d d4 ff 	mov	r13,	-44(r4)	; 0xffd4
    b5b8:	b0 12 14 cd 	call	#52500		;#0xcd14
    b5bc:	1c 44 d4 ff 	mov	-44(r4),r12	;0xffffffd4
    b5c0:	8c 43 04 00 	mov	#0,	4(r12)	;r3 As==00
    b5c4:	1d 42 f8 5e 	mov	&0x5ef8,r13	;0x5ef8
    b5c8:	0e 4d       	mov	r13,	r14	;
    b5ca:	3e 50 00 0c 	add	#3072,	r14	;#0x0c00
    b5ce:	1f 4d 00 0c 	mov	3072(r13),r15	;0x00c00
    b5d2:	1f 53       	inc	r15		;
    b5d4:	84 4f d2 ff 	mov	r15,	-46(r4)	; 0xffd2
    b5d8:	0f 4e       	mov	r14,	r15	;
    b5da:	1e 44 e0 ff 	mov	-32(r4),r14	;0xffffffe0
    b5de:	84 4d d0 ff 	mov	r13,	-48(r4)	; 0xffd0
    b5e2:	b0 12 14 cd 	call	#52500		;#0xcd14
    b5e6:	1c 44 d0 ff 	mov	-48(r4),r12	;0xffffffd0
    b5ea:	1d 44 d2 ff 	mov	-46(r4),r13	;0xffffffd2
    b5ee:	8c 4d 00 0c 	mov	r13,	3072(r12); 0x0c00
    b5f2:	1d 42 fa 5e 	mov	&0x5efa,r13	;0x5efa
    b5f6:	1d 53       	inc	r13		;
    b5f8:	1f 44 e2 ff 	mov	-30(r4),r15	;0xffffffe2
    b5fc:	1e 44 e0 ff 	mov	-32(r4),r14	;0xffffffe0
    b600:	84 4d ce ff 	mov	r13,	-50(r4)	; 0xffce
    b604:	b0 12 14 cd 	call	#52500		;#0xcd14
    b608:	1c 44 ce ff 	mov	-50(r4),r12	;0xffffffce
    b60c:	82 4c fa 5e 	mov	r12,	&0x5efa	;
    b610:	67 3f       	jmp	$-304    	;abs 0xb4e0
    b612:	5c 42 f3 44 	mov.b	&0x44f3,r12	;0x44f3
    b616:	4c 93       	cmp.b	#0,	r12	;r3 As==00
    b618:	0a 20       	jnz	$+22     	;abs 0xb62e
    b61a:	00 3c       	jmp	$+2      	;abs 0xb61c
    b61c:	1c 42 b6 5f 	mov	&0x5fb6,r12	;0x5fb6
    b620:	2c 4c       	mov	@r12,	r12	;
    b622:	bc 40 03 00 	mov	#3,	30(r12)	; 0x001e
    b626:	1e 00 
    b628:	b0 12 60 ca 	call	#51808		;#0xca60
    b62c:	00 3c       	jmp	$+2      	;abs 0xb62e
    b62e:	3f 40 fe 5e 	mov	#24318,	r15	;#0x5efe
    b632:	2c 43       	mov	#2,	r12	;r3 As==10
    b634:	0e 4c       	mov	r12,	r14	;
    b636:	84 4c cc ff 	mov	r12,	-52(r4)	; 0xffcc
    b63a:	b0 12 14 cd 	call	#52500		;#0xcd14
    b63e:	82 43 fe 5e 	mov	#0,	&0x5efe	;r3 As==00
    b642:	3f 40 00 5f 	mov	#24320,	r15	;#0x5f00
    b646:	1e 44 cc ff 	mov	-52(r4),r14	;0xffffffcc
    b64a:	b0 12 14 cd 	call	#52500		;#0xcd14
    b64e:	82 43 00 5f 	mov	#0,	&0x5f00	;r3 As==00
    b652:	3f 40 02 5f 	mov	#24322,	r15	;#0x5f02
    b656:	1e 44 cc ff 	mov	-52(r4),r14	;0xffffffcc
    b65a:	b0 12 14 cd 	call	#52500		;#0xcd14
    b65e:	82 43 02 5f 	mov	#0,	&0x5f02	;r3 As==00
    b662:	3c 40 82 00 	mov	#130,	r12	;#0x0082
    b666:	3c 50 04 5f 	add	#24324,	r12	;#0x5f04
    b66a:	0f 4c       	mov	r12,	r15	;
    b66c:	1e 44 cc ff 	mov	-52(r4),r14	;0xffffffcc
    b670:	b0 12 14 cd 	call	#52500		;#0xcd14
    b674:	92 43 86 5f 	mov	#1,	&0x5f86	;r3 As==01
    b678:	3c 40 80 00 	mov	#128,	r12	;#0x0080
    b67c:	3c 50 04 5f 	add	#24324,	r12	;#0x5f04
    b680:	0f 4c       	mov	r12,	r15	;
    b682:	1e 44 cc ff 	mov	-52(r4),r14	;0xffffffcc
    b686:	b0 12 14 cd 	call	#52500		;#0xcd14
    b68a:	82 43 84 5f 	mov	#0,	&0x5f84	;r3 As==00
    b68e:	00 3c       	jmp	$+2      	;abs 0xb690
    b690:	5c 42 f5 44 	mov.b	&0x44f5,r12	;0x44f5
    b694:	4c 93       	cmp.b	#0,	r12	;r3 As==00
    b696:	18 20       	jnz	$+50     	;abs 0xb6c8
    b698:	00 3c       	jmp	$+2      	;abs 0xb69a
    b69a:	1c 42 b6 5f 	mov	&0x5fb6,r12	;0x5fb6
    b69e:	2c 4c       	mov	@r12,	r12	;
    b6a0:	bc 40 05 00 	mov	#5,	30(r12)	; 0x001e
    b6a4:	1e 00 
    b6a6:	b0 12 60 ca 	call	#51808		;#0xca60
    b6aa:	0e 3c       	jmp	$+30     	;abs 0xb6c8
    b6ac:	5c 42 16 45 	mov.b	&0x4516,r12	;0x4516
    b6b0:	4c 93       	cmp.b	#0,	r12	;r3 As==00
    b6b2:	0a 20       	jnz	$+22     	;abs 0xb6c8
    b6b4:	00 3c       	jmp	$+2      	;abs 0xb6b6
    b6b6:	1c 42 b6 5f 	mov	&0x5fb6,r12	;0x5fb6
    b6ba:	2c 4c       	mov	@r12,	r12	;
    b6bc:	bc 40 26 00 	mov	#38,	30(r12)	;#0x0026, 0x001e
    b6c0:	1e 00 
    b6c2:	b0 12 60 ca 	call	#51808		;#0xca60
    b6c6:	00 3c       	jmp	$+2      	;abs 0xb6c8
    b6c8:	1c 42 fe 5e 	mov	&0x5efe,r12	;0x5efe
    b6cc:	3f 40 88 5f 	mov	#24456,	r15	;#0x5f88
    b6d0:	2e 43       	mov	#2,	r14	;r3 As==10
    b6d2:	84 4c ca ff 	mov	r12,	-54(r4)	; 0xffca
    b6d6:	b0 12 14 cd 	call	#52500		;#0xcd14
    b6da:	1c 44 ca ff 	mov	-54(r4),r12	;0xffffffca
    b6de:	82 4c 88 5f 	mov	r12,	&0x5f88	;
    b6e2:	1c 42 00 5f 	mov	&0x5f00,r12	;0x5f00
    b6e6:	0c 93       	cmp	#0,	r12	;r3 As==00
    b6e8:	35 20       	jnz	$+108    	;abs 0xb754
    b6ea:	00 3c       	jmp	$+2      	;abs 0xb6ec
    b6ec:	5c 42 f6 44 	mov.b	&0x44f6,r12	;0x44f6
    b6f0:	4c 93       	cmp.b	#0,	r12	;r3 As==00
    b6f2:	0a 20       	jnz	$+22     	;abs 0xb708
    b6f4:	00 3c       	jmp	$+2      	;abs 0xb6f6
    b6f6:	1c 42 b6 5f 	mov	&0x5fb6,r12	;0x5fb6
    b6fa:	2c 4c       	mov	@r12,	r12	;
    b6fc:	bc 40 06 00 	mov	#6,	30(r12)	; 0x001e
    b700:	1e 00 
    b702:	b0 12 60 ca 	call	#51808		;#0xca60
    b706:	00 3c       	jmp	$+2      	;abs 0xb708
    b708:	3f 40 02 5f 	mov	#24322,	r15	;#0x5f02
    b70c:	1c 42 02 5f 	mov	&0x5f02,r12	;0x5f02
    b710:	84 4c f2 ff 	mov	r12,	-14(r4)	; 0xfff2
    b714:	1c 53       	inc	r12		;
    b716:	3c f0 03 00 	and	#3,	r12	;
    b71a:	84 4c f0 ff 	mov	r12,	-16(r4)	; 0xfff0
    b71e:	3d 40 8a 5f 	mov	#24458,	r13	;#0x5f8a
    b722:	2e 43       	mov	#2,	r14	;r3 As==10
    b724:	84 4f c8 ff 	mov	r15,	-56(r4)	; 0xffc8
    b728:	0f 4d       	mov	r13,	r15	;
    b72a:	84 4e c6 ff 	mov	r14,	-58(r4)	; 0xffc6
    b72e:	84 4c c4 ff 	mov	r12,	-60(r4)	; 0xffc4
    b732:	b0 12 14 cd 	call	#52500		;#0xcd14
    b736:	1c 44 c4 ff 	mov	-60(r4),r12	;0xffffffc4
    b73a:	82 4c 8a 5f 	mov	r12,	&0x5f8a	;
    b73e:	1f 44 c8 ff 	mov	-56(r4),r15	;0xffffffc8
    b742:	1e 44 c6 ff 	mov	-58(r4),r14	;0xffffffc6
    b746:	b0 12 14 cd 	call	#52500		;#0xcd14
    b74a:	1c 44 c4 ff 	mov	-60(r4),r12	;0xffffffc4
    b74e:	82 4c 02 5f 	mov	r12,	&0x5f02	;
    b752:	0e 3c       	jmp	$+30     	;abs 0xb770
    b754:	5c 42 f7 44 	mov.b	&0x44f7,r12	;0x44f7
    b758:	4c 93       	cmp.b	#0,	r12	;r3 As==00
    b75a:	17 20       	jnz	$+48     	;abs 0xb78a
    b75c:	00 3c       	jmp	$+2      	;abs 0xb75e
    b75e:	1c 42 b6 5f 	mov	&0x5fb6,r12	;0x5fb6
    b762:	2c 4c       	mov	@r12,	r12	;
    b764:	bc 40 07 00 	mov	#7,	30(r12)	; 0x001e
    b768:	1e 00 
    b76a:	b0 12 60 ca 	call	#51808		;#0xca60
    b76e:	0d 3c       	jmp	$+28     	;abs 0xb78a
    b770:	5c 42 f8 44 	mov.b	&0x44f8,r12	;0x44f8
    b774:	4c 93       	cmp.b	#0,	r12	;r3 As==00
    b776:	09 20       	jnz	$+20     	;abs 0xb78a
    b778:	00 3c       	jmp	$+2      	;abs 0xb77a
    b77a:	1c 42 b6 5f 	mov	&0x5fb6,r12	;0x5fb6
    b77e:	2c 4c       	mov	@r12,	r12	;
    b780:	bc 42 1e 00 	mov	#8,	30(r12)	;r2 As==11, 0x001e
    b784:	b0 12 60 ca 	call	#51808		;#0xca60
    b788:	00 3c       	jmp	$+2      	;abs 0xb78a
    b78a:	3f 40 00 5f 	mov	#24320,	r15	;#0x5f00
    b78e:	1c 42 00 5f 	mov	&0x5f00,r12	;0x5f00
    b792:	1c 53       	inc	r12		;
    b794:	2e 43       	mov	#2,	r14	;r3 As==10
    b796:	84 4c c2 ff 	mov	r12,	-62(r4)	; 0xffc2
    b79a:	b0 12 14 cd 	call	#52500		;#0xcd14
    b79e:	1c 44 c2 ff 	mov	-62(r4),r12	;0xffffffc2
    b7a2:	82 4c 00 5f 	mov	r12,	&0x5f00	;
    b7a6:	2c 93       	cmp	#2,	r12	;r3 As==10
    b7a8:	17 20       	jnz	$+48     	;abs 0xb7d8
    b7aa:	00 3c       	jmp	$+2      	;abs 0xb7ac
    b7ac:	5c 42 f9 44 	mov.b	&0x44f9,r12	;0x44f9
    b7b0:	4c 93       	cmp.b	#0,	r12	;r3 As==00
    b7b2:	0a 20       	jnz	$+22     	;abs 0xb7c8
    b7b4:	00 3c       	jmp	$+2      	;abs 0xb7b6
    b7b6:	1c 42 b6 5f 	mov	&0x5fb6,r12	;0x5fb6
    b7ba:	2c 4c       	mov	@r12,	r12	;
    b7bc:	bc 40 09 00 	mov	#9,	30(r12)	; 0x001e
    b7c0:	1e 00 
    b7c2:	b0 12 60 ca 	call	#51808		;#0xca60
    b7c6:	00 3c       	jmp	$+2      	;abs 0xb7c8
    b7c8:	3f 40 00 5f 	mov	#24320,	r15	;#0x5f00
    b7cc:	2e 43       	mov	#2,	r14	;r3 As==10
    b7ce:	b0 12 14 cd 	call	#52500		;#0xcd14
    b7d2:	82 43 00 5f 	mov	#0,	&0x5f00	;r3 As==00
    b7d6:	0e 3c       	jmp	$+30     	;abs 0xb7f4
    b7d8:	5c 42 fa 44 	mov.b	&0x44fa,r12	;0x44fa
    b7dc:	4c 93       	cmp.b	#0,	r12	;r3 As==00
    b7de:	18 20       	jnz	$+50     	;abs 0xb810
    b7e0:	00 3c       	jmp	$+2      	;abs 0xb7e2
    b7e2:	1c 42 b6 5f 	mov	&0x5fb6,r12	;0x5fb6
    b7e6:	2c 4c       	mov	@r12,	r12	;
    b7e8:	bc 40 0a 00 	mov	#10,	30(r12)	;#0x000a, 0x001e
    b7ec:	1e 00 
    b7ee:	b0 12 60 ca 	call	#51808		;#0xca60
    b7f2:	0e 3c       	jmp	$+30     	;abs 0xb810
    b7f4:	5c 42 fb 44 	mov.b	&0x44fb,r12	;0x44fb
    b7f8:	4c 93       	cmp.b	#0,	r12	;r3 As==00
    b7fa:	0a 20       	jnz	$+22     	;abs 0xb810
    b7fc:	00 3c       	jmp	$+2      	;abs 0xb7fe
    b7fe:	1c 42 b6 5f 	mov	&0x5fb6,r12	;0x5fb6
    b802:	2c 4c       	mov	@r12,	r12	;
    b804:	bc 40 0b 00 	mov	#11,	30(r12)	;#0x000b, 0x001e
    b808:	1e 00 
    b80a:	b0 12 60 ca 	call	#51808		;#0xca60
    b80e:	00 3c       	jmp	$+2      	;abs 0xb810
    b810:	00 3c       	jmp	$+2      	;abs 0xb812
    b812:	5c 42 fc 44 	mov.b	&0x44fc,r12	;0x44fc
    b816:	4c 93       	cmp.b	#0,	r12	;r3 As==00
    b818:	18 20       	jnz	$+50     	;abs 0xb84a
    b81a:	00 3c       	jmp	$+2      	;abs 0xb81c
    b81c:	1c 42 b6 5f 	mov	&0x5fb6,r12	;0x5fb6
    b820:	2c 4c       	mov	@r12,	r12	;
    b822:	bc 40 0c 00 	mov	#12,	30(r12)	;#0x000c, 0x001e
    b826:	1e 00 
    b828:	b0 12 60 ca 	call	#51808		;#0xca60
    b82c:	0e 3c       	jmp	$+30     	;abs 0xb84a
    b82e:	5c 42 04 45 	mov.b	&0x4504,r12	;0x4504
    b832:	4c 93       	cmp.b	#0,	r12	;r3 As==00
    b834:	0a 20       	jnz	$+22     	;abs 0xb84a
    b836:	00 3c       	jmp	$+2      	;abs 0xb838
    b838:	1c 42 b6 5f 	mov	&0x5fb6,r12	;0x5fb6
    b83c:	2c 4c       	mov	@r12,	r12	;
    b83e:	bc 40 14 00 	mov	#20,	30(r12)	;#0x0014, 0x001e
    b842:	1e 00 
    b844:	b0 12 60 ca 	call	#51808		;#0xca60
    b848:	00 3c       	jmp	$+2      	;abs 0xb84a
    b84a:	1c 42 00 5f 	mov	&0x5f00,r12	;0x5f00
    b84e:	0c 93       	cmp	#0,	r12	;r3 As==00
    b850:	10 20       	jnz	$+34     	;abs 0xb872
    b852:	00 3c       	jmp	$+2      	;abs 0xb854
    b854:	5c 42 fd 44 	mov.b	&0x44fd,r12	;0x44fd
    b858:	4c 93       	cmp.b	#0,	r12	;r3 As==00
    b85a:	0a 20       	jnz	$+22     	;abs 0xb870
    b85c:	00 3c       	jmp	$+2      	;abs 0xb85e
    b85e:	1c 42 b6 5f 	mov	&0x5fb6,r12	;0x5fb6
    b862:	2c 4c       	mov	@r12,	r12	;
    b864:	bc 40 0d 00 	mov	#13,	30(r12)	;#0x000d, 0x001e
    b868:	1e 00 
    b86a:	b0 12 60 ca 	call	#51808		;#0xca60
    b86e:	00 3c       	jmp	$+2      	;abs 0xb870
    b870:	14 3c       	jmp	$+42     	;abs 0xb89a
    b872:	5c 42 fe 44 	mov.b	&0x44fe,r12	;0x44fe
    b876:	4c 93       	cmp.b	#0,	r12	;r3 As==00
    b878:	0a 20       	jnz	$+22     	;abs 0xb88e
    b87a:	00 3c       	jmp	$+2      	;abs 0xb87c
    b87c:	1c 42 b6 5f 	mov	&0x5fb6,r12	;0x5fb6
    b880:	2c 4c       	mov	@r12,	r12	;
    b882:	bc 40 0e 00 	mov	#14,	30(r12)	;#0x000e, 0x001e
    b886:	1e 00 
    b888:	b0 12 60 ca 	call	#51808		;#0xca60
    b88c:	00 3c       	jmp	$+2      	;abs 0xb88e
    b88e:	1c 42 00 5f 	mov	&0x5f00,r12	;0x5f00
    b892:	3c 53       	add	#-1,	r12	;r3 As==11
    b894:	84 4c c0 ff 	mov	r12,	-64(r4)	; 0xffc0
    b898:	17 3c       	jmp	$+48     	;abs 0xb8c8
    b89a:	5c 42 ff 44 	mov.b	&0x44ff,r12	;0x44ff
    b89e:	2d 43       	mov	#2,	r13	;r3 As==10
    b8a0:	4c 93       	cmp.b	#0,	r12	;r3 As==00
    b8a2:	84 4d be ff 	mov	r13,	-66(r4)	; 0xffbe
    b8a6:	2a 20       	jnz	$+86     	;abs 0xb8fc
    b8a8:	00 3c       	jmp	$+2      	;abs 0xb8aa
    b8aa:	1c 42 b6 5f 	mov	&0x5fb6,r12	;0x5fb6
    b8ae:	2c 4c       	mov	@r12,	r12	;
    b8b0:	bc 40 0f 00 	mov	#15,	30(r12)	;#0x000f, 0x001e
    b8b4:	1e 00 
    b8b6:	a2 43 a8 5f 	mov	#2,	&0x5fa8	;r3 As==10
    b8ba:	b0 12 60 ca 	call	#51808		;#0xca60
    b8be:	1c 42 a8 5f 	mov	&0x5fa8,r12	;0x5fa8
    b8c2:	84 4c be ff 	mov	r12,	-66(r4)	; 0xffbe
    b8c6:	1a 3c       	jmp	$+54     	;abs 0xb8fc
    b8c8:	5c 42 1f 45 	mov.b	&0x451f,r12	;0x451f
    b8cc:	4c 93       	cmp.b	#0,	r12	;r3 As==00
    b8ce:	1d 44 c0 ff 	mov	-64(r4),r13	;0xffffffc0
    b8d2:	84 4d be ff 	mov	r13,	-66(r4)	; 0xffbe
    b8d6:	12 20       	jnz	$+38     	;abs 0xb8fc
    b8d8:	00 3c       	jmp	$+2      	;abs 0xb8da
    b8da:	1c 42 b6 5f 	mov	&0x5fb6,r12	;0x5fb6
    b8de:	2c 4c       	mov	@r12,	r12	;
    b8e0:	bc 40 2f 00 	mov	#47,	30(r12)	;#0x002f, 0x001e
    b8e4:	1e 00 
    b8e6:	1c 44 c0 ff 	mov	-64(r4),r12	;0xffffffc0
    b8ea:	82 4c aa 5f 	mov	r12,	&0x5faa	;
    b8ee:	b0 12 60 ca 	call	#51808		;#0xca60
    b8f2:	1c 42 aa 5f 	mov	&0x5faa,r12	;0x5faa
    b8f6:	84 4c be ff 	mov	r12,	-66(r4)	; 0xffbe
    b8fa:	00 3c       	jmp	$+2      	;abs 0xb8fc
    b8fc:	1c 44 be ff 	mov	-66(r4),r12	;0xffffffbe
    b900:	84 4c ea ff 	mov	r12,	-22(r4)	; 0xffea
    b904:	0c 5c       	rla	r12		;
    b906:	0c 5c       	rla	r12		;
    b908:	0c 5c       	rla	r12		;
    b90a:	84 4c e8 ff 	mov	r12,	-24(r4)	; 0xffe8
    b90e:	1c 42 8a 5f 	mov	&0x5f8a,r12	;0x5f8a
    b912:	5d 44 e8 ff 	mov.b	-24(r4),r13	;0xffffffe8
    b916:	3e 40 ff 00 	mov	#255,	r14	;#0x00ff
    b91a:	4d 93       	cmp.b	#0,	r13	;r3 As==00
    b91c:	4f 4d       	mov.b	r13,	r15	;
    b91e:	84 4c bc ff 	mov	r12,	-68(r4)	; 0xffbc
    b922:	c4 4d bb ff 	mov.b	r13,	-69(r4)	; 0xffbb
    b926:	84 4e b8 ff 	mov	r14,	-72(r4)	; 0xffb8
    b92a:	c4 4f b7 ff 	mov.b	r15,	-73(r4)	; 0xffb7
    b92e:	0b 24       	jz	$+24     	;abs 0xb946
    b930:	5c 44 b7 ff 	mov.b	-73(r4),r12	;0xffffffb7
    b934:	1d 44 b8 ff 	mov	-72(r4),r13	;0xffffffb8
    b938:	0d 5d       	rla	r13		;
    b93a:	5c 83       	dec.b	r12		;
    b93c:	84 4d b8 ff 	mov	r13,	-72(r4)	; 0xffb8
    b940:	c4 4c b7 ff 	mov.b	r12,	-73(r4)	; 0xffb7
    b944:	f5 23       	jnz	$-20     	;abs 0xb930
    b946:	1c 44 b8 ff 	mov	-72(r4),r12	;0xffffffb8
    b94a:	1d 44 bc ff 	mov	-68(r4),r13	;0xffffffbc
    b94e:	0d fc       	and	r12,	r13	;
    b950:	5e 44 bb ff 	mov.b	-69(r4),r14	;0xffffffbb
    b954:	4e 93       	cmp.b	#0,	r14	;r3 As==00
    b956:	c4 4e b6 ff 	mov.b	r14,	-74(r4)	; 0xffb6
    b95a:	84 4d b4 ff 	mov	r13,	-76(r4)	; 0xffb4
    b95e:	0c 24       	jz	$+26     	;abs 0xb978
    b960:	5c 44 b6 ff 	mov.b	-74(r4),r12	;0xffffffb6
    b964:	1d 44 b4 ff 	mov	-76(r4),r13	;0xffffffb4
    b968:	12 c3       	clrc			
    b96a:	0d 10       	rrc	r13		;
    b96c:	5c 83       	dec.b	r12		;
    b96e:	84 4d b4 ff 	mov	r13,	-76(r4)	; 0xffb4
    b972:	c4 4c b6 ff 	mov.b	r12,	-74(r4)	; 0xffb6
    b976:	f4 23       	jnz	$-22     	;abs 0xb960
    b978:	1c 44 b4 ff 	mov	-76(r4),r12	;0xffffffb4
    b97c:	3f 40 fe 5e 	mov	#24318,	r15	;#0x5efe
    b980:	2d 43       	mov	#2,	r13	;r3 As==10
    b982:	0e 4d       	mov	r13,	r14	;
    b984:	84 4c b2 ff 	mov	r12,	-78(r4)	; 0xffb2
    b988:	84 4d b0 ff 	mov	r13,	-80(r4)	; 0xffb0
    b98c:	b0 12 14 cd 	call	#52500		;#0xcd14
    b990:	1c 44 b2 ff 	mov	-78(r4),r12	;0xffffffb2
    b994:	82 4c fe 5e 	mov	r12,	&0x5efe	;
    b998:	3c 40 82 00 	mov	#130,	r12	;#0x0082
    b99c:	3c 50 04 5f 	add	#24324,	r12	;#0x5f04
    b9a0:	1d 42 86 5f 	mov	&0x5f86,r13	;0x5f86
    b9a4:	1d 53       	inc	r13		;
    b9a6:	0f 4c       	mov	r12,	r15	;
    b9a8:	1e 44 b0 ff 	mov	-80(r4),r14	;0xffffffb0
    b9ac:	84 4d ae ff 	mov	r13,	-82(r4)	; 0xffae
    b9b0:	b0 12 14 cd 	call	#52500		;#0xcd14
    b9b4:	1c 44 ae ff 	mov	-82(r4),r12	;0xffffffae
    b9b8:	82 4c 86 5f 	mov	r12,	&0x5f86	;
    b9bc:	1c 42 88 5f 	mov	&0x5f88,r12	;0x5f88
    b9c0:	3f 40 8c 5f 	mov	#24460,	r15	;#0x5f8c
    b9c4:	1e 44 b0 ff 	mov	-80(r4),r14	;0xffffffb0
    b9c8:	84 4c ac ff 	mov	r12,	-84(r4)	; 0xffac
    b9cc:	b0 12 14 cd 	call	#52500		;#0xcd14
    b9d0:	1c 44 ac ff 	mov	-84(r4),r12	;0xffffffac
    b9d4:	82 4c 8c 5f 	mov	r12,	&0x5f8c	;
    b9d8:	1d 42 fe 5e 	mov	&0x5efe,r13	;0x5efe
    b9dc:	3f 40 8e 5f 	mov	#24462,	r15	;#0x5f8e
    b9e0:	1e 44 b0 ff 	mov	-80(r4),r14	;0xffffffb0
    b9e4:	84 4d aa ff 	mov	r13,	-86(r4)	; 0xffaa
    b9e8:	b0 12 14 cd 	call	#52500		;#0xcd14
    b9ec:	1c 44 aa ff 	mov	-86(r4),r12	;0xffffffaa
    b9f0:	82 4c 8e 5f 	mov	r12,	&0x5f8e	;
    b9f4:	1c 44 ac ff 	mov	-84(r4),r12	;0xffffffac
    b9f8:	84 4c f4 ff 	mov	r12,	-12(r4)	; 0xfff4
    b9fc:	3f 40 90 5f 	mov	#24464,	r15	;#0x5f90
    ba00:	1e 44 b0 ff 	mov	-80(r4),r14	;0xffffffb0
    ba04:	b0 12 14 cd 	call	#52500		;#0xcd14
    ba08:	b2 40 f6 52 	mov	#21238,	&0x5f90	;#0x52f6
    ba0c:	90 5f 
    ba0e:	1f 44 f4 ff 	mov	-12(r4),r15	;0xfffffff4
    ba12:	3e 40 06 00 	mov	#6,	r14	;
    ba16:	b0 12 00 ce 	call	#52736		;#0xce00
    ba1a:	0c 4f       	mov	r15,	r12	;
    ba1c:	3c 50 f6 52 	add	#21238,	r12	;#0x52f6
    ba20:	3d 40 92 5f 	mov	#24466,	r13	;#0x5f92
    ba24:	84 4f a8 ff 	mov	r15,	-88(r4)	; 0xffa8
    ba28:	0f 4d       	mov	r13,	r15	;
    ba2a:	1e 44 b0 ff 	mov	-80(r4),r14	;0xffffffb0
    ba2e:	84 4c a6 ff 	mov	r12,	-90(r4)	; 0xffa6
    ba32:	b0 12 14 cd 	call	#52500		;#0xcd14
    ba36:	1c 44 a6 ff 	mov	-90(r4),r12	;0xffffffa6
    ba3a:	82 4c 92 5f 	mov	r12,	&0x5f92	;
    ba3e:	1c 44 a8 ff 	mov	-88(r4),r12	;0xffffffa8
    ba42:	1d 4c fa 52 	mov	21242(r12),r13	;0x052fa
    ba46:	0d 93       	cmp	#0,	r13	;r3 As==00
    ba48:	17 20       	jnz	$+48     	;abs 0xba78
    ba4a:	00 3c       	jmp	$+2      	;abs 0xba4c
    ba4c:	5c 42 00 45 	mov.b	&0x4500,r12	;0x4500
    ba50:	4c 93       	cmp.b	#0,	r12	;r3 As==00
    ba52:	0a 20       	jnz	$+22     	;abs 0xba68
    ba54:	00 3c       	jmp	$+2      	;abs 0xba56
    ba56:	1c 42 b6 5f 	mov	&0x5fb6,r12	;0x5fb6
    ba5a:	2c 4c       	mov	@r12,	r12	;
    ba5c:	bc 40 10 00 	mov	#16,	30(r12)	;#0x0010, 0x001e
    ba60:	1e 00 
    ba62:	b0 12 60 ca 	call	#51808		;#0xca60
    ba66:	00 3c       	jmp	$+2      	;abs 0xba68
    ba68:	3f 40 94 5f 	mov	#24468,	r15	;#0x5f94
    ba6c:	2e 43       	mov	#2,	r14	;r3 As==10
    ba6e:	b0 12 14 cd 	call	#52500		;#0xcd14
    ba72:	82 43 94 5f 	mov	#0,	&0x5f94	;r3 As==00
    ba76:	ad 3c       	jmp	$+348    	;abs 0xbbd2
    ba78:	5c 42 01 45 	mov.b	&0x4501,r12	;0x4501
    ba7c:	4c 93       	cmp.b	#0,	r12	;r3 As==00
    ba7e:	0a 20       	jnz	$+22     	;abs 0xba94
    ba80:	00 3c       	jmp	$+2      	;abs 0xba82
    ba82:	1c 42 b6 5f 	mov	&0x5fb6,r12	;0x5fb6
    ba86:	2c 4c       	mov	@r12,	r12	;
    ba88:	bc 40 11 00 	mov	#17,	30(r12)	;#0x0011, 0x001e
    ba8c:	1e 00 
    ba8e:	b0 12 60 ca 	call	#51808		;#0xca60
    ba92:	00 3c       	jmp	$+2      	;abs 0xba94
    ba94:	1c 42 92 5f 	mov	&0x5f92,r12	;0x5f92
    ba98:	1c 4c 04 00 	mov	4(r12),	r12	;
    ba9c:	3f 40 a4 5f 	mov	#24484,	r15	;#0x5fa4
    baa0:	2e 43       	mov	#2,	r14	;r3 As==10
    baa2:	84 4c a4 ff 	mov	r12,	-92(r4)	; 0xffa4
    baa6:	b0 12 14 cd 	call	#52500		;#0xcd14
    baaa:	1c 44 a4 ff 	mov	-92(r4),r12	;0xffffffa4
    baae:	82 4c a4 5f 	mov	r12,	&0x5fa4	;
    bab2:	00 3c       	jmp	$+2      	;abs 0xbab4
    bab4:	5c 42 18 45 	mov.b	&0x4518,r12	;0x4518
    bab8:	4c 93       	cmp.b	#0,	r12	;r3 As==00
    baba:	0a 20       	jnz	$+22     	;abs 0xbad0
    babc:	00 3c       	jmp	$+2      	;abs 0xbabe
    babe:	1c 42 b6 5f 	mov	&0x5fb6,r12	;0x5fb6
    bac2:	2c 4c       	mov	@r12,	r12	;
    bac4:	bc 40 28 00 	mov	#40,	30(r12)	;#0x0028, 0x001e
    bac8:	1e 00 
    baca:	b0 12 60 ca 	call	#51808		;#0xca60
    bace:	00 3c       	jmp	$+2      	;abs 0xbad0
    bad0:	1c 42 a4 5f 	mov	&0x5fa4,r12	;0x5fa4
    bad4:	0c 93       	cmp	#0,	r12	;r3 As==00
    bad6:	67 24       	jz	$+208    	;abs 0xbba6
    bad8:	00 3c       	jmp	$+2      	;abs 0xbada
    bada:	5c 42 19 45 	mov.b	&0x4519,r12	;0x4519
    bade:	4c 93       	cmp.b	#0,	r12	;r3 As==00
    bae0:	0a 20       	jnz	$+22     	;abs 0xbaf6
    bae2:	00 3c       	jmp	$+2      	;abs 0xbae4
    bae4:	1c 42 b6 5f 	mov	&0x5fb6,r12	;0x5fb6
    bae8:	2c 4c       	mov	@r12,	r12	;
    baea:	bc 40 29 00 	mov	#41,	30(r12)	;#0x0029, 0x001e
    baee:	1e 00 
    baf0:	b0 12 60 ca 	call	#51808		;#0xca60
    baf4:	00 3c       	jmp	$+2      	;abs 0xbaf6
    baf6:	1f 42 a4 5f 	mov	&0x5fa4,r15	;0x5fa4
    bafa:	1c 42 90 5f 	mov	&0x5f90,r12	;0x5f90
    bafe:	3e 40 06 00 	mov	#6,	r14	;
    bb02:	84 4c a2 ff 	mov	r12,	-94(r4)	; 0xffa2
    bb06:	b0 12 00 ce 	call	#52736		;#0xce00
    bb0a:	1c 44 a2 ff 	mov	-94(r4),r12	;0xffffffa2
    bb0e:	0c 5f       	add	r15,	r12	;
    bb10:	3f 40 a6 5f 	mov	#24486,	r15	;#0x5fa6
    bb14:	2e 43       	mov	#2,	r14	;r3 As==10
    bb16:	84 4c a0 ff 	mov	r12,	-96(r4)	; 0xffa0
    bb1a:	b0 12 14 cd 	call	#52500		;#0xcd14
    bb1e:	1c 44 a0 ff 	mov	-96(r4),r12	;0xffffffa0
    bb22:	82 4c a6 5f 	mov	r12,	&0x5fa6	;
    bb26:	2e 4c       	mov	@r12,	r14	;
    bb28:	1f 42 8e 5f 	mov	&0x5f8e,r15	;0x5f8e
    bb2c:	0e 9f       	cmp	r15,	r14	;
    bb2e:	1d 20       	jnz	$+60     	;abs 0xbb6a
    bb30:	00 3c       	jmp	$+2      	;abs 0xbb32
    bb32:	5c 42 1b 45 	mov.b	&0x451b,r12	;0x451b
    bb36:	4c 93       	cmp.b	#0,	r12	;r3 As==00
    bb38:	0a 20       	jnz	$+22     	;abs 0xbb4e
    bb3a:	00 3c       	jmp	$+2      	;abs 0xbb3c
    bb3c:	1c 42 b6 5f 	mov	&0x5fb6,r12	;0x5fb6
    bb40:	2c 4c       	mov	@r12,	r12	;
    bb42:	bc 40 2b 00 	mov	#43,	30(r12)	;#0x002b, 0x001e
    bb46:	1e 00 
    bb48:	b0 12 60 ca 	call	#51808		;#0xca60
    bb4c:	00 3c       	jmp	$+2      	;abs 0xbb4e
    bb4e:	1c 42 a4 5f 	mov	&0x5fa4,r12	;0x5fa4
    bb52:	3f 40 94 5f 	mov	#24468,	r15	;#0x5f94
    bb56:	2e 43       	mov	#2,	r14	;r3 As==10
    bb58:	84 4c 9e ff 	mov	r12,	-98(r4)	; 0xff9e
    bb5c:	b0 12 14 cd 	call	#52500		;#0xcd14
    bb60:	1c 44 9e ff 	mov	-98(r4),r12	;0xffffff9e
    bb64:	82 4c 94 5f 	mov	r12,	&0x5f94	;
    bb68:	42 3c       	jmp	$+134    	;abs 0xbbee
    bb6a:	5c 42 1c 45 	mov.b	&0x451c,r12	;0x451c
    bb6e:	4c 93       	cmp.b	#0,	r12	;r3 As==00
    bb70:	0a 20       	jnz	$+22     	;abs 0xbb86
    bb72:	00 3c       	jmp	$+2      	;abs 0xbb74
    bb74:	1c 42 b6 5f 	mov	&0x5fb6,r12	;0x5fb6
    bb78:	2c 4c       	mov	@r12,	r12	;
    bb7a:	bc 40 2c 00 	mov	#44,	30(r12)	;#0x002c, 0x001e
    bb7e:	1e 00 
    bb80:	b0 12 60 ca 	call	#51808		;#0xca60
    bb84:	00 3c       	jmp	$+2      	;abs 0xbb86
    bb86:	1c 42 a6 5f 	mov	&0x5fa6,r12	;0x5fa6
    bb8a:	1c 4c 02 00 	mov	2(r12),	r12	;
    bb8e:	3f 40 a4 5f 	mov	#24484,	r15	;#0x5fa4
    bb92:	2e 43       	mov	#2,	r14	;r3 As==10
    bb94:	84 4c 9c ff 	mov	r12,	-100(r4); 0xff9c
    bb98:	b0 12 14 cd 	call	#52500		;#0xcd14
    bb9c:	1c 44 9c ff 	mov	-100(r4),r12	;0xffffff9c
    bba0:	82 4c a4 5f 	mov	r12,	&0x5fa4	;
    bba4:	95 3f       	jmp	$-212    	;abs 0xbad0
    bba6:	5c 42 1a 45 	mov.b	&0x451a,r12	;0x451a
    bbaa:	4c 93       	cmp.b	#0,	r12	;r3 As==00
    bbac:	0a 20       	jnz	$+22     	;abs 0xbbc2
    bbae:	00 3c       	jmp	$+2      	;abs 0xbbb0
    bbb0:	1c 42 b6 5f 	mov	&0x5fb6,r12	;0x5fb6
    bbb4:	2c 4c       	mov	@r12,	r12	;
    bbb6:	bc 40 2a 00 	mov	#42,	30(r12)	;#0x002a, 0x001e
    bbba:	1e 00 
    bbbc:	b0 12 60 ca 	call	#51808		;#0xca60
    bbc0:	00 3c       	jmp	$+2      	;abs 0xbbc2
    bbc2:	3f 40 94 5f 	mov	#24468,	r15	;#0x5f94
    bbc6:	2e 43       	mov	#2,	r14	;r3 As==10
    bbc8:	b0 12 14 cd 	call	#52500		;#0xcd14
    bbcc:	82 43 94 5f 	mov	#0,	&0x5f94	;r3 As==00
    bbd0:	1c 3c       	jmp	$+58     	;abs 0xbc0a
    bbd2:	5c 42 02 45 	mov.b	&0x4502,r12	;0x4502
    bbd6:	4c 93       	cmp.b	#0,	r12	;r3 As==00
    bbd8:	26 20       	jnz	$+78     	;abs 0xbc26
    bbda:	00 3c       	jmp	$+2      	;abs 0xbbdc
    bbdc:	1c 42 b6 5f 	mov	&0x5fb6,r12	;0x5fb6
    bbe0:	2c 4c       	mov	@r12,	r12	;
    bbe2:	bc 40 12 00 	mov	#18,	30(r12)	;#0x0012, 0x001e
    bbe6:	1e 00 
    bbe8:	b0 12 60 ca 	call	#51808		;#0xca60
    bbec:	1c 3c       	jmp	$+58     	;abs 0xbc26
    bbee:	5c 42 1d 45 	mov.b	&0x451d,r12	;0x451d
    bbf2:	4c 93       	cmp.b	#0,	r12	;r3 As==00
    bbf4:	18 20       	jnz	$+50     	;abs 0xbc26
    bbf6:	00 3c       	jmp	$+2      	;abs 0xbbf8
    bbf8:	1c 42 b6 5f 	mov	&0x5fb6,r12	;0x5fb6
    bbfc:	2c 4c       	mov	@r12,	r12	;
    bbfe:	bc 40 2d 00 	mov	#45,	30(r12)	;#0x002d, 0x001e
    bc02:	1e 00 
    bc04:	b0 12 60 ca 	call	#51808		;#0xca60
    bc08:	0e 3c       	jmp	$+30     	;abs 0xbc26
    bc0a:	5c 42 1e 45 	mov.b	&0x451e,r12	;0x451e
    bc0e:	4c 93       	cmp.b	#0,	r12	;r3 As==00
    bc10:	0a 20       	jnz	$+22     	;abs 0xbc26
    bc12:	00 3c       	jmp	$+2      	;abs 0xbc14
    bc14:	1c 42 b6 5f 	mov	&0x5fb6,r12	;0x5fb6
    bc18:	2c 4c       	mov	@r12,	r12	;
    bc1a:	bc 40 2e 00 	mov	#46,	30(r12)	;#0x002e, 0x001e
    bc1e:	1e 00 
    bc20:	b0 12 60 ca 	call	#51808		;#0xca60
    bc24:	00 3c       	jmp	$+2      	;abs 0xbc26
    bc26:	1c 42 94 5f 	mov	&0x5f94,r12	;0x5f94
    bc2a:	3f 40 88 5f 	mov	#24456,	r15	;#0x5f88
    bc2e:	2e 43       	mov	#2,	r14	;r3 As==10
    bc30:	84 4c 9a ff 	mov	r12,	-102(r4); 0xff9a
    bc34:	b0 12 14 cd 	call	#52500		;#0xcd14
    bc38:	1c 44 9a ff 	mov	-102(r4),r12	;0xffffff9a
    bc3c:	82 4c 88 5f 	mov	r12,	&0x5f88	;
    bc40:	00 3c       	jmp	$+2      	;abs 0xbc42
    bc42:	5c 42 03 45 	mov.b	&0x4503,r12	;0x4503
    bc46:	4c 93       	cmp.b	#0,	r12	;r3 As==00
    bc48:	0a 20       	jnz	$+22     	;abs 0xbc5e
    bc4a:	00 3c       	jmp	$+2      	;abs 0xbc4c
    bc4c:	1c 42 b6 5f 	mov	&0x5fb6,r12	;0x5fb6
    bc50:	2c 4c       	mov	@r12,	r12	;
    bc52:	bc 40 13 00 	mov	#19,	30(r12)	;#0x0013, 0x001e
    bc56:	1e 00 
    bc58:	b0 12 60 ca 	call	#51808		;#0xca60
    bc5c:	00 3c       	jmp	$+2      	;abs 0xbc5e
    bc5e:	1c 42 88 5f 	mov	&0x5f88,r12	;0x5f88
    bc62:	0c 93       	cmp	#0,	r12	;r3 As==00
    bc64:	02 24       	jz	$+6      	;abs 0xbc6a
    bc66:	30 40 2e b8 	br	#0xb82e		;
    bc6a:	00 3c       	jmp	$+2      	;abs 0xbc6c
    bc6c:	5c 42 05 45 	mov.b	&0x4505,r12	;0x4505
    bc70:	4c 93       	cmp.b	#0,	r12	;r3 As==00
    bc72:	0a 20       	jnz	$+22     	;abs 0xbc88
    bc74:	00 3c       	jmp	$+2      	;abs 0xbc76
    bc76:	1c 42 b6 5f 	mov	&0x5fb6,r12	;0x5fb6
    bc7a:	2c 4c       	mov	@r12,	r12	;
    bc7c:	bc 40 15 00 	mov	#21,	30(r12)	;#0x0015, 0x001e
    bc80:	1e 00 
    bc82:	b0 12 60 ca 	call	#51808		;#0xca60
    bc86:	00 3c       	jmp	$+2      	;abs 0xbc88
    bc88:	1c 42 8c 5f 	mov	&0x5f8c,r12	;0x5f8c
    bc8c:	84 4c f8 ff 	mov	r12,	-8(r4)	; 0xfff8
    bc90:	b4 40 04 5f 	mov	#24324,	-10(r4)	;#0x5f04, 0xfff6
    bc94:	f6 ff 
    bc96:	1c 44 f8 ff 	mov	-8(r4),	r12	;
    bc9a:	3d 40 80 00 	mov	#128,	r13	;#0x0080
    bc9e:	3d 50 04 5f 	add	#24324,	r13	;#0x5f04
    bca2:	1e 42 84 5f 	mov	&0x5f84,r14	;0x5f84
    bca6:	0f 4e       	mov	r14,	r15	;
    bca8:	1f 53       	inc	r15		;
    bcaa:	2b 43       	mov	#2,	r11	;r3 As==10
    bcac:	84 4f 98 ff 	mov	r15,	-104(r4); 0xff98
    bcb0:	0f 4d       	mov	r13,	r15	;
    bcb2:	84 4e 96 ff 	mov	r14,	-106(r4); 0xff96
    bcb6:	0e 4b       	mov	r11,	r14	;
    bcb8:	84 4c 94 ff 	mov	r12,	-108(r4); 0xff94
    bcbc:	84 4b 92 ff 	mov	r11,	-110(r4); 0xff92
    bcc0:	b0 12 14 cd 	call	#52500		;#0xcd14
    bcc4:	1c 44 98 ff 	mov	-104(r4),r12	;0xffffff98
    bcc8:	82 4c 84 5f 	mov	r12,	&0x5f84	;
    bccc:	1c 44 f6 ff 	mov	-10(r4),r12	;0xfffffff6
    bcd0:	1d 44 96 ff 	mov	-106(r4),r13	;0xffffff96
    bcd4:	0d 5d       	rla	r13		;
    bcd6:	0c 5d       	add	r13,	r12	;
    bcd8:	0f 4c       	mov	r12,	r15	;
    bcda:	1e 44 92 ff 	mov	-110(r4),r14	;0xffffff92
    bcde:	84 4c 90 ff 	mov	r12,	-112(r4); 0xff90
    bce2:	b0 12 14 cd 	call	#52500		;#0xcd14
    bce6:	1c 44 90 ff 	mov	-112(r4),r12	;0xffffff90
    bcea:	1d 44 94 ff 	mov	-108(r4),r13	;0xffffff94
    bcee:	8c 4d 00 00 	mov	r13,	0(r12)	;
    bcf2:	1d 42 fe 5e 	mov	&0x5efe,r13	;0x5efe
    bcf6:	1e 42 8c 5f 	mov	&0x5f8c,r14	;0x5f8c
    bcfa:	3f 40 96 5f 	mov	#24470,	r15	;#0x5f96
    bcfe:	1b 44 92 ff 	mov	-110(r4),r11	;0xffffff92
    bd02:	84 4e 8e ff 	mov	r14,	-114(r4); 0xff8e
    bd06:	0e 4b       	mov	r11,	r14	;
    bd08:	84 4d 8c ff 	mov	r13,	-116(r4); 0xff8c
    bd0c:	b0 12 14 cd 	call	#52500		;#0xcd14
    bd10:	1c 44 8c ff 	mov	-116(r4),r12	;0xffffff8c
    bd14:	82 4c 96 5f 	mov	r12,	&0x5f96	;
    bd18:	3f 40 98 5f 	mov	#24472,	r15	;#0x5f98
    bd1c:	1e 44 92 ff 	mov	-110(r4),r14	;0xffffff92
    bd20:	b0 12 14 cd 	call	#52500		;#0xcd14
    bd24:	1c 44 8e ff 	mov	-114(r4),r12	;0xffffff8e
    bd28:	82 4c 98 5f 	mov	r12,	&0x5f98	;
    bd2c:	3f 40 9a 5f 	mov	#24474,	r15	;#0x5f9a
    bd30:	1e 44 92 ff 	mov	-110(r4),r14	;0xffffff92
    bd34:	b0 12 14 cd 	call	#52500		;#0xcd14
    bd38:	b2 40 f6 52 	mov	#21238,	&0x5f9a	;#0x52f6
    bd3c:	9a 5f 
    bd3e:	1c 42 f6 5e 	mov	&0x5ef6,r12	;0x5ef6
    bd42:	3c 90 00 02 	cmp	#512,	r12	;#0x0200
    bd46:	18 20       	jnz	$+50     	;abs 0xbd78
    bd48:	00 3c       	jmp	$+2      	;abs 0xbd4a
    bd4a:	5c 42 06 45 	mov.b	&0x4506,r12	;0x4506
    bd4e:	4c 93       	cmp.b	#0,	r12	;r3 As==00
    bd50:	0a 20       	jnz	$+22     	;abs 0xbd66
    bd52:	00 3c       	jmp	$+2      	;abs 0xbd54
    bd54:	1c 42 b6 5f 	mov	&0x5fb6,r12	;0x5fb6
    bd58:	2c 4c       	mov	@r12,	r12	;
    bd5a:	bc 40 16 00 	mov	#22,	30(r12)	;#0x0016, 0x001e
    bd5e:	1e 00 
    bd60:	b0 12 60 ca 	call	#51808		;#0xca60
    bd64:	00 3c       	jmp	$+2      	;abs 0xbd66
    bd66:	0c 41       	mov	r1,	r12	;
    bd68:	bc 40 69 44 	mov	#17513,	0(r12)	;#0x4469
    bd6c:	00 00 
    bd6e:	b0 12 be ce 	call	#52926		;#0xcebe
    bd72:	84 4f 8a ff 	mov	r15,	-118(r4); 0xff8a
    bd76:	0e 3c       	jmp	$+30     	;abs 0xbd94
    bd78:	5c 42 07 45 	mov.b	&0x4507,r12	;0x4507
    bd7c:	4c 93       	cmp.b	#0,	r12	;r3 As==00
    bd7e:	18 20       	jnz	$+50     	;abs 0xbdb0
    bd80:	00 3c       	jmp	$+2      	;abs 0xbd82
    bd82:	1c 42 b6 5f 	mov	&0x5fb6,r12	;0x5fb6
    bd86:	2c 4c       	mov	@r12,	r12	;
    bd88:	bc 40 17 00 	mov	#23,	30(r12)	;#0x0017, 0x001e
    bd8c:	1e 00 
    bd8e:	b0 12 60 ca 	call	#51808		;#0xca60
    bd92:	0e 3c       	jmp	$+30     	;abs 0xbdb0
    bd94:	5c 42 08 45 	mov.b	&0x4508,r12	;0x4508
    bd98:	4c 93       	cmp.b	#0,	r12	;r3 As==00
    bd9a:	0a 20       	jnz	$+22     	;abs 0xbdb0
    bd9c:	00 3c       	jmp	$+2      	;abs 0xbd9e
    bd9e:	1c 42 b6 5f 	mov	&0x5fb6,r12	;0x5fb6
    bda2:	2c 4c       	mov	@r12,	r12	;
    bda4:	bc 40 18 00 	mov	#24,	30(r12)	;#0x0018, 0x001e
    bda8:	1e 00 
    bdaa:	b0 12 60 ca 	call	#51808		;#0xca60
    bdae:	00 3c       	jmp	$+2      	;abs 0xbdb0
    bdb0:	1c 42 9a 5f 	mov	&0x5f9a,r12	;0x5f9a
    bdb4:	1f 4c 00 0c 	mov	3072(r12),r15	;0x00c00
    bdb8:	3d 40 06 00 	mov	#6,	r13	;
    bdbc:	0e 4d       	mov	r13,	r14	;
    bdbe:	84 4c 88 ff 	mov	r12,	-120(r4); 0xff88
    bdc2:	84 4d 86 ff 	mov	r13,	-122(r4); 0xff86
    bdc6:	b0 12 00 ce 	call	#52736		;#0xce00
    bdca:	1c 44 88 ff 	mov	-120(r4),r12	;0xffffff88
    bdce:	0c 5f       	add	r15,	r12	;
    bdd0:	84 4c fc ff 	mov	r12,	-4(r4)	; 0xfffc
    bdd4:	1d 42 96 5f 	mov	&0x5f96,r13	;0x5f96
    bdd8:	2e 43       	mov	#2,	r14	;r3 As==10
    bdda:	0f 4c       	mov	r12,	r15	;
    bddc:	84 4e 84 ff 	mov	r14,	-124(r4); 0xff84
    bde0:	84 4c 82 ff 	mov	r12,	-126(r4); 0xff82
    bde4:	84 4d 80 ff 	mov	r13,	-128(r4); 0xff80
    bde8:	b0 12 14 cd 	call	#52500		;#0xcd14
    bdec:	1c 44 82 ff 	mov	-126(r4),r12	;0xffffff82
    bdf0:	1d 44 80 ff 	mov	-128(r4),r13	;0xffffff80
    bdf4:	8c 4d 00 00 	mov	r13,	0(r12)	;
    bdf8:	1d 44 fc ff 	mov	-4(r4),	r13	;
    bdfc:	0e 4d       	mov	r13,	r14	;
    bdfe:	2e 53       	incd	r14		;
    be00:	0f 4e       	mov	r14,	r15	;
    be02:	1e 44 84 ff 	mov	-124(r4),r14	;0xffffff84
    be06:	84 4d 7e ff 	mov	r13,	-130(r4); 0xff7e
    be0a:	b0 12 14 cd 	call	#52500		;#0xcd14
    be0e:	1c 44 7e ff 	mov	-130(r4),r12	;0xffffff7e
    be12:	8c 43 02 00 	mov	#0,	2(r12)	;r3 As==00
    be16:	1d 44 fc ff 	mov	-4(r4),	r13	;
    be1a:	0e 4d       	mov	r13,	r14	;
    be1c:	2e 52       	add	#4,	r14	;r2 As==10
    be1e:	0f 4e       	mov	r14,	r15	;
    be20:	1e 44 84 ff 	mov	-124(r4),r14	;0xffffff84
    be24:	84 4d 7c ff 	mov	r13,	-132(r4); 0xff7c
    be28:	b0 12 14 cd 	call	#52500		;#0xcd14
    be2c:	1c 44 7c ff 	mov	-132(r4),r12	;0xffffff7c
    be30:	8c 43 04 00 	mov	#0,	4(r12)	;r3 As==00
    be34:	1d 42 9a 5f 	mov	&0x5f9a,r13	;0x5f9a
    be38:	0e 4d       	mov	r13,	r14	;
    be3a:	3e 50 00 0c 	add	#3072,	r14	;#0x0c00
    be3e:	1f 4d 00 0c 	mov	3072(r13),r15	;0x00c00
    be42:	0b 4f       	mov	r15,	r11	;
    be44:	1b 53       	inc	r11		;
    be46:	84 4f 7a ff 	mov	r15,	-134(r4); 0xff7a
    be4a:	0f 4e       	mov	r14,	r15	;
    be4c:	1e 44 84 ff 	mov	-124(r4),r14	;0xffffff84
    be50:	84 4d 78 ff 	mov	r13,	-136(r4); 0xff78
    be54:	84 4b 76 ff 	mov	r11,	-138(r4); 0xff76
    be58:	b0 12 14 cd 	call	#52500		;#0xcd14
    be5c:	1c 44 78 ff 	mov	-136(r4),r12	;0xffffff78
    be60:	1d 44 76 ff 	mov	-138(r4),r13	;0xffffff76
    be64:	8c 4d 00 0c 	mov	r13,	3072(r12); 0x0c00
    be68:	3f 40 9c 5f 	mov	#24476,	r15	;#0x5f9c
    be6c:	1e 44 84 ff 	mov	-124(r4),r14	;0xffffff84
    be70:	b0 12 14 cd 	call	#52500		;#0xcd14
    be74:	1c 44 7a ff 	mov	-134(r4),r12	;0xffffff7a
    be78:	82 4c 9c 5f 	mov	r12,	&0x5f9c	;
    be7c:	1f 42 98 5f 	mov	&0x5f98,r15	;0x5f98
    be80:	1d 42 9a 5f 	mov	&0x5f9a,r13	;0x5f9a
    be84:	1e 44 86 ff 	mov	-122(r4),r14	;0xffffff86
    be88:	84 4d 74 ff 	mov	r13,	-140(r4); 0xff74
    be8c:	b0 12 00 ce 	call	#52736		;#0xce00
    be90:	1c 44 74 ff 	mov	-140(r4),r12	;0xffffff74
    be94:	0c 5f       	add	r15,	r12	;
    be96:	1c 4c 04 00 	mov	4(r12),	r12	;
    be9a:	3f 40 9e 5f 	mov	#24478,	r15	;#0x5f9e
    be9e:	1e 44 84 ff 	mov	-124(r4),r14	;0xffffff84
    bea2:	84 4c 72 ff 	mov	r12,	-142(r4); 0xff72
    bea6:	b0 12 14 cd 	call	#52500		;#0xcd14
    beaa:	1c 44 72 ff 	mov	-142(r4),r12	;0xffffff72
    beae:	82 4c 9e 5f 	mov	r12,	&0x5f9e	;
    beb2:	0c 93       	cmp	#0,	r12	;r3 As==00
    beb4:	e1 24       	jz	$+452    	;abs 0xc078
    beb6:	00 3c       	jmp	$+2      	;abs 0xbeb8
    beb8:	5c 42 09 45 	mov.b	&0x4509,r12	;0x4509
    bebc:	4c 93       	cmp.b	#0,	r12	;r3 As==00
    bebe:	0a 20       	jnz	$+22     	;abs 0xbed4
    bec0:	00 3c       	jmp	$+2      	;abs 0xbec2
    bec2:	1c 42 b6 5f 	mov	&0x5fb6,r12	;0x5fb6
    bec6:	2c 4c       	mov	@r12,	r12	;
    bec8:	bc 40 19 00 	mov	#25,	30(r12)	;#0x0019, 0x001e
    becc:	1e 00 
    bece:	b0 12 60 ca 	call	#51808		;#0xca60
    bed2:	00 3c       	jmp	$+2      	;abs 0xbed4
    bed4:	1c 42 9e 5f 	mov	&0x5f9e,r12	;0x5f9e
    bed8:	3f 40 a0 5f 	mov	#24480,	r15	;#0x5fa0
    bedc:	2d 43       	mov	#2,	r13	;r3 As==10
    bede:	0e 4d       	mov	r13,	r14	;
    bee0:	84 4c 70 ff 	mov	r12,	-144(r4); 0xff70
    bee4:	84 4d 6e ff 	mov	r13,	-146(r4); 0xff6e
    bee8:	b0 12 14 cd 	call	#52500		;#0xcd14
    beec:	1c 44 70 ff 	mov	-144(r4),r12	;0xffffff70
    bef0:	82 4c a0 5f 	mov	r12,	&0x5fa0	;
    bef4:	1d 42 9a 5f 	mov	&0x5f9a,r13	;0x5f9a
    bef8:	3e 40 06 00 	mov	#6,	r14	;
    befc:	0f 4c       	mov	r12,	r15	;
    befe:	84 4d 6c ff 	mov	r13,	-148(r4); 0xff6c
    bf02:	b0 12 00 ce 	call	#52736		;#0xce00
    bf06:	1c 44 6c ff 	mov	-148(r4),r12	;0xffffff6c
    bf0a:	0c 5f       	add	r15,	r12	;
    bf0c:	3f 40 a2 5f 	mov	#24482,	r15	;#0x5fa2
    bf10:	1e 44 6e ff 	mov	-146(r4),r14	;0xffffff6e
    bf14:	84 4c 6a ff 	mov	r12,	-150(r4); 0xff6a
    bf18:	b0 12 14 cd 	call	#52500		;#0xcd14
    bf1c:	1c 44 6a ff 	mov	-150(r4),r12	;0xffffff6a
    bf20:	82 4c a2 5f 	mov	r12,	&0x5fa2	;
    bf24:	00 3c       	jmp	$+2      	;abs 0xbf26
    bf26:	5c 42 0b 45 	mov.b	&0x450b,r12	;0x450b
    bf2a:	4c 93       	cmp.b	#0,	r12	;r3 As==00
    bf2c:	18 20       	jnz	$+50     	;abs 0xbf5e
    bf2e:	00 3c       	jmp	$+2      	;abs 0xbf30
    bf30:	1c 42 b6 5f 	mov	&0x5fb6,r12	;0x5fb6
    bf34:	2c 4c       	mov	@r12,	r12	;
    bf36:	bc 40 1b 00 	mov	#27,	30(r12)	;#0x001b, 0x001e
    bf3a:	1e 00 
    bf3c:	b0 12 60 ca 	call	#51808		;#0xca60
    bf40:	0e 3c       	jmp	$+30     	;abs 0xbf5e
    bf42:	5c 42 0e 45 	mov.b	&0x450e,r12	;0x450e
    bf46:	4c 93       	cmp.b	#0,	r12	;r3 As==00
    bf48:	0a 20       	jnz	$+22     	;abs 0xbf5e
    bf4a:	00 3c       	jmp	$+2      	;abs 0xbf4c
    bf4c:	1c 42 b6 5f 	mov	&0x5fb6,r12	;0x5fb6
    bf50:	2c 4c       	mov	@r12,	r12	;
    bf52:	bc 40 1e 00 	mov	#30,	30(r12)	;#0x001e, 0x001e
    bf56:	1e 00 
    bf58:	b0 12 60 ca 	call	#51808		;#0xca60
    bf5c:	00 3c       	jmp	$+2      	;abs 0xbf5e
    bf5e:	1c 42 a2 5f 	mov	&0x5fa2,r12	;0x5fa2
    bf62:	1c 4c 02 00 	mov	2(r12),	r12	;
    bf66:	0c 93       	cmp	#0,	r12	;r3 As==00
    bf68:	4c 24       	jz	$+154    	;abs 0xc002
    bf6a:	00 3c       	jmp	$+2      	;abs 0xbf6c
    bf6c:	5c 42 0c 45 	mov.b	&0x450c,r12	;0x450c
    bf70:	4c 93       	cmp.b	#0,	r12	;r3 As==00
    bf72:	0a 20       	jnz	$+22     	;abs 0xbf88
    bf74:	00 3c       	jmp	$+2      	;abs 0xbf76
    bf76:	1c 42 b6 5f 	mov	&0x5fb6,r12	;0x5fb6
    bf7a:	2c 4c       	mov	@r12,	r12	;
    bf7c:	bc 40 1c 00 	mov	#28,	30(r12)	;#0x001c, 0x001e
    bf80:	1e 00 
    bf82:	b0 12 60 ca 	call	#51808		;#0xca60
    bf86:	00 3c       	jmp	$+2      	;abs 0xbf88
    bf88:	3f 40 fc 5e 	mov	#24316,	r15	;#0x5efc
    bf8c:	2c 43       	mov	#2,	r12	;r3 As==10
    bf8e:	0e 4c       	mov	r12,	r14	;
    bf90:	84 4c 68 ff 	mov	r12,	-152(r4); 0xff68
    bf94:	b0 12 14 cd 	call	#52500		;#0xcd14
    bf98:	b2 42 fc 5e 	mov	#8,	&0x5efc	;r2 As==11
    bf9c:	3f 40 a2 5f 	mov	#24482,	r15	;#0x5fa2
    bfa0:	1c 42 a2 5f 	mov	&0x5fa2,r12	;0x5fa2
    bfa4:	1c 4c 02 00 	mov	2(r12),	r12	;
    bfa8:	3e 40 a0 5f 	mov	#24480,	r14	;#0x5fa0
    bfac:	84 4f 66 ff 	mov	r15,	-154(r4); 0xff66
    bfb0:	0f 4e       	mov	r14,	r15	;
    bfb2:	1e 44 68 ff 	mov	-152(r4),r14	;0xffffff68
    bfb6:	84 4c 64 ff 	mov	r12,	-156(r4); 0xff64
    bfba:	b0 12 14 cd 	call	#52500		;#0xcd14
    bfbe:	1c 44 64 ff 	mov	-156(r4),r12	;0xffffff64
    bfc2:	82 4c a0 5f 	mov	r12,	&0x5fa0	;
    bfc6:	1e 42 9a 5f 	mov	&0x5f9a,r14	;0x5f9a
    bfca:	3f 40 06 00 	mov	#6,	r15	;
    bfce:	84 4f 62 ff 	mov	r15,	-158(r4); 0xff62
    bfd2:	0f 4c       	mov	r12,	r15	;
    bfd4:	1d 44 62 ff 	mov	-158(r4),r13	;0xffffff62
    bfd8:	84 4e 60 ff 	mov	r14,	-160(r4); 0xff60
    bfdc:	0e 4d       	mov	r13,	r14	;
    bfde:	b0 12 00 ce 	call	#52736		;#0xce00
    bfe2:	1c 44 60 ff 	mov	-160(r4),r12	;0xffffff60
    bfe6:	0c 5f       	add	r15,	r12	;
    bfe8:	1f 44 66 ff 	mov	-154(r4),r15	;0xffffff66
    bfec:	1e 44 68 ff 	mov	-152(r4),r14	;0xffffff68
    bff0:	84 4c 5e ff 	mov	r12,	-162(r4); 0xff5e
    bff4:	b0 12 14 cd 	call	#52500		;#0xcd14
    bff8:	1c 44 5e ff 	mov	-162(r4),r12	;0xffffff5e
    bffc:	82 4c a2 5f 	mov	r12,	&0x5fa2	;
    c000:	a0 3f       	jmp	$-190    	;abs 0xbf42
    c002:	5c 42 0d 45 	mov.b	&0x450d,r12	;0x450d
    c006:	4c 93       	cmp.b	#0,	r12	;r3 As==00
    c008:	0a 20       	jnz	$+22     	;abs 0xc01e
    c00a:	00 3c       	jmp	$+2      	;abs 0xc00c
    c00c:	1c 42 b6 5f 	mov	&0x5fb6,r12	;0x5fb6
    c010:	2c 4c       	mov	@r12,	r12	;
    c012:	bc 40 1d 00 	mov	#29,	30(r12)	;#0x001d, 0x001e
    c016:	1e 00 
    c018:	b0 12 60 ca 	call	#51808		;#0xca60
    c01c:	00 3c       	jmp	$+2      	;abs 0xc01e
    c01e:	3f 40 fc 5e 	mov	#24316,	r15	;#0x5efc
    c022:	2c 43       	mov	#2,	r12	;r3 As==10
    c024:	0e 4c       	mov	r12,	r14	;
    c026:	84 4c 5c ff 	mov	r12,	-164(r4); 0xff5c
    c02a:	b0 12 14 cd 	call	#52500		;#0xcd14
    c02e:	b2 40 09 00 	mov	#9,	&0x5efc	;
    c032:	fc 5e 
    c034:	1c 42 9c 5f 	mov	&0x5f9c,r12	;0x5f9c
    c038:	1f 42 a0 5f 	mov	&0x5fa0,r15	;0x5fa0
    c03c:	1e 42 9a 5f 	mov	&0x5f9a,r14	;0x5f9a
    c040:	3d 40 06 00 	mov	#6,	r13	;
    c044:	84 4e 5a ff 	mov	r14,	-166(r4); 0xff5a
    c048:	0e 4d       	mov	r13,	r14	;
    c04a:	84 4c 58 ff 	mov	r12,	-168(r4); 0xff58
    c04e:	b0 12 00 ce 	call	#52736		;#0xce00
    c052:	1c 44 5a ff 	mov	-166(r4),r12	;0xffffff5a
    c056:	0c 5f       	add	r15,	r12	;
    c058:	0d 4c       	mov	r12,	r13	;
    c05a:	2d 53       	incd	r13		;
    c05c:	0f 4d       	mov	r13,	r15	;
    c05e:	1e 44 5c ff 	mov	-164(r4),r14	;0xffffff5c
    c062:	84 4c 56 ff 	mov	r12,	-170(r4); 0xff56
    c066:	b0 12 14 cd 	call	#52500		;#0xcd14
    c06a:	1c 44 56 ff 	mov	-170(r4),r12	;0xffffff56
    c06e:	1d 44 58 ff 	mov	-168(r4),r13	;0xffffff58
    c072:	8c 4d 02 00 	mov	r13,	2(r12)	;
    c076:	3b 3c       	jmp	$+120    	;abs 0xc0ee
    c078:	5c 42 0a 45 	mov.b	&0x450a,r12	;0x450a
    c07c:	4c 93       	cmp.b	#0,	r12	;r3 As==00
    c07e:	0a 20       	jnz	$+22     	;abs 0xc094
    c080:	00 3c       	jmp	$+2      	;abs 0xc082
    c082:	1c 42 b6 5f 	mov	&0x5fb6,r12	;0x5fb6
    c086:	2c 4c       	mov	@r12,	r12	;
    c088:	bc 40 1a 00 	mov	#26,	30(r12)	;#0x001a, 0x001e
    c08c:	1e 00 
    c08e:	b0 12 60 ca 	call	#51808		;#0xca60
    c092:	00 3c       	jmp	$+2      	;abs 0xc094
    c094:	3f 40 fc 5e 	mov	#24316,	r15	;#0x5efc
    c098:	2c 43       	mov	#2,	r12	;r3 As==10
    c09a:	0e 4c       	mov	r12,	r14	;
    c09c:	84 4c 54 ff 	mov	r12,	-172(r4); 0xff54
    c0a0:	b0 12 14 cd 	call	#52500		;#0xcd14
    c0a4:	b2 40 0a 00 	mov	#10,	&0x5efc	;#0x000a
    c0a8:	fc 5e 
    c0aa:	1c 42 9c 5f 	mov	&0x5f9c,r12	;0x5f9c
    c0ae:	1f 42 98 5f 	mov	&0x5f98,r15	;0x5f98
    c0b2:	1e 42 9a 5f 	mov	&0x5f9a,r14	;0x5f9a
    c0b6:	3d 40 06 00 	mov	#6,	r13	;
    c0ba:	84 4e 52 ff 	mov	r14,	-174(r4); 0xff52
    c0be:	0e 4d       	mov	r13,	r14	;
    c0c0:	84 4c 50 ff 	mov	r12,	-176(r4); 0xff50
    c0c4:	b0 12 00 ce 	call	#52736		;#0xce00
    c0c8:	1c 44 52 ff 	mov	-174(r4),r12	;0xffffff52
    c0cc:	0c 5f       	add	r15,	r12	;
    c0ce:	0d 4c       	mov	r12,	r13	;
    c0d0:	2d 52       	add	#4,	r13	;r2 As==10
    c0d2:	0f 4d       	mov	r13,	r15	;
    c0d4:	1e 44 54 ff 	mov	-172(r4),r14	;0xffffff54
    c0d8:	84 4c 4e ff 	mov	r12,	-178(r4); 0xff4e
    c0dc:	b0 12 14 cd 	call	#52500		;#0xcd14
    c0e0:	1c 44 4e ff 	mov	-178(r4),r12	;0xffffff4e
    c0e4:	1d 44 50 ff 	mov	-176(r4),r13	;0xffffff50
    c0e8:	8c 4d 04 00 	mov	r13,	4(r12)	;
    c0ec:	0e 3c       	jmp	$+30     	;abs 0xc10a
    c0ee:	5c 42 0f 45 	mov.b	&0x450f,r12	;0x450f
    c0f2:	4c 93       	cmp.b	#0,	r12	;r3 As==00
    c0f4:	18 20       	jnz	$+50     	;abs 0xc126
    c0f6:	00 3c       	jmp	$+2      	;abs 0xc0f8
    c0f8:	1c 42 b6 5f 	mov	&0x5fb6,r12	;0x5fb6
    c0fc:	2c 4c       	mov	@r12,	r12	;
    c0fe:	bc 40 1f 00 	mov	#31,	30(r12)	;#0x001f, 0x001e
    c102:	1e 00 
    c104:	b0 12 60 ca 	call	#51808		;#0xca60
    c108:	0e 3c       	jmp	$+30     	;abs 0xc126
    c10a:	5c 42 17 45 	mov.b	&0x4517,r12	;0x4517
    c10e:	4c 93       	cmp.b	#0,	r12	;r3 As==00
    c110:	0a 20       	jnz	$+22     	;abs 0xc126
    c112:	00 3c       	jmp	$+2      	;abs 0xc114
    c114:	1c 42 b6 5f 	mov	&0x5fb6,r12	;0x5fb6
    c118:	2c 4c       	mov	@r12,	r12	;
    c11a:	bc 40 27 00 	mov	#39,	30(r12)	;#0x0027, 0x001e
    c11e:	1e 00 
    c120:	b0 12 60 ca 	call	#51808		;#0xca60
    c124:	00 3c       	jmp	$+2      	;abs 0xc126
    c126:	1c 42 84 5f 	mov	&0x5f84,r12	;0x5f84
    c12a:	3c 90 40 00 	cmp	#64,	r12	;#0x0040
    c12e:	75 20       	jnz	$+236    	;abs 0xc21a
    c130:	00 3c       	jmp	$+2      	;abs 0xc132
    c132:	5c 42 10 45 	mov.b	&0x4510,r12	;0x4510
    c136:	4c 93       	cmp.b	#0,	r12	;r3 As==00
    c138:	0a 20       	jnz	$+22     	;abs 0xc14e
    c13a:	00 3c       	jmp	$+2      	;abs 0xc13c
    c13c:	1c 42 b6 5f 	mov	&0x5fb6,r12	;0x5fb6
    c140:	2c 4c       	mov	@r12,	r12	;
    c142:	bc 40 20 00 	mov	#32,	30(r12)	;#0x0020, 0x001e
    c146:	1e 00 
    c148:	b0 12 60 ca 	call	#51808		;#0xca60
    c14c:	00 3c       	jmp	$+2      	;abs 0xc14e
    c14e:	b4 40 04 5f 	mov	#24324,	-6(r4)	;#0x5f04, 0xfffa
    c152:	fa ff 
    c154:	1c 42 86 5f 	mov	&0x5f86,r12	;0x5f86
    c158:	1d 42 84 5f 	mov	&0x5f84,r13	;0x5f84
    c15c:	0e 41       	mov	r1,	r14	;
    c15e:	8e 4d 04 00 	mov	r13,	4(r14)	;
    c162:	8e 4c 02 00 	mov	r12,	2(r14)	;
    c166:	be 40 4c 44 	mov	#17484,	0(r14)	;#0x444c
    c16a:	00 00 
    c16c:	b0 12 be ce 	call	#52926		;#0xcebe
    c170:	1c 44 fa ff 	mov	-6(r4),	r12	;
    c174:	1c 4c 82 00 	mov	130(r12),r12	;0x00082
    c178:	3c 90 61 01 	cmp	#353,	r12	;#0x0161
    c17c:	84 4f 4c ff 	mov	r15,	-180(r4); 0xff4c
    c180:	12 24       	jz	$+38     	;abs 0xc1a6
    c182:	00 3c       	jmp	$+2      	;abs 0xc184
    c184:	5c 42 12 45 	mov.b	&0x4512,r12	;0x4512
    c188:	4c 93       	cmp.b	#0,	r12	;r3 As==00
    c18a:	0a 20       	jnz	$+22     	;abs 0xc1a0
    c18c:	00 3c       	jmp	$+2      	;abs 0xc18e
    c18e:	1c 42 b6 5f 	mov	&0x5fb6,r12	;0x5fb6
    c192:	2c 4c       	mov	@r12,	r12	;
    c194:	bc 40 22 00 	mov	#34,	30(r12)	;#0x0022, 0x001e
    c198:	1e 00 
    c19a:	b0 12 60 ca 	call	#51808		;#0xca60
    c19e:	00 3c       	jmp	$+2      	;abs 0xc1a0
    c1a0:	0f 43       	clr	r15		;
    c1a2:	b0 12 ce d2 	call	#53966		;#0xd2ce
    c1a6:	5c 42 13 45 	mov.b	&0x4513,r12	;0x4513
    c1aa:	4c 93       	cmp.b	#0,	r12	;r3 As==00
    c1ac:	0a 20       	jnz	$+22     	;abs 0xc1c2
    c1ae:	00 3c       	jmp	$+2      	;abs 0xc1b0
    c1b0:	1c 42 b6 5f 	mov	&0x5fb6,r12	;0x5fb6
    c1b4:	2c 4c       	mov	@r12,	r12	;
    c1b6:	bc 40 23 00 	mov	#35,	30(r12)	;#0x0023, 0x001e
    c1ba:	1e 00 
    c1bc:	b0 12 60 ca 	call	#51808		;#0xca60
    c1c0:	00 3c       	jmp	$+2      	;abs 0xc1c2
    c1c2:	3c 40 80 00 	mov	#128,	r12	;#0x0080
    c1c6:	3c 50 04 5f 	add	#24324,	r12	;#0x5f04
    c1ca:	2d 43       	mov	#2,	r13	;r3 As==10
    c1cc:	0f 4c       	mov	r12,	r15	;
    c1ce:	0e 4d       	mov	r13,	r14	;
    c1d0:	84 4d 4a ff 	mov	r13,	-182(r4); 0xff4a
    c1d4:	b0 12 14 cd 	call	#52500		;#0xcd14
    c1d8:	82 43 84 5f 	mov	#0,	&0x5f84	;r3 As==00
    c1dc:	3c 40 82 00 	mov	#130,	r12	;#0x0082
    c1e0:	3c 50 04 5f 	add	#24324,	r12	;#0x5f04
    c1e4:	0f 4c       	mov	r12,	r15	;
    c1e6:	1e 44 4a ff 	mov	-182(r4),r14	;0xffffff4a
    c1ea:	b0 12 14 cd 	call	#52500		;#0xcd14
    c1ee:	82 43 86 5f 	mov	#0,	&0x5f86	;r3 As==00
    c1f2:	1c 42 b6 5f 	mov	&0x5fb6,r12	;0x5fb6
    c1f6:	2c 4c       	mov	@r12,	r12	;
    c1f8:	1c 4c 1e 00 	mov	30(r12),r12	;0x0001e
    c1fc:	0d 41       	mov	r1,	r13	;
    c1fe:	8d 4c 02 00 	mov	r12,	2(r13)	;
    c202:	bd 40 88 44 	mov	#17544,	0(r13)	;#0x4488
    c206:	00 00 
    c208:	b0 12 be ce 	call	#52926		;#0xcebe
    c20c:	84 4f 48 ff 	mov	r15,	-184(r4); 0xff48
    c210:	b0 12 f0 c8 	call	#51440		;#0xc8f0
    c214:	84 4f 46 ff 	mov	r15,	-186(r4); 0xff46
    c218:	10 3c       	jmp	$+34     	;abs 0xc23a
    c21a:	5c 42 11 45 	mov.b	&0x4511,r12	;0x4511
    c21e:	4c 93       	cmp.b	#0,	r12	;r3 As==00
    c220:	0a 20       	jnz	$+22     	;abs 0xc236
    c222:	00 3c       	jmp	$+2      	;abs 0xc224
    c224:	1c 42 b6 5f 	mov	&0x5fb6,r12	;0x5fb6
    c228:	2c 4c       	mov	@r12,	r12	;
    c22a:	bc 40 21 00 	mov	#33,	30(r12)	;#0x0021, 0x001e
    c22e:	1e 00 
    c230:	b0 12 60 ca 	call	#51808		;#0xca60
    c234:	00 3c       	jmp	$+2      	;abs 0xc236
    c236:	30 40 ac b6 	br	#0xb6ac		;
    c23a:	5c 42 14 45 	mov.b	&0x4514,r12	;0x4514
    c23e:	4c 93       	cmp.b	#0,	r12	;r3 As==00
    c240:	0a 20       	jnz	$+22     	;abs 0xc256
    c242:	00 3c       	jmp	$+2      	;abs 0xc244
    c244:	1c 42 b6 5f 	mov	&0x5fb6,r12	;0x5fb6
    c248:	2c 4c       	mov	@r12,	r12	;
    c24a:	bc 40 24 00 	mov	#36,	30(r12)	;#0x0024, 0x001e
    c24e:	1e 00 
    c250:	b0 12 60 ca 	call	#51808		;#0xca60
    c254:	00 3c       	jmp	$+2      	;abs 0xc256
    c256:	b0 12 20 c7 	call	#50976		;#0xc720
    c25a:	84 4f 44 ff 	mov	r15,	-188(r4); 0xff44
    c25e:	30 40 5a b4 	br	#0xb45a		;
	...

0000c264 <init_hw>:
    c264:	04 12       	push	r4		;
    c266:	04 41       	mov	r1,	r4	;
    c268:	b0 12 98 c2 	call	#49816		;#0xc298
    c26c:	1c 42 30 01 	mov	&0x0130,r12	;0x0130
    c270:	3c f0 fe ff 	and	#65534,	r12	;#0xfffe
    c274:	82 4c 30 01 	mov	r12,	&0x0130	;
    c278:	b0 12 28 c3 	call	#49960		;#0xc328
    c27c:	34 41       	pop	r4		;
    c27e:	30 41       	ret			

0000c280 <msp_watchdog_enable>:
    c280:	04 12       	push	r4		;
    c282:	04 41       	mov	r1,	r4	;
    c284:	4c 4f       	mov.b	r15,	r12	;
    c286:	3f d0 08 5a 	bis	#23048,	r15	;#0x5a08
    c28a:	82 4f 5c 01 	mov	r15,	&0x015c	;
    c28e:	c2 4c 97 1c 	mov.b	r12,	&0x1c97	;
    c292:	34 41       	pop	r4		;
    c294:	30 41       	ret			
	...

0000c298 <msp_watchdog_disable>:
    c298:	04 12       	push	r4		;
    c29a:	04 41       	mov	r1,	r4	;
    c29c:	b2 40 80 5a 	mov	#23168,	&0x015c	;#0x5a80
    c2a0:	5c 01 
    c2a2:	34 41       	pop	r4		;
    c2a4:	30 41       	ret			
	...

0000c2a8 <msp_watchdog_kick>:
    c2a8:	04 12       	push	r4		;
    c2aa:	04 41       	mov	r1,	r4	;
    c2ac:	5c 42 97 1c 	mov.b	&0x1c97,r12	;0x1c97
    c2b0:	3c d0 08 5a 	bis	#23048,	r12	;#0x5a08
    c2b4:	82 4c 5c 01 	mov	r12,	&0x015c	;
    c2b8:	34 41       	pop	r4		;
    c2ba:	30 41       	ret			

0000c2bc <memcpy>:
    c2bc:	04 12       	push	r4		;
    c2be:	04 41       	mov	r1,	r4	;
    c2c0:	31 82       	sub	#8,	r1	;r2 As==11
    c2c2:	0c 4d       	mov	r13,	r12	;
    c2c4:	0d 93       	cmp	#0,	r13	;r3 As==00
    c2c6:	84 4f fe ff 	mov	r15,	-2(r4)	; 0xfffe
    c2ca:	84 4c fc ff 	mov	r12,	-4(r4)	; 0xfffc
    c2ce:	84 4e fa ff 	mov	r14,	-6(r4)	; 0xfffa
    c2d2:	19 24       	jz	$+52     	;abs 0xc306
    c2d4:	00 3c       	jmp	$+2      	;abs 0xc2d6
    c2d6:	0c 43       	clr	r12		;
    c2d8:	84 4c f8 ff 	mov	r12,	-8(r4)	; 0xfff8
    c2dc:	00 3c       	jmp	$+2      	;abs 0xc2de
    c2de:	1c 44 f8 ff 	mov	-8(r4),	r12	;
    c2e2:	1d 44 fa ff 	mov	-6(r4),	r13	;
    c2e6:	0d 5c       	add	r12,	r13	;
    c2e8:	6e 4d       	mov.b	@r13,	r14	;
    c2ea:	1d 44 fe ff 	mov	-2(r4),	r13	;
    c2ee:	0d 5c       	add	r12,	r13	;
    c2f0:	cd 4e 00 00 	mov.b	r14,	0(r13)	;
    c2f4:	1c 53       	inc	r12		;
    c2f6:	1d 44 fc ff 	mov	-4(r4),	r13	;
    c2fa:	0c 9d       	cmp	r13,	r12	;
    c2fc:	84 4c f8 ff 	mov	r12,	-8(r4)	; 0xfff8
    c300:	ee 23       	jnz	$-34     	;abs 0xc2de
    c302:	00 3c       	jmp	$+2      	;abs 0xc304
    c304:	00 3c       	jmp	$+2      	;abs 0xc306
    c306:	1f 44 fe ff 	mov	-2(r4),	r15	;
    c30a:	31 52       	add	#8,	r1	;r2 As==11
    c30c:	34 41       	pop	r4		;
    c30e:	30 41       	ret			

0000c310 <my_memset>:
    c310:	04 12       	push	r4		;
    c312:	04 41       	mov	r1,	r4	;
    c314:	0c 4f       	mov	r15,	r12	;
    c316:	0d 5f       	add	r15,	r13	;
    c318:	0c 9d       	cmp	r13,	r12	;
    c31a:	04 24       	jz	$+10     	;abs 0xc324
    c31c:	cc 4e 00 00 	mov.b	r14,	0(r12)	;
    c320:	1c 53       	inc	r12		;
    c322:	fa 3f       	jmp	$-10     	;abs 0xc318
    c324:	34 41       	pop	r4		;
    c326:	30 41       	ret			

0000c328 <msp_clock_setup>:
    c328:	04 12       	push	r4		;
    c32a:	04 41       	mov	r1,	r4	;
    c32c:	f2 40 a5 ff 	mov.b	#65445,	&0x0161	;#0xffa5
    c330:	61 01 
    c332:	b2 40 46 00 	mov	#70,	&0x0162	;#0x0046
    c336:	62 01 
    c338:	b2 40 33 00 	mov	#51,	&0x0164	;#0x0033
    c33c:	64 01 
    c33e:	82 43 66 01 	mov	#0,	&0x0166	;r3 As==00
    c342:	34 41       	pop	r4		;
    c344:	30 41       	ret			
	...

0000c348 <mult16>:
    c348:	82 4f c0 04 	mov	r15,	&0x04c0	;
    c34c:	82 4e c8 04 	mov	r14,	&0x04c8	;
    c350:	1e 42 ca 04 	mov	&0x04ca,r14	;0x04ca
    c354:	1f 42 cc 04 	mov	&0x04cc,r15	;0x04cc
    c358:	30 41       	ret			
	...

0000c35c <sqrt16>:
    c35c:	04 12       	push	r4		;
    c35e:	04 41       	mov	r1,	r4	;
    c360:	0b 12       	push	r11		;
    c362:	31 80 1e 00 	sub	#30,	r1	;#0x001e
    c366:	0c 4f       	mov	r15,	r12	;
    c368:	0d 4e       	mov	r14,	r13	;
    c36a:	84 4f fa ff 	mov	r15,	-6(r4)	; 0xfffa
    c36e:	84 4e f8 ff 	mov	r14,	-8(r4)	; 0xfff8
    c372:	b4 43 f6 ff 	mov	#-1,	-10(r4)	;r3 As==11, 0xfff6
    c376:	84 43 f4 ff 	mov	#0,	-12(r4)	;r3 As==00, 0xfff4
    c37a:	1e 44 f6 ff 	mov	-10(r4),r14	;0xfffffff6
    c37e:	12 c3       	clrc			
    c380:	0e 10       	rrc	r14		;
    c382:	84 4e f2 ff 	mov	r14,	-14(r4)	; 0xfff2
    c386:	84 43 ee ff 	mov	#0,	-18(r4)	;r3 As==00, 0xffee
    c38a:	84 43 ec ff 	mov	#0,	-20(r4)	;r3 As==00, 0xffec
    c38e:	84 4d ea ff 	mov	r13,	-22(r4)	; 0xffea
    c392:	84 4c e8 ff 	mov	r12,	-24(r4)	; 0xffe8
    c396:	00 3c       	jmp	$+2      	;abs 0xc398
    c398:	1c 44 ec ff 	mov	-20(r4),r12	;0xffffffec
    c39c:	1d 44 ee ff 	mov	-18(r4),r13	;0xffffffee
    c3a0:	1e 44 f8 ff 	mov	-8(r4),	r14	;
    c3a4:	1f 44 fa ff 	mov	-6(r4),	r15	;
    c3a8:	4b 43       	clr.b	r11		;
    c3aa:	0d ef       	xor	r15,	r13	;
    c3ac:	0c ee       	xor	r14,	r12	;
    c3ae:	0c dd       	bis	r13,	r12	;
    c3b0:	0c 93       	cmp	#0,	r12	;r3 As==00
    c3b2:	c4 4b e7 ff 	mov.b	r11,	-25(r4)	; 0xffe7
    c3b6:	0d 24       	jz	$+28     	;abs 0xc3d2
    c3b8:	00 3c       	jmp	$+2      	;abs 0xc3ba
    c3ba:	1c 44 f6 ff 	mov	-10(r4),r12	;0xfffffff6
    c3be:	1d 44 f4 ff 	mov	-12(r4),r13	;0xfffffff4
    c3c2:	0c 8d       	sub	r13,	r12	;
    c3c4:	2c 93       	cmp	#2,	r12	;r3 As==10
    c3c6:	0c 42       	mov	r2,	r12	;
    c3c8:	1c f3       	and	#1,	r12	;r3 As==01
    c3ca:	4e 4c       	mov.b	r12,	r14	;
    c3cc:	c4 4e e7 ff 	mov.b	r14,	-25(r4)	; 0xffe7
    c3d0:	00 3c       	jmp	$+2      	;abs 0xc3d2
    c3d2:	5c 44 e7 ff 	mov.b	-25(r4),r12	;0xffffffe7
    c3d6:	4d 4c       	mov.b	r12,	r13	;
    c3d8:	1d b3       	bit	#1,	r13	;r3 As==01
    c3da:	48 24       	jz	$+146    	;abs 0xc46c
    c3dc:	00 3c       	jmp	$+2      	;abs 0xc3de
    c3de:	1c 44 f6 ff 	mov	-10(r4),r12	;0xfffffff6
    c3e2:	1d 44 f4 ff 	mov	-12(r4),r13	;0xfffffff4
    c3e6:	0e 43       	clr	r14		;
    c3e8:	0c 5d       	add	r13,	r12	;
    c3ea:	0e 63       	adc	r14		;
    c3ec:	12 c3       	clrc			
    c3ee:	0c 10       	rrc	r12		;
    c3f0:	0e 5e       	rla	r14		;
    c3f2:	0e 5e       	rla	r14		;
    c3f4:	0e 5e       	rla	r14		;
    c3f6:	0e 5e       	rla	r14		;
    c3f8:	0e 5e       	rla	r14		;
    c3fa:	0e 5e       	rla	r14		;
    c3fc:	0e 5e       	rla	r14		;
    c3fe:	0e 5e       	rla	r14		;
    c400:	0e 5e       	rla	r14		;
    c402:	0e 5e       	rla	r14		;
    c404:	0e 5e       	rla	r14		;
    c406:	0e 5e       	rla	r14		;
    c408:	0e 5e       	rla	r14		;
    c40a:	0e 5e       	rla	r14		;
    c40c:	0e 5e       	rla	r14		;
    c40e:	0c de       	bis	r14,	r12	;
    c410:	84 4c f2 ff 	mov	r12,	-14(r4)	; 0xfff2
    c414:	0f 4c       	mov	r12,	r15	;
    c416:	0e 4c       	mov	r12,	r14	;
    c418:	b0 12 48 c3 	call	#49992		;#0xc348
    c41c:	84 4f ee ff 	mov	r15,	-18(r4)	; 0xffee
    c420:	84 4e ec ff 	mov	r14,	-20(r4)	; 0xffec
    c424:	1c 44 f8 ff 	mov	-8(r4),	r12	;
    c428:	1d 44 fa ff 	mov	-6(r4),	r13	;
    c42c:	0f 9d       	cmp	r13,	r15	;
    c42e:	0b 42       	mov	r2,	r11	;
    c430:	1b f3       	and	#1,	r11	;r3 As==01
    c432:	0e 9c       	cmp	r12,	r14	;
    c434:	0c 42       	mov	r2,	r12	;
    c436:	1c f3       	and	#1,	r12	;r3 As==01
    c438:	0f 9d       	cmp	r13,	r15	;
    c43a:	84 4b e4 ff 	mov	r11,	-28(r4)	; 0xffe4
    c43e:	84 4c e2 ff 	mov	r12,	-30(r4)	; 0xffe2
    c442:	04 24       	jz	$+10     	;abs 0xc44c
    c444:	1c 44 e4 ff 	mov	-28(r4),r12	;0xffffffe4
    c448:	84 4c e2 ff 	mov	r12,	-30(r4)	; 0xffe2
    c44c:	1c 44 e2 ff 	mov	-30(r4),r12	;0xffffffe2
    c450:	1c b3       	bit	#1,	r12	;r3 As==01
    c452:	06 20       	jnz	$+14     	;abs 0xc460
    c454:	00 3c       	jmp	$+2      	;abs 0xc456
    c456:	1c 44 f2 ff 	mov	-14(r4),r12	;0xfffffff2
    c45a:	84 4c f4 ff 	mov	r12,	-12(r4)	; 0xfff4
    c45e:	05 3c       	jmp	$+12     	;abs 0xc46a
    c460:	1c 44 f2 ff 	mov	-14(r4),r12	;0xfffffff2
    c464:	84 4c f6 ff 	mov	r12,	-10(r4)	; 0xfff6
    c468:	00 3c       	jmp	$+2      	;abs 0xc46a
    c46a:	96 3f       	jmp	$-210    	;abs 0xc398
    c46c:	1f 44 f2 ff 	mov	-14(r4),r15	;0xfffffff2
    c470:	31 50 1e 00 	add	#30,	r1	;#0x001e
    c474:	3b 41       	pop	r11		;
    c476:	34 41       	pop	r4		;
    c478:	30 41       	ret			
	...

0000c47c <udivmodhi4>:
    c47c:	04 12       	push	r4		;
    c47e:	04 41       	mov	r1,	r4	;
    c480:	0b 12       	push	r11		;
    c482:	0a 12       	push	r10		;
    c484:	31 80 14 00 	sub	#20,	r1	;#0x0014
    c488:	0c 4d       	mov	r13,	r12	;
    c48a:	0b 4e       	mov	r14,	r11	;
    c48c:	0a 4f       	mov	r15,	r10	;
    c48e:	84 4f f8 ff 	mov	r15,	-8(r4)	; 0xfff8
    c492:	84 4e f6 ff 	mov	r14,	-10(r4)	; 0xfff6
    c496:	84 4d f4 ff 	mov	r13,	-12(r4)	; 0xfff4
    c49a:	94 43 f2 ff 	mov	#1,	-14(r4)	;r3 As==01, 0xfff2
    c49e:	84 43 f0 ff 	mov	#0,	-16(r4)	;r3 As==00, 0xfff0
    c4a2:	84 4c ee ff 	mov	r12,	-18(r4)	; 0xffee
    c4a6:	84 4b ec ff 	mov	r11,	-20(r4)	; 0xffec
    c4aa:	84 4a ea ff 	mov	r10,	-22(r4)	; 0xffea
    c4ae:	00 3c       	jmp	$+2      	;abs 0xc4b0
    c4b0:	1c 44 f6 ff 	mov	-10(r4),r12	;0xfffffff6
    c4b4:	1d 44 f8 ff 	mov	-8(r4),	r13	;
    c4b8:	4e 43       	clr.b	r14		;
    c4ba:	0c 9d       	cmp	r13,	r12	;
    c4bc:	c4 4e e9 ff 	mov.b	r14,	-23(r4)	; 0xffe9
    c4c0:	14 2c       	jc	$+42     	;abs 0xc4ea
    c4c2:	00 3c       	jmp	$+2      	;abs 0xc4c4
    c4c4:	1c 44 f2 ff 	mov	-14(r4),r12	;0xfffffff2
    c4c8:	4d 43       	clr.b	r13		;
    c4ca:	0c 93       	cmp	#0,	r12	;r3 As==00
    c4cc:	c4 4d e9 ff 	mov.b	r13,	-23(r4)	; 0xffe9
    c4d0:	0c 24       	jz	$+26     	;abs 0xc4ea
    c4d2:	00 3c       	jmp	$+2      	;abs 0xc4d4
    c4d4:	5c 44 f7 ff 	mov.b	-9(r4),	r12	;
    c4d8:	7c b0 80 ff 	bit.b	#65408,	r12	;#0xff80
    c4dc:	0d 42       	mov	r2,	r13	;
    c4de:	0d 11       	rra	r13		;
    c4e0:	1d f3       	and	#1,	r13	;r3 As==01
    c4e2:	4c 4d       	mov.b	r13,	r12	;
    c4e4:	c4 4c e9 ff 	mov.b	r12,	-23(r4)	; 0xffe9
    c4e8:	00 3c       	jmp	$+2      	;abs 0xc4ea
    c4ea:	5c 44 e9 ff 	mov.b	-23(r4),r12	;0xffffffe9
    c4ee:	4d 4c       	mov.b	r12,	r13	;
    c4f0:	1d b3       	bit	#1,	r13	;r3 As==01
    c4f2:	0c 24       	jz	$+26     	;abs 0xc50c
    c4f4:	00 3c       	jmp	$+2      	;abs 0xc4f6
    c4f6:	1c 44 f6 ff 	mov	-10(r4),r12	;0xfffffff6
    c4fa:	0c 5c       	rla	r12		;
    c4fc:	84 4c f6 ff 	mov	r12,	-10(r4)	; 0xfff6
    c500:	1c 44 f2 ff 	mov	-14(r4),r12	;0xfffffff2
    c504:	0c 5c       	rla	r12		;
    c506:	84 4c f2 ff 	mov	r12,	-14(r4)	; 0xfff2
    c50a:	d2 3f       	jmp	$-90     	;abs 0xc4b0
    c50c:	00 3c       	jmp	$+2      	;abs 0xc50e
    c50e:	1c 44 f2 ff 	mov	-14(r4),r12	;0xfffffff2
    c512:	0c 93       	cmp	#0,	r12	;r3 As==00
    c514:	24 24       	jz	$+74     	;abs 0xc55e
    c516:	00 3c       	jmp	$+2      	;abs 0xc518
    c518:	1c 44 f8 ff 	mov	-8(r4),	r12	;
    c51c:	1d 44 f6 ff 	mov	-10(r4),r13	;0xfffffff6
    c520:	0c 9d       	cmp	r13,	r12	;
    c522:	10 28       	jnc	$+34     	;abs 0xc544
    c524:	00 3c       	jmp	$+2      	;abs 0xc526
    c526:	1c 44 f6 ff 	mov	-10(r4),r12	;0xfffffff6
    c52a:	1d 44 f8 ff 	mov	-8(r4),	r13	;
    c52e:	0d 8c       	sub	r12,	r13	;
    c530:	84 4d f8 ff 	mov	r13,	-8(r4)	; 0xfff8
    c534:	1c 44 f2 ff 	mov	-14(r4),r12	;0xfffffff2
    c538:	1d 44 f0 ff 	mov	-16(r4),r13	;0xfffffff0
    c53c:	0d dc       	bis	r12,	r13	;
    c53e:	84 4d f0 ff 	mov	r13,	-16(r4)	; 0xfff0
    c542:	00 3c       	jmp	$+2      	;abs 0xc544
    c544:	1c 44 f2 ff 	mov	-14(r4),r12	;0xfffffff2
    c548:	12 c3       	clrc			
    c54a:	0c 10       	rrc	r12		;
    c54c:	84 4c f2 ff 	mov	r12,	-14(r4)	; 0xfff2
    c550:	1c 44 f6 ff 	mov	-10(r4),r12	;0xfffffff6
    c554:	12 c3       	clrc			
    c556:	0c 10       	rrc	r12		;
    c558:	84 4c f6 ff 	mov	r12,	-10(r4)	; 0xfff6
    c55c:	d8 3f       	jmp	$-78     	;abs 0xc50e
    c55e:	1c 44 f4 ff 	mov	-12(r4),r12	;0xfffffff4
    c562:	0c 93       	cmp	#0,	r12	;r3 As==00
    c564:	06 24       	jz	$+14     	;abs 0xc572
    c566:	00 3c       	jmp	$+2      	;abs 0xc568
    c568:	1c 44 f8 ff 	mov	-8(r4),	r12	;
    c56c:	84 4c fa ff 	mov	r12,	-6(r4)	; 0xfffa
    c570:	05 3c       	jmp	$+12     	;abs 0xc57c
    c572:	1c 44 f0 ff 	mov	-16(r4),r12	;0xfffffff0
    c576:	84 4c fa ff 	mov	r12,	-6(r4)	; 0xfffa
    c57a:	00 3c       	jmp	$+2      	;abs 0xc57c
    c57c:	1f 44 fa ff 	mov	-6(r4),	r15	;
    c580:	31 50 14 00 	add	#20,	r1	;#0x0014
    c584:	3a 41       	pop	r10		;
    c586:	3b 41       	pop	r11		;
    c588:	34 41       	pop	r4		;
    c58a:	30 41       	ret			

0000c58c <__divhi3>:
    c58c:	04 12       	push	r4		;
    c58e:	04 41       	mov	r1,	r4	;
    c590:	31 80 0c 00 	sub	#12,	r1	;#0x000c
    c594:	0c 4e       	mov	r14,	r12	;
    c596:	0d 4f       	mov	r15,	r13	;
    c598:	84 4f fe ff 	mov	r15,	-2(r4)	; 0xfffe
    c59c:	84 4e fc ff 	mov	r14,	-4(r4)	; 0xfffc
    c5a0:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa
    c5a4:	1e 44 fe ff 	mov	-2(r4),	r14	;
    c5a8:	0e 93       	cmp	#0,	r14	;r3 As==00
    c5aa:	84 4c f6 ff 	mov	r12,	-10(r4)	; 0xfff6
    c5ae:	84 4d f4 ff 	mov	r13,	-12(r4)	; 0xfff4
    c5b2:	10 34       	jge	$+34     	;abs 0xc5d4
    c5b4:	00 3c       	jmp	$+2      	;abs 0xc5b6
    c5b6:	1c 44 fe ff 	mov	-2(r4),	r12	;
    c5ba:	0d 43       	clr	r13		;
    c5bc:	0d 8c       	sub	r12,	r13	;
    c5be:	84 4d fe ff 	mov	r13,	-2(r4)	; 0xfffe
    c5c2:	1c 44 fa ff 	mov	-6(r4),	r12	;
    c5c6:	0c 93       	cmp	#0,	r12	;r3 As==00
    c5c8:	0c 42       	mov	r2,	r12	;
    c5ca:	0c 11       	rra	r12		;
    c5cc:	1c f3       	and	#1,	r12	;r3 As==01
    c5ce:	84 4c fa ff 	mov	r12,	-6(r4)	; 0xfffa
    c5d2:	00 3c       	jmp	$+2      	;abs 0xc5d4
    c5d4:	1c 44 fc ff 	mov	-4(r4),	r12	;
    c5d8:	0c 93       	cmp	#0,	r12	;r3 As==00
    c5da:	10 34       	jge	$+34     	;abs 0xc5fc
    c5dc:	00 3c       	jmp	$+2      	;abs 0xc5de
    c5de:	1c 44 fc ff 	mov	-4(r4),	r12	;
    c5e2:	0d 43       	clr	r13		;
    c5e4:	0d 8c       	sub	r12,	r13	;
    c5e6:	84 4d fc ff 	mov	r13,	-4(r4)	; 0xfffc
    c5ea:	1c 44 fa ff 	mov	-6(r4),	r12	;
    c5ee:	0c 93       	cmp	#0,	r12	;r3 As==00
    c5f0:	0c 42       	mov	r2,	r12	;
    c5f2:	0c 11       	rra	r12		;
    c5f4:	1c f3       	and	#1,	r12	;r3 As==01
    c5f6:	84 4c fa ff 	mov	r12,	-6(r4)	; 0xfffa
    c5fa:	00 3c       	jmp	$+2      	;abs 0xc5fc
    c5fc:	1f 44 fe ff 	mov	-2(r4),	r15	;
    c600:	1e 44 fc ff 	mov	-4(r4),	r14	;
    c604:	0d 43       	clr	r13		;
    c606:	b0 12 7c c4 	call	#50300		;#0xc47c
    c60a:	84 4f f8 ff 	mov	r15,	-8(r4)	; 0xfff8
    c60e:	1d 44 fa ff 	mov	-6(r4),	r13	;
    c612:	0d 93       	cmp	#0,	r13	;r3 As==00
    c614:	08 24       	jz	$+18     	;abs 0xc626
    c616:	00 3c       	jmp	$+2      	;abs 0xc618
    c618:	1c 44 f8 ff 	mov	-8(r4),	r12	;
    c61c:	0d 43       	clr	r13		;
    c61e:	0d 8c       	sub	r12,	r13	;
    c620:	84 4d f8 ff 	mov	r13,	-8(r4)	; 0xfff8
    c624:	00 3c       	jmp	$+2      	;abs 0xc626
    c626:	1f 44 f8 ff 	mov	-8(r4),	r15	;
    c62a:	31 50 0c 00 	add	#12,	r1	;#0x000c
    c62e:	34 41       	pop	r4		;
    c630:	30 41       	ret			
	...

0000c634 <__modhi3>:
    c634:	04 12       	push	r4		;
    c636:	04 41       	mov	r1,	r4	;
    c638:	31 80 0c 00 	sub	#12,	r1	;#0x000c
    c63c:	0c 4e       	mov	r14,	r12	;
    c63e:	0d 4f       	mov	r15,	r13	;
    c640:	84 4f fe ff 	mov	r15,	-2(r4)	; 0xfffe
    c644:	84 4e fc ff 	mov	r14,	-4(r4)	; 0xfffc
    c648:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa
    c64c:	1e 44 fe ff 	mov	-2(r4),	r14	;
    c650:	0e 93       	cmp	#0,	r14	;r3 As==00
    c652:	84 4c f6 ff 	mov	r12,	-10(r4)	; 0xfff6
    c656:	84 4d f4 ff 	mov	r13,	-12(r4)	; 0xfff4
    c65a:	0a 34       	jge	$+22     	;abs 0xc670
    c65c:	00 3c       	jmp	$+2      	;abs 0xc65e
    c65e:	1c 44 fe ff 	mov	-2(r4),	r12	;
    c662:	0d 43       	clr	r13		;
    c664:	0d 8c       	sub	r12,	r13	;
    c666:	84 4d fe ff 	mov	r13,	-2(r4)	; 0xfffe
    c66a:	94 43 fa ff 	mov	#1,	-6(r4)	;r3 As==01, 0xfffa
    c66e:	00 3c       	jmp	$+2      	;abs 0xc670
    c670:	1c 44 fc ff 	mov	-4(r4),	r12	;
    c674:	0c 93       	cmp	#0,	r12	;r3 As==00
    c676:	08 34       	jge	$+18     	;abs 0xc688
    c678:	00 3c       	jmp	$+2      	;abs 0xc67a
    c67a:	1c 44 fc ff 	mov	-4(r4),	r12	;
    c67e:	0d 43       	clr	r13		;
    c680:	0d 8c       	sub	r12,	r13	;
    c682:	84 4d fc ff 	mov	r13,	-4(r4)	; 0xfffc
    c686:	00 3c       	jmp	$+2      	;abs 0xc688
    c688:	1f 44 fe ff 	mov	-2(r4),	r15	;
    c68c:	1e 44 fc ff 	mov	-4(r4),	r14	;
    c690:	1d 43       	mov	#1,	r13	;r3 As==01
    c692:	b0 12 7c c4 	call	#50300		;#0xc47c
    c696:	84 4f f8 ff 	mov	r15,	-8(r4)	; 0xfff8
    c69a:	1d 44 fa ff 	mov	-6(r4),	r13	;
    c69e:	0d 93       	cmp	#0,	r13	;r3 As==00
    c6a0:	08 24       	jz	$+18     	;abs 0xc6b2
    c6a2:	00 3c       	jmp	$+2      	;abs 0xc6a4
    c6a4:	1c 44 f8 ff 	mov	-8(r4),	r12	;
    c6a8:	0d 43       	clr	r13		;
    c6aa:	0d 8c       	sub	r12,	r13	;
    c6ac:	84 4d f8 ff 	mov	r13,	-8(r4)	; 0xfff8
    c6b0:	00 3c       	jmp	$+2      	;abs 0xc6b2
    c6b2:	1f 44 f8 ff 	mov	-8(r4),	r15	;
    c6b6:	31 50 0c 00 	add	#12,	r1	;#0x000c
    c6ba:	34 41       	pop	r4		;
    c6bc:	30 41       	ret			
	...

0000c6c0 <__udivhi3>:
    c6c0:	04 12       	push	r4		;
    c6c2:	04 41       	mov	r1,	r4	;
    c6c4:	0b 12       	push	r11		;
    c6c6:	31 82       	sub	#8,	r1	;r2 As==11
    c6c8:	0c 4e       	mov	r14,	r12	;
    c6ca:	0d 4f       	mov	r15,	r13	;
    c6cc:	84 4f fc ff 	mov	r15,	-4(r4)	; 0xfffc
    c6d0:	84 4e fa ff 	mov	r14,	-6(r4)	; 0xfffa
    c6d4:	1f 44 fc ff 	mov	-4(r4),	r15	;
    c6d8:	0b 43       	clr	r11		;
    c6da:	84 4d f8 ff 	mov	r13,	-8(r4)	; 0xfff8
    c6de:	0d 4b       	mov	r11,	r13	;
    c6e0:	84 4c f6 ff 	mov	r12,	-10(r4)	; 0xfff6
    c6e4:	b0 12 7c c4 	call	#50300		;#0xc47c
    c6e8:	31 52       	add	#8,	r1	;r2 As==11
    c6ea:	3b 41       	pop	r11		;
    c6ec:	34 41       	pop	r4		;
    c6ee:	30 41       	ret			

0000c6f0 <__umodhi3>:
    c6f0:	04 12       	push	r4		;
    c6f2:	04 41       	mov	r1,	r4	;
    c6f4:	0b 12       	push	r11		;
    c6f6:	31 82       	sub	#8,	r1	;r2 As==11
    c6f8:	0c 4e       	mov	r14,	r12	;
    c6fa:	0d 4f       	mov	r15,	r13	;
    c6fc:	84 4f fc ff 	mov	r15,	-4(r4)	; 0xfffc
    c700:	84 4e fa ff 	mov	r14,	-6(r4)	; 0xfffa
    c704:	1f 44 fc ff 	mov	-4(r4),	r15	;
    c708:	1b 43       	mov	#1,	r11	;r3 As==01
    c70a:	84 4d f8 ff 	mov	r13,	-8(r4)	; 0xfff8
    c70e:	0d 4b       	mov	r11,	r13	;
    c710:	84 4c f6 ff 	mov	r12,	-10(r4)	; 0xfff6
    c714:	b0 12 7c c4 	call	#50300		;#0xc47c
    c718:	31 52       	add	#8,	r1	;r2 As==11
    c71a:	3b 41       	pop	r11		;
    c71c:	34 41       	pop	r4		;
    c71e:	30 41       	ret			

0000c720 <end_run>:
    c720:	04 12       	push	r4		;
    c722:	04 41       	mov	r1,	r4	;
    c724:	92 43 00 7f 	mov	#1,	&0x7f00	;r3 As==01
    c728:	b0 12 30 c7 	call	#50992		;#0xc730
    c72c:	34 41       	pop	r4		;
    c72e:	30 41       	ret			

0000c730 <patch_checkpoints>:
    c730:	04 12       	push	r4		;
    c732:	04 41       	mov	r1,	r4	;
    c734:	21 83       	decd	r1		;
    c736:	00 3c       	jmp	$+2      	;abs 0xc738
    c738:	1c 42 fe 7e 	mov	&0x7efe,r12	;0x7efe
    c73c:	1d 42 04 1c 	mov	&0x1c04,r13	;0x1c04
    c740:	0c 9d       	cmp	r13,	r12	;
    c742:	54 2c       	jc	$+170    	;abs 0xc7ec
    c744:	00 3c       	jmp	$+2      	;abs 0xc746
    c746:	1f 42 fe 7e 	mov	&0x7efe,r15	;0x7efe
    c74a:	3e 40 06 00 	mov	#6,	r14	;
    c74e:	b0 12 00 ce 	call	#52736		;#0xce00
    c752:	1e 4f 24 45 	mov	17700(r15),r14	;0x04524
    c756:	0e 93       	cmp	#0,	r14	;r3 As==00
    c758:	42 24       	jz	$+134    	;abs 0xc7de
    c75a:	00 3c       	jmp	$+2      	;abs 0xc75c
    c75c:	1c 42 fe 7e 	mov	&0x7efe,r12	;0x7efe
    c760:	5d 4c f0 44 	mov.b	17648(r12),r13	;0x044f0
    c764:	5d 93       	cmp.b	#1,	r13	;r3 As==01
    c766:	20 20       	jnz	$+66     	;abs 0xc7a8
    c768:	00 3c       	jmp	$+2      	;abs 0xc76a
    c76a:	1f 42 fe 7e 	mov	&0x7efe,r15	;0x7efe
    c76e:	3c 40 06 00 	mov	#6,	r12	;
    c772:	0e 4c       	mov	r12,	r14	;
    c774:	84 4c fe ff 	mov	r12,	-2(r4)	; 0xfffe
    c778:	b0 12 00 ce 	call	#52736		;#0xce00
    c77c:	1c 4f 22 45 	mov	17698(r15),r12	;0x04522
    c780:	2c 4c       	mov	@r12,	r12	;
    c782:	8f 4c 20 45 	mov	r12,	17696(r15); 0x4520
    c786:	1f 42 fe 7e 	mov	&0x7efe,r15	;0x7efe
    c78a:	1e 44 fe ff 	mov	-2(r4),	r14	;
    c78e:	b0 12 00 ce 	call	#52736		;#0xce00
    c792:	1c 4f 24 45 	mov	17700(r15),r12	;0x04524
    c796:	1e 4f 22 45 	mov	17698(r15),r14	;0x04522
    c79a:	8e 4c 00 00 	mov	r12,	0(r14)	;
    c79e:	1c 42 fe 7e 	mov	&0x7efe,r12	;0x7efe
    c7a2:	ec 43 f0 44 	mov.b	#2,	17648(r12);r3 As==10, 0x44f0
    c7a6:	1a 3c       	jmp	$+54     	;abs 0xc7dc
    c7a8:	1c 42 fe 7e 	mov	&0x7efe,r12	;0x7efe
    c7ac:	5d 4c f0 44 	mov.b	17648(r12),r13	;0x044f0
    c7b0:	7d 90 03 00 	cmp.b	#3,	r13	;
    c7b4:	12 20       	jnz	$+38     	;abs 0xc7da
    c7b6:	00 3c       	jmp	$+2      	;abs 0xc7b8
    c7b8:	1f 42 fe 7e 	mov	&0x7efe,r15	;0x7efe
    c7bc:	3e 40 06 00 	mov	#6,	r14	;
    c7c0:	b0 12 00 ce 	call	#52736		;#0xce00
    c7c4:	1e 4f 20 45 	mov	17696(r15),r14	;0x04520
    c7c8:	1f 4f 22 45 	mov	17698(r15),r15	;0x04522
    c7cc:	8f 4e 00 00 	mov	r14,	0(r15)	;
    c7d0:	1e 42 fe 7e 	mov	&0x7efe,r14	;0x7efe
    c7d4:	ce 43 f0 44 	mov.b	#0,	17648(r14);r3 As==00, 0x44f0
    c7d8:	00 3c       	jmp	$+2      	;abs 0xc7da
    c7da:	00 3c       	jmp	$+2      	;abs 0xc7dc
    c7dc:	00 3c       	jmp	$+2      	;abs 0xc7de
    c7de:	00 3c       	jmp	$+2      	;abs 0xc7e0
    c7e0:	1c 42 fe 7e 	mov	&0x7efe,r12	;0x7efe
    c7e4:	1c 53       	inc	r12		;
    c7e6:	82 4c fe 7e 	mov	r12,	&0x7efe	;
    c7ea:	a6 3f       	jmp	$-178    	;abs 0xc738
    c7ec:	82 43 fe 7e 	mov	#0,	&0x7efe	;r3 As==00
    c7f0:	82 43 00 7f 	mov	#0,	&0x7f00	;r3 As==00
    c7f4:	21 53       	incd	r1		;
    c7f6:	34 41       	pop	r4		;
    c7f8:	30 41       	ret			
	...

0000c7fc <set_global_range>:
    c7fc:	04 12       	push	r4		;
    c7fe:	04 41       	mov	r1,	r4	;
    c800:	0b 12       	push	r11		;
    c802:	0a 12       	push	r10		;
    c804:	31 80 0c 00 	sub	#12,	r1	;#0x000c
    c808:	0c 4d       	mov	r13,	r12	;
    c80a:	0b 4e       	mov	r14,	r11	;
    c80c:	0a 4f       	mov	r15,	r10	;
    c80e:	84 4f fa ff 	mov	r15,	-6(r4)	; 0xfffa
    c812:	84 4e f8 ff 	mov	r14,	-8(r4)	; 0xfff8
    c816:	84 4d f6 ff 	mov	r13,	-10(r4)	; 0xfff6
    c81a:	1d 44 fa ff 	mov	-6(r4),	r13	;
    c81e:	82 4d 02 7f 	mov	r13,	&0x7f02	;
    c822:	1d 44 f8 ff 	mov	-8(r4),	r13	;
    c826:	82 4d 04 7f 	mov	r13,	&0x7f04	;
    c82a:	1d 44 fa ff 	mov	-6(r4),	r13	;
    c82e:	1e 44 f6 ff 	mov	-10(r4),r14	;0xfffffff6
    c832:	0d 8e       	sub	r14,	r13	;
    c834:	82 4d 06 7f 	mov	r13,	&0x7f06	;
    c838:	84 4c f4 ff 	mov	r12,	-12(r4)	; 0xfff4
    c83c:	84 4b f2 ff 	mov	r11,	-14(r4)	; 0xfff2
    c840:	84 4a f0 ff 	mov	r10,	-16(r4)	; 0xfff0
    c844:	31 50 0c 00 	add	#12,	r1	;#0x000c
    c848:	3a 41       	pop	r10		;
    c84a:	3b 41       	pop	r11		;
    c84c:	34 41       	pop	r4		;
    c84e:	30 41       	ret			

0000c850 <update_checkpoints_naive>:
    c850:	04 12       	push	r4		;
    c852:	04 41       	mov	r1,	r4	;
    c854:	21 83       	decd	r1		;
    c856:	84 43 fe ff 	mov	#0,	-2(r4)	;r3 As==00, 0xfffe
    c85a:	00 3c       	jmp	$+2      	;abs 0xc85c
    c85c:	1c 44 fe ff 	mov	-2(r4),	r12	;
    c860:	1d 42 04 1c 	mov	&0x1c04,r13	;0x1c04
    c864:	0c 9d       	cmp	r13,	r12	;
    c866:	1a 2c       	jc	$+54     	;abs 0xc89c
    c868:	00 3c       	jmp	$+2      	;abs 0xc86a
    c86a:	1c 44 fe ff 	mov	-2(r4),	r12	;
    c86e:	0c 5c       	rla	r12		;
    c870:	1c 4c 90 44 	mov	17552(r12),r12	;0x04490
    c874:	0c 93       	cmp	#0,	r12	;r3 As==00
    c876:	06 20       	jnz	$+14     	;abs 0xc884
    c878:	00 3c       	jmp	$+2      	;abs 0xc87a
    c87a:	1c 44 fe ff 	mov	-2(r4),	r12	;
    c87e:	dc 43 f0 44 	mov.b	#1,	17648(r12);r3 As==01, 0x44f0
    c882:	00 3c       	jmp	$+2      	;abs 0xc884
    c884:	1c 44 fe ff 	mov	-2(r4),	r12	;
    c888:	0c 5c       	rla	r12		;
    c88a:	8c 43 90 44 	mov	#0,	17552(r12);r3 As==00, 0x4490
    c88e:	00 3c       	jmp	$+2      	;abs 0xc890
    c890:	1c 44 fe ff 	mov	-2(r4),	r12	;
    c894:	1c 53       	inc	r12		;
    c896:	84 4c fe ff 	mov	r12,	-2(r4)	; 0xfffe
    c89a:	e0 3f       	jmp	$-62     	;abs 0xc85c
    c89c:	21 53       	incd	r1		;
    c89e:	34 41       	pop	r4		;
    c8a0:	30 41       	ret			
	...

0000c8a4 <update_checkpoints_hysteresis>:
    c8a4:	04 12       	push	r4		;
    c8a6:	04 41       	mov	r1,	r4	;
    c8a8:	21 83       	decd	r1		;
    c8aa:	84 43 fe ff 	mov	#0,	-2(r4)	;r3 As==00, 0xfffe
    c8ae:	00 3c       	jmp	$+2      	;abs 0xc8b0
    c8b0:	1c 44 fe ff 	mov	-2(r4),	r12	;
    c8b4:	1d 42 04 1c 	mov	&0x1c04,r13	;0x1c04
    c8b8:	0c 9d       	cmp	r13,	r12	;
    c8ba:	16 2c       	jc	$+46     	;abs 0xc8e8
    c8bc:	00 3c       	jmp	$+2      	;abs 0xc8be
    c8be:	1c 44 fe ff 	mov	-2(r4),	r12	;
    c8c2:	0c 5c       	rla	r12		;
    c8c4:	1c 4c 90 44 	mov	17552(r12),r12	;0x04490
    c8c8:	3c 90 06 00 	cmp	#6,	r12	;
    c8cc:	06 38       	jl	$+14     	;abs 0xc8da
    c8ce:	00 3c       	jmp	$+2      	;abs 0xc8d0
    c8d0:	1c 44 fe ff 	mov	-2(r4),	r12	;
    c8d4:	dc 43 f0 44 	mov.b	#1,	17648(r12);r3 As==01, 0x44f0
    c8d8:	00 3c       	jmp	$+2      	;abs 0xc8da
    c8da:	00 3c       	jmp	$+2      	;abs 0xc8dc
    c8dc:	1c 44 fe ff 	mov	-2(r4),	r12	;
    c8e0:	1c 53       	inc	r12		;
    c8e2:	84 4c fe ff 	mov	r12,	-2(r4)	; 0xfffe
    c8e6:	e4 3f       	jmp	$-54     	;abs 0xc8b0
    c8e8:	21 53       	incd	r1		;
    c8ea:	34 41       	pop	r4		;
    c8ec:	30 41       	ret			
	...

0000c8f0 <update_checkpoints_pair>:
    c8f0:	04 12       	push	r4		;
    c8f2:	04 41       	mov	r1,	r4	;
    c8f4:	21 83       	decd	r1		;
    c8f6:	84 43 fe ff 	mov	#0,	-2(r4)	;r3 As==00, 0xfffe
    c8fa:	00 3c       	jmp	$+2      	;abs 0xc8fc
    c8fc:	1c 44 fe ff 	mov	-2(r4),	r12	;
    c900:	1d 42 04 1c 	mov	&0x1c04,r13	;0x1c04
    c904:	0c 9d       	cmp	r13,	r12	;
    c906:	22 2c       	jc	$+70     	;abs 0xc94c
    c908:	00 3c       	jmp	$+2      	;abs 0xc90a
    c90a:	1c 44 fe ff 	mov	-2(r4),	r12	;
    c90e:	5d 4c f0 44 	mov.b	17648(r12),r13	;0x044f0
    c912:	4d 93       	cmp.b	#0,	r13	;r3 As==00
    c914:	14 20       	jnz	$+42     	;abs 0xc93e
    c916:	00 3c       	jmp	$+2      	;abs 0xc918
    c918:	1c 44 fe ff 	mov	-2(r4),	r12	;
    c91c:	0c 5c       	rla	r12		;
    c91e:	1c 4c 90 44 	mov	17552(r12),r12	;0x04490
    c922:	1c 93       	cmp	#1,	r12	;r3 As==01
    c924:	06 34       	jge	$+14     	;abs 0xc932
    c926:	00 3c       	jmp	$+2      	;abs 0xc928
    c928:	1c 44 fe ff 	mov	-2(r4),	r12	;
    c92c:	dc 43 f0 44 	mov.b	#1,	17648(r12);r3 As==01, 0x44f0
    c930:	00 3c       	jmp	$+2      	;abs 0xc932
    c932:	1c 44 fe ff 	mov	-2(r4),	r12	;
    c936:	0c 5c       	rla	r12		;
    c938:	8c 43 90 44 	mov	#0,	17552(r12);r3 As==00, 0x4490
    c93c:	00 3c       	jmp	$+2      	;abs 0xc93e
    c93e:	00 3c       	jmp	$+2      	;abs 0xc940
    c940:	1c 44 fe ff 	mov	-2(r4),	r12	;
    c944:	1c 53       	inc	r12		;
    c946:	84 4c fe ff 	mov	r12,	-2(r4)	; 0xfffe
    c94a:	d8 3f       	jmp	$-78     	;abs 0xc8fc
    c94c:	21 53       	incd	r1		;
    c94e:	34 41       	pop	r4		;
    c950:	30 41       	ret			
	...

0000c954 <update_hysteresis>:
    c954:	04 12       	push	r4		;
    c956:	04 41       	mov	r1,	r4	;
    c958:	21 82       	sub	#4,	r1	;r2 As==10
    c95a:	0c 4f       	mov	r15,	r12	;
    c95c:	84 4f fe ff 	mov	r15,	-2(r4)	; 0xfffe
    c960:	0f 5f       	rla	r15		;
    c962:	8f 43 90 44 	mov	#0,	17552(r15);r3 As==00, 0x4490
    c966:	84 4c fc ff 	mov	r12,	-4(r4)	; 0xfffc
    c96a:	21 52       	add	#4,	r1	;r2 As==10
    c96c:	34 41       	pop	r4		;
    c96e:	30 41       	ret			

0000c970 <make_table>:
    c970:	04 12       	push	r4		;
    c972:	04 41       	mov	r1,	r4	;
    c974:	21 82       	sub	#4,	r1	;r2 As==10
    c976:	0c 4f       	mov	r15,	r12	;
    c978:	84 4f fe ff 	mov	r15,	-2(r4)	; 0xfffe
    c97c:	84 4c fc ff 	mov	r12,	-4(r4)	; 0xfffc
    c980:	21 52       	add	#4,	r1	;r2 As==10
    c982:	34 41       	pop	r4		;
    c984:	30 41       	ret			
	...

0000c988 <clear_bitmask>:
    c988:	04 12       	push	r4		;
    c98a:	04 41       	mov	r1,	r4	;
    c98c:	21 83       	decd	r1		;
    c98e:	3f 40 ba 5f 	mov	#24506,	r15	;#0x5fba
    c992:	0e 43       	clr	r14		;
    c994:	3d 40 40 1f 	mov	#8000,	r13	;#0x1f40
    c998:	b0 12 10 c3 	call	#49936		;#0xc310
    c99c:	84 4f fe ff 	mov	r15,	-2(r4)	; 0xfffe
    c9a0:	21 53       	incd	r1		;
    c9a2:	34 41       	pop	r4		;
    c9a4:	30 41       	ret			
	...

0000c9a8 <restore>:
    c9a8:	04 12       	push	r4		;
    c9aa:	04 41       	mov	r1,	r4	;
    c9ac:	31 80 06 00 	sub	#6,	r1	;
    c9b0:	1c 42 fa 7e 	mov	&0x7efa,r12	;0x7efa
    c9b4:	1c 53       	inc	r12		;
    c9b6:	82 4c fa 7e 	mov	r12,	&0x7efa	;
    c9ba:	0c 93       	cmp	#0,	r12	;r3 As==00
    c9bc:	09 20       	jnz	$+20     	;abs 0xc9d0
    c9be:	00 3c       	jmp	$+2      	;abs 0xc9c0
    c9c0:	1c 42 fa 7e 	mov	&0x7efa,r12	;0x7efa
    c9c4:	1c 53       	inc	r12		;
    c9c6:	82 4c fa 7e 	mov	r12,	&0x7efa	;
    c9ca:	b0 12 88 c9 	call	#51592		;#0xc988
    c9ce:	00 3c       	jmp	$+2      	;abs 0xc9d0
    c9d0:	1c 42 00 7f 	mov	&0x7f00,r12	;0x7f00
    c9d4:	0c 93       	cmp	#0,	r12	;r3 As==00
    c9d6:	04 24       	jz	$+10     	;abs 0xc9e0
    c9d8:	00 3c       	jmp	$+2      	;abs 0xc9da
    c9da:	b0 12 30 c7 	call	#50992		;#0xc730
    c9de:	00 3c       	jmp	$+2      	;abs 0xc9e0
    c9e0:	00 3c       	jmp	$+2      	;abs 0xc9e2
    c9e2:	1c 42 b6 5f 	mov	&0x5fb6,r12	;0x5fb6
    c9e6:	1c 4c 02 00 	mov	2(r12),	r12	;
    c9ea:	0c 93       	cmp	#0,	r12	;r3 As==00
    c9ec:	27 24       	jz	$+80     	;abs 0xca3c
    c9ee:	00 3c       	jmp	$+2      	;abs 0xc9f0
    c9f0:	1c 42 b6 5f 	mov	&0x5fb6,r12	;0x5fb6
    c9f4:	1c 4c 02 00 	mov	2(r12),	r12	;
    c9f8:	0c 5c       	rla	r12		;
    c9fa:	1c 4c 06 7f 	mov	32518(r12),r12	;0x07f06
    c9fe:	84 4c fe ff 	mov	r12,	-2(r4)	; 0xfffe
    ca02:	1d 42 06 7f 	mov	&0x7f06,r13	;0x7f06
    ca06:	0c 8d       	sub	r13,	r12	;
    ca08:	84 4c fc ff 	mov	r12,	-4(r4)	; 0xfffc
    ca0c:	1c 42 b6 5f 	mov	&0x5fb6,r12	;0x5fb6
    ca10:	1c 4c 02 00 	mov	2(r12),	r12	;
    ca14:	0c 5c       	rla	r12		;
    ca16:	1c 4c 76 96 	mov	-27018(r12),r12	;0xffff9676
    ca1a:	84 4c fa ff 	mov	r12,	-6(r4)	; 0xfffa
    ca1e:	1f 44 fe ff 	mov	-2(r4),	r15	;
    ca22:	1e 44 fc ff 	mov	-4(r4),	r14	;
    ca26:	0d 4c       	mov	r12,	r13	;
    ca28:	b0 12 bc c2 	call	#49852		;#0xc2bc
    ca2c:	1c 42 b6 5f 	mov	&0x5fb6,r12	;0x5fb6
    ca30:	1d 4c 02 00 	mov	2(r12),	r13	;
    ca34:	3d 53       	add	#-1,	r13	;r3 As==11
    ca36:	8c 4d 02 00 	mov	r13,	2(r12)	;
    ca3a:	d3 3f       	jmp	$-88     	;abs 0xc9e2
    ca3c:	b0 12 8c cb 	call	#52108		;#0xcb8c
    ca40:	31 50 06 00 	add	#6,	r1	;
    ca44:	34 41       	pop	r4		;
    ca46:	30 41       	ret			

0000ca48 <return_pc>:
    ca48:	04 12       	push	r4		;
    ca4a:	04 41       	mov	r1,	r4	;
    ca4c:	21 83       	decd	r1		;
    ca4e:	94 41 02 00 	mov	2(r1),	-2(r4)	; 0xfffe
    ca52:	fe ff 
    ca54:	1f 44 fe ff 	mov	-2(r4),	r15	;
    ca58:	21 53       	incd	r1		;
    ca5a:	34 41       	pop	r4		;
    ca5c:	30 41       	ret			
	...

0000ca60 <checkpoint>:
    ca60:	04 12       	push	r4		;
    ca62:	04 41       	mov	r1,	r4	;
    ca64:	31 80 0c 00 	sub	#12,	r1	;#0x000c
    ca68:	0c 12       	push	r12		;
    ca6a:	1c 42 b6 5f 	mov	&0x5fb6,r12	;0x5fb6
    ca6e:	2c 4c       	mov	@r12,	r12	;
    ca70:	9c 41 10 00 	mov	16(r1),	0(r12)	;0x00010
    ca74:	00 00 
    ca76:	8c 41 02 00 	mov	r1,	2(r12)	;
    ca7a:	bc 50 12 00 	add	#18,	2(r12)	;#0x0012
    ca7e:	02 00 
    ca80:	8c 42 04 00 	mov	r2,	4(r12)	;
    ca84:	9c 41 0e 00 	mov	14(r1),	6(r12)	;0x0000e
    ca88:	06 00 
    ca8a:	8c 45 08 00 	mov	r5,	8(r12)	;
    ca8e:	8c 46 0a 00 	mov	r6,	10(r12)	; 0x000a
    ca92:	8c 47 0c 00 	mov	r7,	12(r12)	; 0x000c
    ca96:	8c 48 0e 00 	mov	r8,	14(r12)	; 0x000e
    ca9a:	8c 49 10 00 	mov	r9,	16(r12)	; 0x0010
    ca9e:	8c 4a 12 00 	mov	r10,	18(r12)	; 0x0012
    caa2:	8c 4b 14 00 	mov	r11,	20(r12)	; 0x0014
    caa6:	ac 41 16 00 	mov	@r1,	22(r12)	; 0x0016
    caaa:	8c 4d 18 00 	mov	r13,	24(r12)	; 0x0018
    caae:	8c 4e 1a 00 	mov	r14,	26(r12)	; 0x001a
    cab2:	8c 4f 1c 00 	mov	r15,	28(r12)	; 0x001c
    cab6:	84 4c fe ff 	mov	r12,	-2(r4)	; 0xfffe
    caba:	1c 42 b6 5f 	mov	&0x5fb6,r12	;0x5fb6
    cabe:	3d 40 b2 5f 	mov	#24498,	r13	;#0x5fb2
    cac2:	3e 40 ae 5f 	mov	#24494,	r14	;#0x5fae
    cac6:	0c 9d       	cmp	r13,	r12	;
    cac8:	84 4d fa ff 	mov	r13,	-6(r4)	; 0xfffa
    cacc:	84 4e f8 ff 	mov	r14,	-8(r4)	; 0xfff8
    cad0:	04 24       	jz	$+10     	;abs 0xcada
    cad2:	1c 44 fa ff 	mov	-6(r4),	r12	;
    cad6:	84 4c f8 ff 	mov	r12,	-8(r4)	; 0xfff8
    cada:	1c 44 f8 ff 	mov	-8(r4),	r12	;
    cade:	84 4c fc ff 	mov	r12,	-4(r4)	; 0xfffc
    cae2:	1c 42 b6 5f 	mov	&0x5fb6,r12	;0x5fb6
    cae6:	2c 4c       	mov	@r12,	r12	;
    cae8:	3d 40 e8 ad 	mov	#44520,	r13	;#0xade8
    caec:	3e 40 08 ae 	mov	#44552,	r14	;#0xae08
    caf0:	0c 9d       	cmp	r13,	r12	;
    caf2:	84 4d f6 ff 	mov	r13,	-10(r4)	; 0xfff6
    caf6:	84 4e f4 ff 	mov	r14,	-12(r4)	; 0xfff4
    cafa:	04 24       	jz	$+10     	;abs 0xcb04
    cafc:	1c 44 f6 ff 	mov	-10(r4),r12	;0xfffffff6
    cb00:	84 4c f4 ff 	mov	r12,	-12(r4)	; 0xfff4
    cb04:	1c 44 f4 ff 	mov	-12(r4),r12	;0xfffffff4
    cb08:	1d 44 fc ff 	mov	-4(r4),	r13	;
    cb0c:	8d 4c 00 00 	mov	r12,	0(r13)	;
    cb10:	1c 44 fc ff 	mov	-4(r4),	r12	;
    cb14:	8c 43 02 00 	mov	#0,	2(r12)	;r3 As==00
    cb18:	1c 42 fa 7e 	mov	&0x7efa,r12	;0x7efa
    cb1c:	1c 53       	inc	r12		;
    cb1e:	82 4c fa 7e 	mov	r12,	&0x7efa	;
    cb22:	0c 93       	cmp	#0,	r12	;r3 As==00
    cb24:	09 20       	jnz	$+20     	;abs 0xcb38
    cb26:	00 3c       	jmp	$+2      	;abs 0xcb28
    cb28:	1c 42 fa 7e 	mov	&0x7efa,r12	;0x7efa
    cb2c:	1c 53       	inc	r12		;
    cb2e:	82 4c fa 7e 	mov	r12,	&0x7efa	;
    cb32:	b0 12 88 c9 	call	#51592		;#0xc988
    cb36:	00 3c       	jmp	$+2      	;abs 0xcb38
    cb38:	1c 44 fc ff 	mov	-4(r4),	r12	;
    cb3c:	82 4c b6 5f 	mov	r12,	&0x5fb6	;
    cb40:	1c 44 fe ff 	mov	-2(r4),	r12	;
    cb44:	12 4c 04 00 	mov	4(r12),	r2	;
    cb48:	1d 4c 18 00 	mov	24(r12),r13	;0x00018
    cb4c:	1e 4c 1a 00 	mov	26(r12),r14	;0x0001a
    cb50:	1f 4c 1c 00 	mov	28(r12),r15	;0x0001c
    cb54:	3c 41       	pop	r12		;
    cb56:	31 50 0c 00 	add	#12,	r1	;#0x000c
    cb5a:	34 41       	pop	r4		;
    cb5c:	30 41       	ret			
	...

0000cb60 <print_book>:
    cb60:	04 12       	push	r4		;
    cb62:	04 41       	mov	r1,	r4	;
    cb64:	21 83       	decd	r1		;
    cb66:	84 43 fe ff 	mov	#0,	-2(r4)	;r3 As==00, 0xfffe
    cb6a:	00 3c       	jmp	$+2      	;abs 0xcb6c
    cb6c:	1c 44 fe ff 	mov	-2(r4),	r12	;
    cb70:	3c 90 0a 00 	cmp	#10,	r12	;#0x000a
    cb74:	08 2c       	jc	$+18     	;abs 0xcb86
    cb76:	00 3c       	jmp	$+2      	;abs 0xcb78
    cb78:	00 3c       	jmp	$+2      	;abs 0xcb7a
    cb7a:	1c 44 fe ff 	mov	-2(r4),	r12	;
    cb7e:	1c 53       	inc	r12		;
    cb80:	84 4c fe ff 	mov	r12,	-2(r4)	; 0xfffe
    cb84:	f3 3f       	jmp	$-24     	;abs 0xcb6c
    cb86:	21 53       	incd	r1		;
    cb88:	34 41       	pop	r4		;
    cb8a:	30 41       	ret			

0000cb8c <restore_regs>:
    cb8c:	04 12       	push	r4		;
    cb8e:	04 41       	mov	r1,	r4	;
    cb90:	21 82       	sub	#4,	r1	;r2 As==10
    cb92:	1c 42 b6 5f 	mov	&0x5fb6,r12	;0x5fb6
    cb96:	2c 4c       	mov	@r12,	r12	;
    cb98:	0c 93       	cmp	#0,	r12	;r3 As==00
    cb9a:	07 20       	jnz	$+16     	;abs 0xcbaa
    cb9c:	00 3c       	jmp	$+2      	;abs 0xcb9e
    cb9e:	1c 42 b6 5f 	mov	&0x5fb6,r12	;0x5fb6
    cba2:	bc 40 e8 ad 	mov	#44520,	0(r12)	;#0xade8
    cba6:	00 00 
    cba8:	49 3c       	jmp	$+148    	;abs 0xcc3c
    cbaa:	1c 42 b6 5f 	mov	&0x5fb6,r12	;0x5fb6
    cbae:	2c 4c       	mov	@r12,	r12	;
    cbb0:	3d 40 e8 ad 	mov	#44520,	r13	;#0xade8
    cbb4:	0c 9d       	cmp	r13,	r12	;
    cbb6:	05 20       	jnz	$+12     	;abs 0xcbc2
    cbb8:	00 3c       	jmp	$+2      	;abs 0xcbba
    cbba:	b4 40 08 ae 	mov	#44552,	-2(r4)	;#0xae08, 0xfffe
    cbbe:	fe ff 
    cbc0:	04 3c       	jmp	$+10     	;abs 0xcbca
    cbc2:	b4 40 e8 ad 	mov	#44520,	-2(r4)	;#0xade8, 0xfffe
    cbc6:	fe ff 
    cbc8:	00 3c       	jmp	$+2      	;abs 0xcbca
    cbca:	00 3c       	jmp	$+2      	;abs 0xcbcc
    cbcc:	1c 44 fe ff 	mov	-2(r4),	r12	;
    cbd0:	1c 4c 1e 00 	mov	30(r12),r12	;0x0001e
    cbd4:	0c 5c       	rla	r12		;
    cbd6:	1d 4c 90 44 	mov	17552(r12),r13	;0x04490
    cbda:	2d 53       	incd	r13		;
    cbdc:	8c 4d 90 44 	mov	r13,	17552(r12); 0x4490
    cbe0:	1c 42 b6 5f 	mov	&0x5fb6,r12	;0x5fb6
    cbe4:	2c 4c       	mov	@r12,	r12	;
    cbe6:	1c 4c 1e 00 	mov	30(r12),r12	;0x0001e
    cbea:	0c 5c       	rla	r12		;
    cbec:	1d 4c 90 44 	mov	17552(r12),r13	;0x04490
    cbf0:	3d 53       	add	#-1,	r13	;r3 As==11
    cbf2:	8c 4d 90 44 	mov	r13,	17552(r12); 0x4490
    cbf6:	1c 44 fe ff 	mov	-2(r4),	r12	;
    cbfa:	1f 4c 1c 00 	mov	28(r12),r15	;0x0001c
    cbfe:	1e 4c 1a 00 	mov	26(r12),r14	;0x0001a
    cc02:	1d 4c 18 00 	mov	24(r12),r13	;0x00018
    cc06:	1b 4c 14 00 	mov	20(r12),r11	;0x00014
    cc0a:	1a 4c 12 00 	mov	18(r12),r10	;0x00012
    cc0e:	19 4c 10 00 	mov	16(r12),r9	;0x00010
    cc12:	18 4c 0e 00 	mov	14(r12),r8	;0x0000e
    cc16:	17 4c 0c 00 	mov	12(r12),r7	;0x0000c
    cc1a:	16 4c 0a 00 	mov	10(r12),r6	;0x0000a
    cc1e:	15 4c 08 00 	mov	8(r12),	r5	;
    cc22:	14 4c 06 00 	mov	6(r12),	r4	;
    cc26:	12 4c 04 00 	mov	4(r12),	r2	;
    cc2a:	11 4c 02 00 	mov	2(r12),	r1	;
    cc2e:	a4 4c fc ff 	mov	@r12,	-4(r4)	; 0xfffc
    cc32:	1c 4c 16 00 	mov	22(r12),r12	;0x00016
    cc36:	10 44 fc ff 	br	-4(r4)		;
    cc3a:	00 3c       	jmp	$+2      	;abs 0xcc3c
    cc3c:	21 52       	add	#4,	r1	;r2 As==10
    cc3e:	34 41       	pop	r4		;
    cc40:	30 41       	ret			
	...

0000cc44 <is_backed_up>:
    cc44:	04 12       	push	r4		;
    cc46:	04 41       	mov	r1,	r4	;
    cc48:	31 80 06 00 	sub	#6,	r1	;
    cc4c:	0c 4f       	mov	r15,	r12	;
    cc4e:	84 4f fe ff 	mov	r15,	-2(r4)	; 0xfffe
    cc52:	1d 42 02 7f 	mov	&0x7f02,r13	;0x7f02
    cc56:	0f 8d       	sub	r13,	r15	;
    cc58:	84 4f fc ff 	mov	r15,	-4(r4)	; 0xfffc
    cc5c:	0f 5f       	rla	r15		;
    cc5e:	1d 4f ba 5f 	mov	24506(r15),r13	;0x05fba
    cc62:	1f 42 fa 7e 	mov	&0x7efa,r15	;0x7efa
    cc66:	0d 9f       	cmp	r15,	r13	;
    cc68:	0d 42       	mov	r2,	r13	;
    cc6a:	0d 11       	rra	r13		;
    cc6c:	1d f3       	and	#1,	r13	;r3 As==01
    cc6e:	0f 4d       	mov	r13,	r15	;
    cc70:	84 4c fa ff 	mov	r12,	-6(r4)	; 0xfffa
    cc74:	31 50 06 00 	add	#6,	r1	;
    cc78:	34 41       	pop	r4		;
    cc7a:	30 41       	ret			

0000cc7c <back_up>:
    cc7c:	04 12       	push	r4		;
    cc7e:	04 41       	mov	r1,	r4	;
    cc80:	0b 12       	push	r11		;
    cc82:	31 80 0e 00 	sub	#14,	r1	;#0x000e
    cc86:	0c 4e       	mov	r14,	r12	;
    cc88:	0d 4f       	mov	r15,	r13	;
    cc8a:	84 4f fc ff 	mov	r15,	-4(r4)	; 0xfffc
    cc8e:	84 4e fa ff 	mov	r14,	-6(r4)	; 0xfffa
    cc92:	1e 44 fc ff 	mov	-4(r4),	r14	;
    cc96:	1f 42 06 7f 	mov	&0x7f06,r15	;0x7f06
    cc9a:	0e 8f       	sub	r15,	r14	;
    cc9c:	84 4e f8 ff 	mov	r14,	-8(r4)	; 0xfff8
    cca0:	1f 44 fc ff 	mov	-4(r4),	r15	;
    cca4:	1b 44 fa ff 	mov	-6(r4),	r11	;
    cca8:	84 4f f4 ff 	mov	r15,	-12(r4)	; 0xfff4
    ccac:	0f 4e       	mov	r14,	r15	;
    ccae:	1e 44 f4 ff 	mov	-12(r4),r14	;0xfffffff4
    ccb2:	84 4d f2 ff 	mov	r13,	-14(r4)	; 0xfff2
    ccb6:	0d 4b       	mov	r11,	r13	;
    ccb8:	84 4c f0 ff 	mov	r12,	-16(r4)	; 0xfff0
    ccbc:	b0 12 bc c2 	call	#49852		;#0xc2bc
    ccc0:	1c 44 fa ff 	mov	-6(r4),	r12	;
    ccc4:	1d 42 b6 5f 	mov	&0x5fb6,r13	;0x5fb6
    ccc8:	1d 4d 02 00 	mov	2(r13),	r13	;
    cccc:	0d 5d       	rla	r13		;
    ccce:	8d 4c 78 96 	mov	r12,	-27016(r13); 0x9678
    ccd2:	1c 44 fc ff 	mov	-4(r4),	r12	;
    ccd6:	1d 42 b6 5f 	mov	&0x5fb6,r13	;0x5fb6
    ccda:	1d 4d 02 00 	mov	2(r13),	r13	;
    ccde:	0d 5d       	rla	r13		;
    cce0:	8d 4c 08 7f 	mov	r12,	32520(r13); 0x7f08
    cce4:	1c 42 b6 5f 	mov	&0x5fb6,r12	;0x5fb6
    cce8:	1d 4c 02 00 	mov	2(r12),	r13	;
    ccec:	1d 53       	inc	r13		;
    ccee:	8c 4d 02 00 	mov	r13,	2(r12)	;
    ccf2:	1c 44 fc ff 	mov	-4(r4),	r12	;
    ccf6:	1d 42 02 7f 	mov	&0x7f02,r13	;0x7f02
    ccfa:	0c 8d       	sub	r13,	r12	;
    ccfc:	84 4c f6 ff 	mov	r12,	-10(r4)	; 0xfff6
    cd00:	1d 42 fa 7e 	mov	&0x7efa,r13	;0x7efa
    cd04:	0c 5c       	rla	r12		;
    cd06:	8c 4d ba 5f 	mov	r13,	24506(r12); 0x5fba
    cd0a:	31 50 0e 00 	add	#14,	r1	;#0x000e
    cd0e:	3b 41       	pop	r11		;
    cd10:	34 41       	pop	r4		;
    cd12:	30 41       	ret			

0000cd14 <check_before_write>:
    cd14:	04 12       	push	r4		;
    cd16:	04 41       	mov	r1,	r4	;
    cd18:	31 82       	sub	#8,	r1	;r2 As==11
    cd1a:	0c 4e       	mov	r14,	r12	;
    cd1c:	0d 4f       	mov	r15,	r13	;
    cd1e:	84 4f fe ff 	mov	r15,	-2(r4)	; 0xfffe
    cd22:	84 4e fc ff 	mov	r14,	-4(r4)	; 0xfffc
    cd26:	1e 44 fe ff 	mov	-2(r4),	r14	;
    cd2a:	1f 42 02 7f 	mov	&0x7f02,r15	;0x7f02
    cd2e:	0e 9f       	cmp	r15,	r14	;
    cd30:	84 4c fa ff 	mov	r12,	-6(r4)	; 0xfffa
    cd34:	84 4d f8 ff 	mov	r13,	-8(r4)	; 0xfff8
    cd38:	08 28       	jnc	$+18     	;abs 0xcd4a
    cd3a:	00 3c       	jmp	$+2      	;abs 0xcd3c
    cd3c:	1c 44 fe ff 	mov	-2(r4),	r12	;
    cd40:	1d 42 04 7f 	mov	&0x7f04,r13	;0x7f04
    cd44:	0d 9c       	cmp	r12,	r13	;
    cd46:	02 2c       	jc	$+6      	;abs 0xcd4c
    cd48:	00 3c       	jmp	$+2      	;abs 0xcd4a
    cd4a:	0f 3c       	jmp	$+32     	;abs 0xcd6a
    cd4c:	1f 44 fe ff 	mov	-2(r4),	r15	;
    cd50:	b0 12 44 cc 	call	#52292		;#0xcc44
    cd54:	4f 93       	cmp.b	#0,	r15	;r3 As==00
    cd56:	02 24       	jz	$+6      	;abs 0xcd5c
    cd58:	00 3c       	jmp	$+2      	;abs 0xcd5a
    cd5a:	07 3c       	jmp	$+16     	;abs 0xcd6a
    cd5c:	1f 44 fe ff 	mov	-2(r4),	r15	;
    cd60:	1e 44 fc ff 	mov	-4(r4),	r14	;
    cd64:	b0 12 7c cc 	call	#52348		;#0xcc7c
    cd68:	00 3c       	jmp	$+2      	;abs 0xcd6a
    cd6a:	31 52       	add	#8,	r1	;r2 As==11
    cd6c:	34 41       	pop	r4		;
    cd6e:	30 41       	ret			

0000cd70 <remove_check>:
    cd70:	04 12       	push	r4		;
    cd72:	04 41       	mov	r1,	r4	;
    cd74:	31 80 06 00 	sub	#6,	r1	;
    cd78:	84 43 fe ff 	mov	#0,	-2(r4)	;r3 As==00, 0xfffe
    cd7c:	84 43 fc ff 	mov	#0,	-4(r4)	;r3 As==00, 0xfffc
    cd80:	b4 40 14 cd 	mov	#52500,	-6(r4)	;#0xcd14, 0xfffa
    cd84:	fa ff 
    cd86:	b4 40 00 44 	mov	#17408,	-2(r4)	;#0x4400, 0xfffe
    cd8a:	fe ff 
    cd8c:	00 3c       	jmp	$+2      	;abs 0xcd8e
    cd8e:	1c 44 fe ff 	mov	-2(r4),	r12	;
    cd92:	3c 90 80 bb 	cmp	#48000,	r12	;#0xbb80
    cd96:	30 2c       	jc	$+98     	;abs 0xcdf8
    cd98:	00 3c       	jmp	$+2      	;abs 0xcd9a
    cd9a:	1c 44 fe ff 	mov	-2(r4),	r12	;
    cd9e:	2c 4c       	mov	@r12,	r12	;
    cda0:	3c 90 b0 12 	cmp	#4784,	r12	;#0x12b0
    cda4:	06 20       	jnz	$+14     	;abs 0xcdb2
    cda6:	00 3c       	jmp	$+2      	;abs 0xcda8
    cda8:	1c 44 fe ff 	mov	-2(r4),	r12	;
    cdac:	84 4c fc ff 	mov	r12,	-4(r4)	; 0xfffc
    cdb0:	1c 3c       	jmp	$+58     	;abs 0xcdea
    cdb2:	1c 44 fc ff 	mov	-4(r4),	r12	;
    cdb6:	0c 93       	cmp	#0,	r12	;r3 As==00
    cdb8:	17 24       	jz	$+48     	;abs 0xcde8
    cdba:	00 3c       	jmp	$+2      	;abs 0xcdbc
    cdbc:	1c 44 fe ff 	mov	-2(r4),	r12	;
    cdc0:	2c 4c       	mov	@r12,	r12	;
    cdc2:	1d 44 fa ff 	mov	-6(r4),	r13	;
    cdc6:	0c 9d       	cmp	r13,	r12	;
    cdc8:	0c 20       	jnz	$+26     	;abs 0xcde2
    cdca:	00 3c       	jmp	$+2      	;abs 0xcdcc
    cdcc:	1c 44 fe ff 	mov	-2(r4),	r12	;
    cdd0:	bc 40 43 03 	mov	#835,	0(r12)	;#0x0343
    cdd4:	00 00 
    cdd6:	1c 44 fc ff 	mov	-4(r4),	r12	;
    cdda:	bc 40 43 03 	mov	#835,	0(r12)	;#0x0343
    cdde:	00 00 
    cde0:	00 3c       	jmp	$+2      	;abs 0xcde2
    cde2:	84 43 fc ff 	mov	#0,	-4(r4)	;r3 As==00, 0xfffc
    cde6:	00 3c       	jmp	$+2      	;abs 0xcde8
    cde8:	00 3c       	jmp	$+2      	;abs 0xcdea
    cdea:	00 3c       	jmp	$+2      	;abs 0xcdec
    cdec:	1c 44 fe ff 	mov	-2(r4),	r12	;
    cdf0:	2c 53       	incd	r12		;
    cdf2:	84 4c fe ff 	mov	r12,	-2(r4)	; 0xfffe
    cdf6:	cb 3f       	jmp	$-104    	;abs 0xcd8e
    cdf8:	31 50 06 00 	add	#6,	r1	;
    cdfc:	34 41       	pop	r4		;
    cdfe:	30 41       	ret			

0000ce00 <__mulhi3hw_noint>:
    ce00:	82 4f c0 04 	mov	r15,	&0x04c0	;
    ce04:	82 4e c8 04 	mov	r14,	&0x04c8	;
    ce08:	1f 42 ca 04 	mov	&0x04ca,r15	;0x04ca
    ce0c:	30 41       	ret			

0000ce0e <xtoa>:
            10,     // +8
             1,     // +9
};

static void xtoa(unsigned long x, const unsigned long *dp)
{
    ce0e:	6a 15       	pushm	#7,	r10	;16-bit words
    ce10:	08 4c       	mov	r12,	r8	;
    ce12:	09 4d       	mov	r13,	r9	;
    char c;
    unsigned long d;
    if(x) {
    ce14:	0c dd       	bis	r13,	r12	;
    ce16:	0c 93       	cmp	#0,	r12	;r3 As==00
    ce18:	36 24       	jz	$+110    	;abs 0xce86
        while(x < *dp) ++dp;
    ce1a:	1d 9e 02 00 	cmp	2(r14),	r13	;
    ce1e:	05 28       	jnc	$+12     	;abs 0xce2a
    ce20:	8e 9d 02 00 	cmp	r13,	2(r14)	;
    ce24:	0d 20       	jnz	$+28     	;abs 0xce40
    ce26:	28 9e       	cmp	@r14,	r8	;
    ce28:	0b 2c       	jc	$+24     	;abs 0xce40
    ce2a:	0c 49       	mov	r9,	r12	;
    ce2c:	0d 48       	mov	r8,	r13	;
    ce2e:	2e 52       	add	#4,	r14	;r2 As==10
    ce30:	1c 9e 02 00 	cmp	2(r14),	r12	;
    ce34:	fc 2b       	jnc	$-6      	;abs 0xce2e
    ce36:	8e 99 02 00 	cmp	r9,	2(r14)	;
    ce3a:	02 20       	jnz	$+6      	;abs 0xce40
    ce3c:	2d 9e       	cmp	@r14,	r13	;
    ce3e:	f7 2b       	jnc	$-16     	;abs 0xce2e
    ce40:	0a 4e       	mov	r14,	r10	;
        do {
            d = *dp++;
            c = '0';
    ce42:	34 40 30 00 	mov	#48,	r4	;#0x0030
            while(x >= d) ++c, x -= d;
            PUTC(c);
    ce46:	35 40 38 d0 	mov	#53304,	r5	;#0xd038
    char c;
    unsigned long d;
    if(x) {
        while(x < *dp) ++dp;
        do {
            d = *dp++;
    ce4a:	26 4a       	mov	@r10,	r6	;
    ce4c:	17 4a 02 00 	mov	2(r10),	r7	;
            c = '0';
            while(x >= d) ++c, x -= d;
    ce50:	09 97       	cmp	r7,	r9	;
    ce52:	12 28       	jnc	$+38     	;abs 0xce78
    ce54:	07 99       	cmp	r9,	r7	;
    ce56:	02 20       	jnz	$+6      	;abs 0xce5c
    ce58:	08 96       	cmp	r6,	r8	;
    ce5a:	0e 28       	jnc	$+30     	;abs 0xce78
    ce5c:	0c 44       	mov	r4,	r12	;
    ce5e:	0e 47       	mov	r7,	r14	;
    ce60:	5c 53       	inc.b	r12		;
    ce62:	3c f0 ff 00 	and	#255,	r12	;#0x00ff
    ce66:	08 86       	sub	r6,	r8	;
    ce68:	09 77       	subc	r7,	r9	;
    ce6a:	09 97       	cmp	r7,	r9	;
    ce6c:	06 28       	jnc	$+14     	;abs 0xce7a
    ce6e:	0e 99       	cmp	r9,	r14	;
    ce70:	f7 23       	jnz	$-16     	;abs 0xce60
    ce72:	08 96       	cmp	r6,	r8	;
    ce74:	f5 2f       	jc	$-20     	;abs 0xce60
    ce76:	01 3c       	jmp	$+4      	;abs 0xce7a
    unsigned long d;
    if(x) {
        while(x < *dp) ++dp;
        do {
            d = *dp++;
            c = '0';
    ce78:	0c 44       	mov	r4,	r12	;
            while(x >= d) ++c, x -= d;
            PUTC(c);
    ce7a:	85 12       	call	r5		;
    ce7c:	2a 52       	add	#4,	r10	;r2 As==10
        } while(!(d & 1));
    ce7e:	16 f3       	and	#1,	r6	;r3 As==01
    ce80:	06 93       	cmp	#0,	r6	;r3 As==00
    ce82:	e3 27       	jz	$-56     	;abs 0xce4a
    ce84:	04 3c       	jmp	$+10     	;abs 0xce8e
    } else {
        PUTC('0');
    ce86:	3c 40 30 00 	mov	#48,	r12	;#0x0030
    ce8a:	b0 12 38 d0 	call	#53304		;#0xd038
    }
}
    ce8e:	64 17       	popm	#7,	r10	;16-bit words
    ce90:	30 41       	ret			

0000ce92 <puth>:

static void puth(unsigned n)
{
    static const char hex[16] = { '0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
    char c = hex[n & 15];
    PUTC(hex[n & 15]);
    ce92:	3c f0 0f 00 	and	#15,	r12	;#0x000f
    ce96:	5c 4c 00 44 	mov.b	17408(r12),r12	;0x04400
    ce9a:	b0 12 38 d0 	call	#53304		;#0xd038
}
    ce9e:	30 41       	ret			

0000cea0 <puts>:

int puts(const char *str){
    cea0:	1a 15       	pushm	#2,	r10	;16-bit words
    cea2:	0a 4c       	mov	r12,	r10	;
	while(*str != 0){
    cea4:	6c 4c       	mov.b	@r12,	r12	;
    cea6:	0c 93       	cmp	#0,	r12	;r3 As==00
    cea8:	07 24       	jz	$+16     	;abs 0xceb8
		PUTC(*str++);
    ceaa:	39 40 38 d0 	mov	#53304,	r9	;#0xd038
    ceae:	1a 53       	inc	r10		;
    ceb0:	89 12       	call	r9		;
    char c = hex[n & 15];
    PUTC(hex[n & 15]);
}

int puts(const char *str){
	while(*str != 0){
    ceb2:	6c 4a       	mov.b	@r10,	r12	;
    ceb4:	0c 93       	cmp	#0,	r12	;r3 As==00
    ceb6:	fb 23       	jnz	$-8      	;abs 0xceae
		PUTC(*str++);
	}
	return 0;
}
    ceb8:	0c 43       	clr	r12		;
    ceba:	19 17       	popm	#2,	r10	;16-bit words
    cebc:	30 41       	ret			

0000cebe <printf>:

int printf(const char *format, ...)
{
    cebe:	6a 15       	pushm	#7,	r10	;16-bit words
    cec0:	1a 41 10 00 	mov	16(r1),	r10	;0x00010
    long n;
    int fill_zeros;
    unsigned d;

    va_list a;
    va_start(a, format);
    cec4:	08 41       	mov	r1,	r8	;
    cec6:	38 50 12 00 	add	#18,	r8	;#0x0012
                    goto parse_fmt_char;
                case 0: return 0;
                default: goto bad_fmt;
            }
        } else
bad_fmt:    PUTC(c);
    ceca:	35 40 38 d0 	mov	#53304,	r5	;#0xd038
                    break;
                case 'i':                       // 16 bit Integer
                case 'u':                       // 16 bit Unsigned
                    i = va_arg(a, int);
                    if(c == 'i' && i < 0) i = -i, PUTC('-');
                    xtoa((unsigned)i, dv + 5);
    cece:	34 40 24 44 	mov	#17444,	r4	;#0x4424
    int fill_zeros;
    unsigned d;

    va_list a;
    va_start(a, format);
    while((c = *format++)) {
    ced2:	a7 3c       	jmp	$+336    	;abs 0xd022
        if(c == '%') {
    ced4:	3c 90 25 00 	cmp	#37,	r12	;#0x0025
    ced8:	a2 20       	jnz	$+326    	;abs 0xd01e
    ceda:	0d 4a       	mov	r10,	r13	;
    cedc:	2d 53       	incd	r13		;
    cede:	07 43       	clr	r7		;
            fill_zeros = 0;
parse_fmt_char:
            switch(c = *format++) {
    cee0:	7e 40 6c 00 	mov.b	#108,	r14	;#0x006c
    cee4:	0a 4d       	mov	r13,	r10	;
    cee6:	6c 49       	mov.b	@r9,	r12	;
    cee8:	3c 90 6c 00 	cmp	#108,	r12	;#0x006c
    ceec:	4b 24       	jz	$+152    	;abs 0xcf84
    ceee:	4e 9c       	cmp.b	r12,	r14	;
    cef0:	11 28       	jnc	$+36     	;abs 0xcf14
    cef2:	3c 90 30 00 	cmp	#48,	r12	;#0x0030
    cef6:	8c 24       	jz	$+282    	;abs 0xd010
    cef8:	7d 40 30 00 	mov.b	#48,	r13	;#0x0030
    cefc:	4d 9c       	cmp.b	r12,	r13	;
    cefe:	03 28       	jnc	$+8      	;abs 0xcf06
    cf00:	0c 93       	cmp	#0,	r12	;r3 As==00
    cf02:	94 24       	jz	$+298    	;abs 0xd02c
    cf04:	8b 3c       	jmp	$+280    	;abs 0xd01c
    cf06:	3c 90 63 00 	cmp	#99,	r12	;#0x0063
    cf0a:	1d 24       	jz	$+60     	;abs 0xcf46
    cf0c:	3c 90 69 00 	cmp	#105,	r12	;#0x0069
    cf10:	22 24       	jz	$+70     	;abs 0xcf56
    cf12:	84 3c       	jmp	$+266    	;abs 0xd01c
    cf14:	3c 90 73 00 	cmp	#115,	r12	;#0x0073
    cf18:	0f 24       	jz	$+32     	;abs 0xcf38
    cf1a:	7d 40 73 00 	mov.b	#115,	r13	;#0x0073
    cf1e:	4d 9c       	cmp.b	r12,	r13	;
    cf20:	04 28       	jnc	$+10     	;abs 0xcf2a
    cf22:	3c 90 6e 00 	cmp	#110,	r12	;#0x006e
    cf26:	2e 24       	jz	$+94     	;abs 0xcf84
    cf28:	79 3c       	jmp	$+244    	;abs 0xd01c
    cf2a:	3c 90 75 00 	cmp	#117,	r12	;#0x0075
    cf2e:	13 24       	jz	$+40     	;abs 0xcf56
    cf30:	3c 90 78 00 	cmp	#120,	r12	;#0x0078
    cf34:	44 24       	jz	$+138    	;abs 0xcfbe
    cf36:	72 3c       	jmp	$+230    	;abs 0xd01c
                case 's':                       // String
                    io_puts_no_newline(va_arg(a, char*));
    cf38:	09 48       	mov	r8,	r9	;
    cf3a:	29 53       	incd	r9		;
    cf3c:	2c 48       	mov	@r8,	r12	;
    cf3e:	b0 12 54 d0 	call	#53332		;#0xd054
    cf42:	08 49       	mov	r9,	r8	;
                    break;
    cf44:	6e 3c       	jmp	$+222    	;abs 0xd022
                case 'c':                       // Char
                    PUTC(va_arg(a, int)); // TODO: 'char' generated a warning
    cf46:	18 53       	inc	r8		;
    cf48:	0c 48       	mov	r8,	r12	;
    cf4a:	1c c3       	bic	#1,	r12	;r3 As==01
    cf4c:	08 4c       	mov	r12,	r8	;
    cf4e:	28 53       	incd	r8		;
    cf50:	2c 4c       	mov	@r12,	r12	;
    cf52:	85 12       	call	r5		;
                    break;
    cf54:	66 3c       	jmp	$+206    	;abs 0xd022
                case 'i':                       // 16 bit Integer
                case 'u':                       // 16 bit Unsigned
                    i = va_arg(a, int);
    cf56:	18 53       	inc	r8		;
    cf58:	0d 48       	mov	r8,	r13	;
    cf5a:	1d c3       	bic	#1,	r13	;r3 As==01
    cf5c:	08 4d       	mov	r13,	r8	;
    cf5e:	28 53       	incd	r8		;
    cf60:	29 4d       	mov	@r13,	r9	;
                    if(c == 'i' && i < 0) i = -i, PUTC('-');
    cf62:	3c 90 69 00 	cmp	#105,	r12	;#0x0069
    cf66:	08 20       	jnz	$+18     	;abs 0xcf78
    cf68:	09 93       	cmp	#0,	r9	;r3 As==00
    cf6a:	06 34       	jge	$+14     	;abs 0xcf78
    cf6c:	0c 43       	clr	r12		;
    cf6e:	0c 89       	sub	r9,	r12	;
    cf70:	09 4c       	mov	r12,	r9	;
    cf72:	3c 40 2d 00 	mov	#45,	r12	;#0x002d
    cf76:	85 12       	call	r5		;
                    xtoa((unsigned)i, dv + 5);
    cf78:	0c 49       	mov	r9,	r12	;
    cf7a:	0d 43       	clr	r13		;
    cf7c:	0e 44       	mov	r4,	r14	;
    cf7e:	b0 12 0e ce 	call	#52750		;#0xce0e
                    break;
    cf82:	4f 3c       	jmp	$+160    	;abs 0xd022
                case 'l':                       // 32 bit Long
                case 'n':                       // 32 bit uNsigned loNg
                    n = va_arg(a, long);
    cf84:	18 53       	inc	r8		;
    cf86:	0d 48       	mov	r8,	r13	;
    cf88:	1d c3       	bic	#1,	r13	;r3 As==01
    cf8a:	08 4d       	mov	r13,	r8	;
    cf8c:	28 52       	add	#4,	r8	;r2 As==10
    cf8e:	26 4d       	mov	@r13,	r6	;
    cf90:	17 4d 02 00 	mov	2(r13),	r7	;
                    if(c == 'l' &&  n < 0) n = -n, PUTC('-');
    cf94:	3c 90 6c 00 	cmp	#108,	r12	;#0x006c
    cf98:	0b 20       	jnz	$+24     	;abs 0xcfb0
    cf9a:	07 93       	cmp	#0,	r7	;r3 As==00
    cf9c:	09 34       	jge	$+20     	;abs 0xcfb0
    cf9e:	0c 43       	clr	r12		;
    cfa0:	0d 43       	clr	r13		;
    cfa2:	0c 86       	sub	r6,	r12	;
    cfa4:	0d 77       	subc	r7,	r13	;
    cfa6:	06 4c       	mov	r12,	r6	;
    cfa8:	07 4d       	mov	r13,	r7	;
    cfaa:	3c 40 2d 00 	mov	#45,	r12	;#0x002d
    cfae:	85 12       	call	r5		;
                    xtoa((unsigned long)n, dv);
    cfb0:	0c 46       	mov	r6,	r12	;
    cfb2:	0d 47       	mov	r7,	r13	;
    cfb4:	3e 40 10 44 	mov	#17424,	r14	;#0x4410
    cfb8:	b0 12 0e ce 	call	#52750		;#0xce0e
                    break;
    cfbc:	32 3c       	jmp	$+102    	;abs 0xd022
                case 'x':                       // 16 bit heXadecimal
                    i = va_arg(a, int);
    cfbe:	18 53       	inc	r8		;
    cfc0:	0c 48       	mov	r8,	r12	;
    cfc2:	1c c3       	bic	#1,	r12	;r3 As==01
    cfc4:	08 4c       	mov	r12,	r8	;
    cfc6:	28 53       	incd	r8		;
    cfc8:	29 4c       	mov	@r12,	r9	;
                    d = i >> 12;
    cfca:	0c 49       	mov	r9,	r12	;
    cfcc:	4b 18 0c 11 	rpt #12 { rrax.w	r12		;
                    if (d > 0 || fill_zeros >= 4)
    cfd0:	0c 93       	cmp	#0,	r12	;r3 As==00
    cfd2:	04 20       	jnz	$+10     	;abs 0xcfdc
    cfd4:	3d 40 03 00 	mov	#3,	r13	;
    cfd8:	0d 97       	cmp	r7,	r13	;
    cfda:	02 34       	jge	$+6      	;abs 0xcfe0
                        puth(d);
    cfdc:	b0 12 92 ce 	call	#52882		;#0xce92
                    d = i >> 8;
    cfe0:	0c 49       	mov	r9,	r12	;
    cfe2:	47 18 0c 11 	rpt #8 { rrax.w	r12		;
                    if (d > 0 || fill_zeros >= 3)
    cfe6:	0c 93       	cmp	#0,	r12	;r3 As==00
    cfe8:	03 20       	jnz	$+8      	;abs 0xcff0
    cfea:	2d 43       	mov	#2,	r13	;r3 As==10
    cfec:	0d 97       	cmp	r7,	r13	;
    cfee:	02 34       	jge	$+6      	;abs 0xcff4
                        puth(d);
    cff0:	b0 12 92 ce 	call	#52882		;#0xce92
                    d = i >> 4;
    cff4:	0c 49       	mov	r9,	r12	;
    cff6:	43 18 0c 11 	rpt #4 { rrax.w	r12		;
                    if (d > 0 || fill_zeros >= 2)
    cffa:	0c 93       	cmp	#0,	r12	;r3 As==00
    cffc:	03 20       	jnz	$+8      	;abs 0xd004
    cffe:	1d 43       	mov	#1,	r13	;r3 As==01
    d000:	0d 97       	cmp	r7,	r13	;
    d002:	02 34       	jge	$+6      	;abs 0xd008
                        puth(d);
    d004:	b0 12 92 ce 	call	#52882		;#0xce92
                    puth(i);
    d008:	0c 49       	mov	r9,	r12	;
    d00a:	b0 12 92 ce 	call	#52882		;#0xce92
                    break;
    d00e:	09 3c       	jmp	$+20     	;abs 0xd022
    d010:	29 53       	incd	r9		;
                case '0':
                    c = *format++;
                    fill_zeros = c - '0';
    d012:	67 4d       	mov.b	@r13,	r7	;
    d014:	37 50 d0 ff 	add	#65488,	r7	;#0xffd0
    d018:	2d 53       	incd	r13		;
                    goto parse_fmt_char;
    d01a:	64 3f       	jmp	$-310    	;abs 0xcee4
    va_start(a, format);
    while((c = *format++)) {
        if(c == '%') {
            fill_zeros = 0;
parse_fmt_char:
            switch(c = *format++) {
    d01c:	09 4a       	mov	r10,	r9	;
                    goto parse_fmt_char;
                case 0: return 0;
                default: goto bad_fmt;
            }
        } else
bad_fmt:    PUTC(c);
    d01e:	85 12       	call	r5		;
    d020:	0a 49       	mov	r9,	r10	;
    int fill_zeros;
    unsigned d;

    va_list a;
    va_start(a, format);
    while((c = *format++)) {
    d022:	09 4a       	mov	r10,	r9	;
    d024:	19 53       	inc	r9		;
    d026:	6c 4a       	mov.b	@r10,	r12	;
    d028:	0c 93       	cmp	#0,	r12	;r3 As==00
    d02a:	54 23       	jnz	$-342    	;abs 0xced4
        } else
bad_fmt:    PUTC(c);
    }
    va_end(a);
    return 0; // TODO: return number of chars printed
}
    d02c:	0c 43       	clr	r12		;
    d02e:	64 17       	popm	#7,	r10	;16-bit words
    d030:	30 41       	ret			

0000d032 <mspconsole_init>:

#include <stdlib.h>

void mspconsole_init()
{
    UART_init();
    d032:	b0 12 90 d0 	call	#53392		;#0xd090
}
    d036:	30 41       	ret			

0000d038 <io_putchar>:
			: "=r" (r12)
			);
}

int io_putchar_c(int c)
*/{
    d038:	0a 15       	pushm	#1,	r10	;16-bit words
    d03a:	21 83       	decd	r1		;
    d03c:	0a 4c       	mov	r12,	r10	;
    uint8_t ch = c;
    d03e:	c1 4c 01 00 	mov.b	r12,	1(r1)	;
    UART_send(&ch, 1);
    d042:	0c 41       	mov	r1,	r12	;
    d044:	1c 53       	inc	r12		;
    d046:	1d 43       	mov	#1,	r13	;r3 As==01
    d048:	b0 12 1c d1 	call	#53532		;#0xd11c
    return c;
}
    d04c:	0c 4a       	mov	r10,	r12	;
    d04e:	21 53       	incd	r1		;
    d050:	0a 17       	popm	#1,	r10	;16-bit words
    d052:	30 41       	ret			

0000d054 <io_puts_no_newline>:

int io_puts_no_newline(const char *ptr)
{
    d054:	0a 15       	pushm	#1,	r10	;16-bit words
    unsigned len = 0;
    const char *p = ptr;

    while (*p++ != '\0')
    d056:	cc 93 00 00 	cmp.b	#0,	0(r12)	;r3 As==00
    d05a:	08 24       	jz	$+18     	;abs 0xd06c
    d05c:	0a 43       	clr	r10		;
        len++;
    d05e:	1a 53       	inc	r10		;
    d060:	0d 4c       	mov	r12,	r13	;
    d062:	0d 5a       	add	r10,	r13	;
int io_puts_no_newline(const char *ptr)
{
    unsigned len = 0;
    const char *p = ptr;

    while (*p++ != '\0')
    d064:	cd 93 00 00 	cmp.b	#0,	0(r13)	;r3 As==00
    d068:	fa 23       	jnz	$-10     	;abs 0xd05e
    d06a:	01 3c       	jmp	$+4      	;abs 0xd06e
    return c;
}

int io_puts_no_newline(const char *ptr)
{
    unsigned len = 0;
    d06c:	0a 43       	clr	r10		;
    const char *p = ptr;

    while (*p++ != '\0')
        len++;

    UART_send((uint8_t *)ptr, len);
    d06e:	0d 4a       	mov	r10,	r13	;
    d070:	b0 12 1c d1 	call	#53532		;#0xd11c
    return len;
}
    d074:	0c 4a       	mov	r10,	r12	;
    d076:	0a 17       	popm	#1,	r10	;16-bit words
    d078:	30 41       	ret			

0000d07a <io_puts>:

int io_puts(const char *ptr)
{
    d07a:	0a 15       	pushm	#1,	r10	;16-bit words
    unsigned len;

    len = io_puts_no_newline(ptr);
    d07c:	b0 12 54 d0 	call	#53332		;#0xd054
    d080:	0a 4c       	mov	r12,	r10	;

    // Semantics of puts are annoying...
    io_putchar('\n');
    d082:	3c 40 0a 00 	mov	#10,	r12	;#0x000a
    d086:	b0 12 38 d0 	call	#53304		;#0xd038

    return len;
}
    d08a:	0c 4a       	mov	r10,	r12	;
    d08c:	0a 17       	popm	#1,	r10	;16-bit words
    d08e:	30 41       	ret			

0000d090 <UART_init>:
 * @todo Currently assumes an 8MHz SMCLK. Make robust to clock frequency changes by using 32k ACLK.
 */
void UART_init(void) {

    // Configure USCI_A0 for UART mode
    UCA0CTLW0 = UCSWRST;                      // Put eUSCI in reset
    d090:	92 43 c0 05 	mov	#1,	&0x05c0	;r3 As==01
    UCA0CTLW0 |= UCSSEL__SMCLK;               // CLK = SMCLK
    d094:	b2 d0 80 00 	bis	#128,	&0x05c0	;#0x0080
    d098:	c0 05 
    UCA0BR1 = 0;
    UCA0MCTLW = UCOS16 | UCBRF_2 | (0xBB << 8);
#endif // UART_BAUDRATE
#elif UART_CLOCK == 8000000
#if UART_BAUDRATE == 115200
    UCA0BR0 = 4;
    d09a:	e2 42 c6 05 	mov.b	#4,	&0x05c6	;r2 As==10
    UCA0BR1 = 0;
    d09e:	c2 43 c7 05 	mov.b	#0,	&0x05c7	;r3 As==00
    UCA0MCTLW = UCOS16 | UCBRF_4 | (0x55 << 8);
    d0a2:	b2 40 41 55 	mov	#21825,	&0x05c8	;#0x5541
    d0a6:	c8 05 
#endif // UART_BAUDRATE
#endif // UART_CLOCK

#if defined(__MSP430FR5969__) || defined(__MSP430FR5949__)
    PUART_TXSEL0 &= ~PIN_UART_TX; // TX pin to UART module
    d0a8:	d2 c3 0b 02 	bic.b	#1,	&0x020b	;r3 As==01
    PUART_TXSEL1 |= PIN_UART_TX;
    d0ac:	d2 d3 0d 02 	bis.b	#1,	&0x020d	;r3 As==01

    PUART_RXSEL0 &= ~PIN_UART_RX; // RX pin to UART module
    d0b0:	e2 c3 0b 02 	bic.b	#2,	&0x020b	;r3 As==10
    PUART_RXSEL1 |= PIN_UART_RX;
    d0b4:	e2 d3 0d 02 	bis.b	#2,	&0x020d	;r3 As==10
    PUART_RXSEL1 &= ~PIN_UART_RX;
#else
#error MCU not supported
#endif

    UCA0CTLW0 &= ~UCSWRST;                    // Initialize eUSCI
    d0b8:	92 c3 c0 05 	bic	#1,	&0x05c0	;r3 As==01

    // Initialize module state
    UART_SM.isTxBusy = FALSE;
    d0bc:	3c 40 98 1c 	mov	#7320,	r12	;#0x1c98
    d0c0:	cc 43 00 00 	mov.b	#0,	0(r12)	;r3 As==00
    UART_SM.txBytesRemaining = 0;
    d0c4:	8c 43 04 00 	mov	#0,	4(r12)	;r3 As==00
    UART_SM.isRxBusy = FALSE;
    d0c8:	cc 43 06 00 	mov.b	#0,	6(r12)	;r3 As==00
    UART_SM.rxBytesRemaining = 0;
    d0cc:	8c 43 0a 00 	mov	#0,	10(r12)	;r3 As==00, 0x000a

}
    d0d0:	30 41       	ret			

0000d0d2 <UART_teardown>:
void UART_teardown()
{
    // disable UART
    // Not sure how to do this best, but set all UCA0* registers to
    // their default values.  See User's Guide for default values.
    PUART_TXSEL0 &= ~PIN_UART_TX;
    d0d2:	d2 c3 0b 02 	bic.b	#1,	&0x020b	;r3 As==01
    PUART_TXSEL1 &= ~PIN_UART_TX;
    d0d6:	d2 c3 0d 02 	bic.b	#1,	&0x020d	;r3 As==01
    PUART_RXSEL0 &= ~PIN_UART_RX;
    d0da:	e2 c3 0b 02 	bic.b	#2,	&0x020b	;r3 As==10
    PUART_RXSEL1 &= ~PIN_UART_RX;
    d0de:	e2 c3 0d 02 	bic.b	#2,	&0x020d	;r3 As==10
    UCA0CTLW0 = 0x0001;
    d0e2:	92 43 c0 05 	mov	#1,	&0x05c0	;r3 As==01
    UCA0BR0 = 0x0000;
    d0e6:	c2 43 c6 05 	mov.b	#0,	&0x05c6	;r3 As==00
    UCA0MCTLW = 0x0000;
    d0ea:	82 43 c8 05 	mov	#0,	&0x05c8	;r3 As==00
    UCA0IE = 0x0000;
    d0ee:	82 43 da 05 	mov	#0,	&0x05da	;r3 As==00
    UCA0IFG = 0x0000;
    d0f2:	82 43 dc 05 	mov	#0,	&0x05dc	;r3 As==00
}
    d0f6:	30 41       	ret			

0000d0f8 <UART_asyncSend>:
 * @param size the number of bytes to send
 */
void UART_asyncSend(uint8_t* txBuf, uint16_t size) {

    // Block until prior transmission has completed
    while (UART_SM.isTxBusy)
    d0f8:	3f 40 98 1c 	mov	#7320,	r15	;#0x1c98
    d0fc:	6e 4f       	mov.b	@r15,	r14	;
    d0fe:	0e 93       	cmp	#0,	r14	;r3 As==00
    d100:	fd 23       	jnz	$-4      	;abs 0xd0fc
        ;

    // Set up for start of transmission
    UART_SM.isTxBusy = TRUE;
    d102:	3e 40 98 1c 	mov	#7320,	r14	;#0x1c98
    d106:	de 43 00 00 	mov.b	#1,	0(r14)	;r3 As==01
    UART_SM.txPtr = txBuf;
    d10a:	8e 4c 02 00 	mov	r12,	2(r14)	;
    UART_SM.txBytesRemaining = size;
    d10e:	8e 4d 04 00 	mov	r13,	4(r14)	;

    UCA0IFG &= ~(USCI_UART_UCTXIFG); // Clear the 'ready to accept byte' flag
    d112:	a2 c2 dc 05 	bic	#4,	&0x05dc	;r2 As==10

    UCA0IE |= UCTXIE; // Enable USCI_A0 TX interrupt ('ready to accept byte')
    d116:	a2 d3 da 05 	bis	#2,	&0x05da	;r3 As==10
    //UCA0TXBUF = *(UART_SM.txPtr++); // Load in first byte

    // The bytes are transmitted in the TX ISR (which is called whenever the
    // UART is ready to accept a byte), and the isBusy flag is cleared when the
    // last byte has *finished* transmitting.
}
    d11a:	30 41       	ret			

0000d11c <UART_send>:
 * @param size the number of bytes to send
 *
 */
void UART_send(uint8_t* txBuf, uint16_t size) {

    UART_asyncSend(txBuf, size);
    d11c:	b0 12 f8 d0 	call	#53496		;#0xd0f8

    // Block until complete
    while (UART_SM.isTxBusy)
    d120:	3d 40 98 1c 	mov	#7320,	r13	;#0x1c98
    d124:	6c 4d       	mov.b	@r13,	r12	;
    d126:	0c 93       	cmp	#0,	r12	;r3 As==00
    d128:	fd 23       	jnz	$-4      	;abs 0xd124
        ;
}
    d12a:	30 41       	ret			

0000d12c <UART_critSend>:
 *  and use UART status register polling instead of interrupts.
 */
void UART_critSend(uint8_t* txBuf, uint16_t size) {

    // Block until prior transmission has completed
    while (UART_SM.isTxBusy)
    d12c:	3f 40 98 1c 	mov	#7320,	r15	;#0x1c98
    d130:	6e 4f       	mov.b	@r15,	r14	;
    d132:	0e 93       	cmp	#0,	r14	;r3 As==00
    d134:	fd 23       	jnz	$-4      	;abs 0xd130
        ;

    // Set up for start of transmission
    UART_SM.isTxBusy = TRUE;
    d136:	3e 40 98 1c 	mov	#7320,	r14	;#0x1c98
    d13a:	de 43 00 00 	mov.b	#1,	0(r14)	;r3 As==01
    UART_SM.txPtr = txBuf;
    d13e:	8e 4c 02 00 	mov	r12,	2(r14)	;
    UART_SM.txBytesRemaining = size;
    d142:	8e 4d 04 00 	mov	r13,	4(r14)	;

    UCA0IV &= ~(USCI_UART_UCTXIFG); // Clear byte completion flag
    d146:	a2 c2 de 05 	bic	#4,	&0x05de	;r2 As==10

    while (UART_SM.txBytesRemaining--) {
    d14a:	1c 4e 04 00 	mov	4(r14),	r12	;
    d14e:	0d 4c       	mov	r12,	r13	;
    d150:	3d 53       	add	#-1,	r13	;r3 As==11
    d152:	8e 4d 04 00 	mov	r13,	4(r14)	;
    d156:	0c 93       	cmp	#0,	r12	;r3 As==00
    d158:	19 24       	jz	$+52     	;abs 0xd18c
        UCA0TXBUF = *(UART_SM.txPtr++); // Load in next byte
    d15a:	0c 4e       	mov	r14,	r12	;
    d15c:	1d 4c 02 00 	mov	2(r12),	r13	;
    d160:	0e 4d       	mov	r13,	r14	;
    d162:	1e 53       	inc	r14		;
    d164:	8c 4e 02 00 	mov	r14,	2(r12)	;
    d168:	6d 4d       	mov.b	@r13,	r13	;
    d16a:	3d f0 ff 00 	and	#255,	r13	;#0x00ff
    d16e:	82 4d ce 05 	mov	r13,	&0x05ce	;
        while (!(UCA0IFG & UCTXIFG))
    d172:	a2 b3 dc 05 	bit	#2,	&0x05dc	;r3 As==10
    d176:	fd 27       	jz	$-4      	;abs 0xd172
            ; // Wait for byte transmission to complete
        UCA0IFG &= ~(UCTXIFG); // Clear byte completion flag
    d178:	a2 c3 dc 05 	bic	#2,	&0x05dc	;r3 As==10
    UART_SM.txPtr = txBuf;
    UART_SM.txBytesRemaining = size;

    UCA0IV &= ~(USCI_UART_UCTXIFG); // Clear byte completion flag

    while (UART_SM.txBytesRemaining--) {
    d17c:	1d 4c 04 00 	mov	4(r12),	r13	;
    d180:	0e 4d       	mov	r13,	r14	;
    d182:	3e 53       	add	#-1,	r14	;r3 As==11
    d184:	8c 4e 04 00 	mov	r14,	4(r12)	;
    d188:	0d 93       	cmp	#0,	r13	;r3 As==00
    d18a:	e8 23       	jnz	$-46     	;abs 0xd15c
        while (!(UCA0IFG & UCTXIFG))
            ; // Wait for byte transmission to complete
        UCA0IFG &= ~(UCTXIFG); // Clear byte completion flag
    }

    UART_SM.isTxBusy = FALSE;
    d18c:	c2 43 98 1c 	mov.b	#0,	&0x1c98	;r3 As==00
}
    d190:	30 41       	ret			

0000d192 <UART_isTxBusy>:
/**
 * Return true if UART TX module is in the middle of an operation, false if not.
 */
uint8_t UART_isTxBusy() {
    return UART_SM.isTxBusy;
}
    d192:	5c 42 98 1c 	mov.b	&0x1c98,r12	;0x1c98
    d196:	30 41       	ret			

0000d198 <UART_asyncReceive>:
 * @param size the number of bytes to receive
 */
void UART_asyncReceive(uint8_t* rxBuf, uint16_t size) {

    // Block until prior reception has completed
    while (UART_SM.isRxBusy)
    d198:	3f 40 98 1c 	mov	#7320,	r15	;#0x1c98
    d19c:	5e 4f 06 00 	mov.b	6(r15),	r14	;
    d1a0:	0e 93       	cmp	#0,	r14	;r3 As==00
    d1a2:	fc 23       	jnz	$-6      	;abs 0xd19c
        ;

    // Set up for start of reception
    UART_SM.isRxBusy = TRUE;
    d1a4:	3e 40 98 1c 	mov	#7320,	r14	;#0x1c98
    d1a8:	de 43 06 00 	mov.b	#1,	6(r14)	;r3 As==01
    UART_SM.rxPtr = rxBuf;
    d1ac:	8e 4c 08 00 	mov	r12,	8(r14)	;
    UART_SM.rxBytesRemaining = size;
    d1b0:	8e 4d 0a 00 	mov	r13,	10(r14)	; 0x000a

    UCA0IFG &= ~(UCRXIFG); // Clear byte completion flag
    d1b4:	92 c3 dc 05 	bic	#1,	&0x05dc	;r3 As==01

    UCA0IE |= UCRXIE; // Enable USCI_A0 RX interrupt
    d1b8:	92 d3 da 05 	bis	#1,	&0x05da	;r3 As==01

    // The rest of the reception will be completed by the RX ISR (which
    //  will wake after each byte has been received), and the isBusy flag
    //  will be cleared when done.
}
    d1bc:	30 41       	ret			

0000d1be <UART_receive>:
 * @param size the number of bytes to receive
 *
 */
void UART_receive(uint8_t* rxBuf, uint16_t size) {

    UART_asyncReceive(rxBuf, size);
    d1be:	b0 12 98 d1 	call	#53656		;#0xd198

    // Block until complete
    while (UART_SM.isRxBusy)
    d1c2:	3d 40 98 1c 	mov	#7320,	r13	;#0x1c98
    d1c6:	5c 4d 06 00 	mov.b	6(r13),	r12	;
    d1ca:	0c 93       	cmp	#0,	r12	;r3 As==00
    d1cc:	fc 23       	jnz	$-6      	;abs 0xd1c6
        ;
}
    d1ce:	30 41       	ret			

0000d1d0 <UART_critReceive>:
 *  and use UART status register polling instead of interrupts.
 */
void UART_critReceive(uint8_t* rxBuf, uint16_t size) {

    // Block until prior reception has completed
    while (UART_SM.isRxBusy)
    d1d0:	3f 40 98 1c 	mov	#7320,	r15	;#0x1c98
    d1d4:	5e 4f 06 00 	mov.b	6(r15),	r14	;
    d1d8:	0e 93       	cmp	#0,	r14	;r3 As==00
    d1da:	fc 23       	jnz	$-6      	;abs 0xd1d4
        ;

    // Set up for start of reception
    UART_SM.isRxBusy = TRUE;
    d1dc:	3e 40 98 1c 	mov	#7320,	r14	;#0x1c98
    d1e0:	de 43 06 00 	mov.b	#1,	6(r14)	;r3 As==01
    UART_SM.rxPtr = rxBuf;
    d1e4:	8e 4c 08 00 	mov	r12,	8(r14)	;
    UART_SM.rxBytesRemaining = size;
    d1e8:	8e 4d 0a 00 	mov	r13,	10(r14)	; 0x000a

    UCA0IFG &= ~(UCRXIFG); // Clear byte completion flag
    d1ec:	92 c3 dc 05 	bic	#1,	&0x05dc	;r3 As==01

    while (UART_SM.rxBytesRemaining--) {
    d1f0:	1c 4e 0a 00 	mov	10(r14),r12	;0x0000a
    d1f4:	0d 4c       	mov	r12,	r13	;
    d1f6:	3d 53       	add	#-1,	r13	;r3 As==11
    d1f8:	8e 4d 0a 00 	mov	r13,	10(r14)	; 0x000a
    d1fc:	0c 93       	cmp	#0,	r12	;r3 As==00
    d1fe:	18 24       	jz	$+50     	;abs 0xd230
        while (!(UCA0IFG & UCRXIFG))
            ; // Wait for byte reception to complete
        UCA0IFG &= ~(UCRXIFG); // Clear byte completion flag

        uint8_t rec = UCA0RXBUF; // Read next byte
        *(UART_SM.rxPtr++) = rec; // Store byte
    d200:	0c 4e       	mov	r14,	r12	;
    UART_SM.rxBytesRemaining = size;

    UCA0IFG &= ~(UCRXIFG); // Clear byte completion flag

    while (UART_SM.rxBytesRemaining--) {
        while (!(UCA0IFG & UCRXIFG))
    d202:	92 b3 dc 05 	bit	#1,	&0x05dc	;r3 As==01
    d206:	fd 27       	jz	$-4      	;abs 0xd202
            ; // Wait for byte reception to complete
        UCA0IFG &= ~(UCRXIFG); // Clear byte completion flag
    d208:	92 c3 dc 05 	bic	#1,	&0x05dc	;r3 As==01

        uint8_t rec = UCA0RXBUF; // Read next byte
    d20c:	1e 42 cc 05 	mov	&0x05cc,r14	;0x05cc
        *(UART_SM.rxPtr++) = rec; // Store byte
    d210:	1d 4c 08 00 	mov	8(r12),	r13	;
    d214:	0f 4d       	mov	r13,	r15	;
    d216:	1f 53       	inc	r15		;
    d218:	8c 4f 08 00 	mov	r15,	8(r12)	;
    while (UART_SM.rxBytesRemaining--) {
        while (!(UCA0IFG & UCRXIFG))
            ; // Wait for byte reception to complete
        UCA0IFG &= ~(UCRXIFG); // Clear byte completion flag

        uint8_t rec = UCA0RXBUF; // Read next byte
    d21c:	cd 4e 00 00 	mov.b	r14,	0(r13)	;
    UART_SM.rxPtr = rxBuf;
    UART_SM.rxBytesRemaining = size;

    UCA0IFG &= ~(UCRXIFG); // Clear byte completion flag

    while (UART_SM.rxBytesRemaining--) {
    d220:	1d 4c 0a 00 	mov	10(r12),r13	;0x0000a
    d224:	0e 4d       	mov	r13,	r14	;
    d226:	3e 53       	add	#-1,	r14	;r3 As==11
    d228:	8c 4e 0a 00 	mov	r14,	10(r12)	; 0x000a
    d22c:	0d 93       	cmp	#0,	r13	;r3 As==00
    d22e:	e9 23       	jnz	$-44     	;abs 0xd202

        uint8_t rec = UCA0RXBUF; // Read next byte
        *(UART_SM.rxPtr++) = rec; // Store byte
    }

    UART_SM.isRxBusy = FALSE;
    d230:	c2 43 9e 1c 	mov.b	#0,	&0x1c9e	;r3 As==00
}
    d234:	30 41       	ret			

0000d236 <UART_isRxBusy>:
/**
 * Return true if UART RX module is in the middle of an operation, false if not.
 */
uint8_t UART_isRxBusy() {
    return UART_SM.isRxBusy;
}
    d236:	5c 42 9e 1c 	mov.b	&0x1c9e,r12	;0x1c9e
    d23a:	30 41       	ret			

0000d23c <UART_isRxDone>:
 * Return true if UART RX module is not in the middle of an operation (e.g. done), false if not.
 *
 * Could be used in combination with UART_asyncReceive.
 */
uint8_t UART_isRxDone() {
    return !(UART_SM.isRxBusy);
    d23c:	5c 42 9e 1c 	mov.b	&0x1c9e,r12	;0x1c9e
    d240:	3c 53       	add	#-1,	r12	;r3 As==11
}
    d242:	5c 03       	rrum	#1,	r12	;
    d244:	4d 18 0c 11 	rpt #14 { rrax.w	r12		;
    d248:	30 41       	ret			

0000d24a <USCI_A0_ISR>:
#elif defined(__GNUC__)
void __attribute__ ((interrupt(USCI_A0_VECTOR))) USCI_A0_ISR (void)
#else
#error Compiler not supported!
#endif
{
    d24a:	3f 15       	pushm	#4,	r15	;16-bit words
    uint8_t rec;

    switch (__even_in_range(UCA0IV, USCI_UART_UCTXCPTIFG)) {
    d24c:	1c 42 de 05 	mov	&0x05de,r12	;0x05de
    d250:	2c 93       	cmp	#2,	r12	;r3 As==10
    d252:	03 24       	jz	$+8      	;abs 0xd25a
    d254:	2c 92       	cmp	#4,	r12	;r2 As==10
    d256:	1e 24       	jz	$+62     	;abs 0xd294
    d258:	38 3c       	jmp	$+114    	;abs 0xd2ca
    case USCI_NONE:
        break;
    case USCI_UART_UCRXIFG:
        if (UART_SM.rxBytesRemaining--) {
    d25a:	3d 40 98 1c 	mov	#7320,	r13	;#0x1c98
    d25e:	1c 4d 0a 00 	mov	10(r13),r12	;0x0000a
    d262:	0e 4c       	mov	r12,	r14	;
    d264:	3e 53       	add	#-1,	r14	;r3 As==11
    d266:	8d 4e 0a 00 	mov	r14,	10(r13)	; 0x000a
    d26a:	0c 93       	cmp	#0,	r12	;r3 As==00
    d26c:	0a 24       	jz	$+22     	;abs 0xd282
            rec = UCA0RXBUF; // Read next byte
    d26e:	1e 42 cc 05 	mov	&0x05cc,r14	;0x05cc
            *(UART_SM.rxPtr++) = rec; // Store byte
    d272:	1c 4d 08 00 	mov	8(r13),	r12	;
    d276:	0f 4c       	mov	r12,	r15	;
    d278:	1f 53       	inc	r15		;
    d27a:	8d 4f 08 00 	mov	r15,	8(r13)	;
    switch (__even_in_range(UCA0IV, USCI_UART_UCTXCPTIFG)) {
    case USCI_NONE:
        break;
    case USCI_UART_UCRXIFG:
        if (UART_SM.rxBytesRemaining--) {
            rec = UCA0RXBUF; // Read next byte
    d27e:	cc 4e 00 00 	mov.b	r14,	0(r12)	;
            *(UART_SM.rxPtr++) = rec; // Store byte
        }

        if (0 == UART_SM.rxBytesRemaining) {
    d282:	1c 42 a2 1c 	mov	&0x1ca2,r12	;0x1ca2
    d286:	0c 93       	cmp	#0,	r12	;r3 As==00
    d288:	20 20       	jnz	$+66     	;abs 0xd2ca
            UCA0IE &= ~(UCRXIE); // Disable USCI_A0 RX interrupt
    d28a:	92 c3 da 05 	bic	#1,	&0x05da	;r3 As==01
            UART_SM.isRxBusy = FALSE;
    d28e:	c2 43 9e 1c 	mov.b	#0,	&0x1c9e	;r3 As==00
    d292:	1b 3c       	jmp	$+56     	;abs 0xd2ca
        }

        break;
    case USCI_UART_UCTXIFG:
        UCA0TXBUF = *(UART_SM.txPtr++); // if interrupt was enabled, there must be bytes
    d294:	3c 40 98 1c 	mov	#7320,	r12	;#0x1c98
    d298:	1d 4c 02 00 	mov	2(r12),	r13	;
    d29c:	0e 4d       	mov	r13,	r14	;
    d29e:	1e 53       	inc	r14		;
    d2a0:	8c 4e 02 00 	mov	r14,	2(r12)	;
    d2a4:	6d 4d       	mov.b	@r13,	r13	;
    d2a6:	3d f0 ff 00 	and	#255,	r13	;#0x00ff
    d2aa:	82 4d ce 05 	mov	r13,	&0x05ce	;
        if (--UART_SM.txBytesRemaining == 0) {
    d2ae:	1d 4c 04 00 	mov	4(r12),	r13	;
    d2b2:	3d 53       	add	#-1,	r13	;r3 As==11
    d2b4:	8c 4d 04 00 	mov	r13,	4(r12)	;
    d2b8:	0d 93       	cmp	#0,	r13	;r3 As==00
    d2ba:	07 20       	jnz	$+16     	;abs 0xd2ca
            // TODO: actually, this wait should probably happen for blocking version only
            while (UCA0STATW & UCBUSY); // wait for last byte to finish transmitting
    d2bc:	d2 b3 ca 05 	bit.b	#1,	&0x05ca	;r3 As==01
    d2c0:	fd 23       	jnz	$-4      	;abs 0xd2bc
            UCA0IE &= ~(UCTXIE); // Disable USCI_A0 TX interrupt
    d2c2:	a2 c3 da 05 	bic	#2,	&0x05da	;r3 As==10
            UART_SM.isTxBusy = FALSE;
    d2c6:	c2 43 98 1c 	mov.b	#0,	&0x1c98	;r3 As==00
    case USCI_UART_UCSTTIFG:
        break;
    case USCI_UART_UCTXCPTIFG:
        break;
    }
}
    d2ca:	3c 17       	popm	#4,	r15	;16-bit words
    d2cc:	00 13       	reti			

0000d2ce <exit>:
    d2ce:	0a 15       	pushm	#1,	r10	;16-bit words
    d2d0:	0a 4c       	mov	r12,	r10	;
    d2d2:	0d 43       	clr	r13		;
    d2d4:	b0 12 ec d2 	call	#53996		;#0xd2ec
    d2d8:	1c 42 38 44 	mov	&0x4438,r12	;0x4438
    d2dc:	1d 4c 14 00 	mov	20(r12),r13	;0x00014
    d2e0:	0d 93       	cmp	#0,	r13	;r3 As==00
    d2e2:	01 24       	jz	$+4      	;abs 0xd2e6
    d2e4:	8d 12       	call	r13		;
    d2e6:	0c 4a       	mov	r10,	r12	;
    d2e8:	b0 12 84 d4 	call	#54404		;#0xd484

0000d2ec <__call_exitprocs>:
    d2ec:	6a 15       	pushm	#7,	r10	;16-bit words
    d2ee:	31 80 0e 00 	sub	#14,	r1	;#0x000e
    d2f2:	81 4c 0a 00 	mov	r12,	10(r1)	; 0x000a
    d2f6:	81 4d 06 00 	mov	r13,	6(r1)	;
    d2fa:	1e 42 38 44 	mov	&0x4438,r14	;0x4438
    d2fe:	3e 50 24 00 	add	#36,	r14	;#0x0024
    d302:	81 4e 0c 00 	mov	r14,	12(r1)	; 0x000c
    d306:	1e 42 38 44 	mov	&0x4438,r14	;0x4438
    d30a:	1a 4e 24 00 	mov	36(r14),r10	;0x00024
    d30e:	16 41 0c 00 	mov	12(r1),	r6	;0x0000c
    d312:	34 40 00 00 	mov	#0,	r4	;
    d316:	0a 93       	cmp	#0,	r10	;r3 As==00
    d318:	77 24       	jz	$+240    	;abs 0xd408
    d31a:	15 4a 44 00 	mov	68(r10),r5	;0x00044
    d31e:	19 4a 02 00 	mov	2(r10),	r9	;
    d322:	08 49       	mov	r9,	r8	;
    d324:	38 53       	add	#-1,	r8	;r3 As==11
    d326:	39 50 ff 7f 	add	#32767,	r9	;#0x7fff
    d32a:	09 59       	rla	r9		;
    d32c:	07 45       	mov	r5,	r7	;
    d32e:	07 59       	add	r9,	r7	;
    d330:	29 52       	add	#4,	r9	;r2 As==10
    d332:	09 5a       	add	r10,	r9	;
    d334:	08 93       	cmp	#0,	r8	;r3 As==00
    d336:	52 38       	jl	$+166    	;abs 0xd3dc
    d338:	81 93 06 00 	cmp	#0,	6(r1)	;r3 As==00
    d33c:	06 24       	jz	$+14     	;abs 0xd34a
    d33e:	05 93       	cmp	#0,	r5	;r3 As==00
    d340:	47 24       	jz	$+144    	;abs 0xd3d0
    d342:	97 91 06 00 	cmp	6(r1),	64(r7)	; 0x0040
    d346:	40 00 
    d348:	43 20       	jnz	$+136    	;abs 0xd3d0
    d34a:	2f 49       	mov	@r9,	r15	;
    d34c:	1c 4a 02 00 	mov	2(r10),	r12	;
    d350:	3c 53       	add	#-1,	r12	;r3 As==11
    d352:	08 9c       	cmp	r12,	r8	;
    d354:	03 20       	jnz	$+8      	;abs 0xd35c
    d356:	8a 48 02 00 	mov	r8,	2(r10)	;
    d35a:	02 3c       	jmp	$+6      	;abs 0xd360
    d35c:	89 43 00 00 	mov	#0,	0(r9)	;r3 As==00
    d360:	0f 93       	cmp	#0,	r15	;r3 As==00
    d362:	36 24       	jz	$+110    	;abs 0xd3d0
    d364:	91 4a 02 00 	mov	2(r10),	8(r1)	;
    d368:	08 00 
    d36a:	05 93       	cmp	#0,	r5	;r3 As==00
    d36c:	18 24       	jz	$+50     	;abs 0xd39e
    d36e:	1c 43       	mov	#1,	r12	;r3 As==01
    d370:	0d 48       	mov	r8,	r13	;
    d372:	81 4f 00 00 	mov	r15,	0(r1)	;
    d376:	b0 12 34 d4 	call	#54324		;#0xd434
    d37a:	0d 4c       	mov	r12,	r13	;
    d37c:	0e 4c       	mov	r12,	r14	;
    d37e:	4e 18 0e 11 	rpt #15 { rrax.w	r14		;
    d382:	81 4d 02 00 	mov	r13,	2(r1)	;
    d386:	81 4e 04 00 	mov	r14,	4(r1)	;
    d38a:	1b 45 80 00 	mov	128(r5),r11	;0x00080
    d38e:	0b fc       	and	r12,	r11	;
    d390:	1d 45 82 00 	mov	130(r5),r13	;0x00082
    d394:	0d fe       	and	r14,	r13	;
    d396:	0d db       	bis	r11,	r13	;
    d398:	2f 41       	mov	@r1,	r15	;
    d39a:	0d 93       	cmp	#0,	r13	;r3 As==00
    d39c:	02 20       	jnz	$+6      	;abs 0xd3a2
    d39e:	8f 12       	call	r15		;
    d3a0:	10 3c       	jmp	$+34     	;abs 0xd3c2
    d3a2:	1c f5 84 00 	and	132(r5),r12	;0x00084
    d3a6:	1d 45 86 00 	mov	134(r5),r13	;0x00086
    d3aa:	1d f1 04 00 	and	4(r1),	r13	;
    d3ae:	0c dd       	bis	r13,	r12	;
    d3b0:	0c 93       	cmp	#0,	r12	;r3 As==00
    d3b2:	05 20       	jnz	$+12     	;abs 0xd3be
    d3b4:	1c 41 0a 00 	mov	10(r1),	r12	;0x0000a
    d3b8:	2d 47       	mov	@r7,	r13	;
    d3ba:	8f 12       	call	r15		;
    d3bc:	02 3c       	jmp	$+6      	;abs 0xd3c2
    d3be:	2c 47       	mov	@r7,	r12	;
    d3c0:	8f 12       	call	r15		;
    d3c2:	91 9a 02 00 	cmp	2(r10),	8(r1)	;
    d3c6:	08 00 
    d3c8:	9e 23       	jnz	$-194    	;abs 0xd306
    d3ca:	86 9a 00 00 	cmp	r10,	0(r6)	;
    d3ce:	9b 23       	jnz	$-200    	;abs 0xd306
    d3d0:	38 53       	add	#-1,	r8	;r3 As==11
    d3d2:	37 50 fe ff 	add	#65534,	r7	;#0xfffe
    d3d6:	39 50 fe ff 	add	#65534,	r9	;#0xfffe
    d3da:	ac 3f       	jmp	$-166    	;abs 0xd334
    d3dc:	04 93       	cmp	#0,	r4	;r3 As==00
    d3de:	14 24       	jz	$+42     	;abs 0xd408
    d3e0:	8a 93 02 00 	cmp	#0,	2(r10)	;r3 As==00
    d3e4:	0e 20       	jnz	$+30     	;abs 0xd402
    d3e6:	2c 4a       	mov	@r10,	r12	;
    d3e8:	0c 93       	cmp	#0,	r12	;r3 As==00
    d3ea:	0b 24       	jz	$+24     	;abs 0xd402
    d3ec:	86 4c 00 00 	mov	r12,	0(r6)	;
    d3f0:	05 93       	cmp	#0,	r5	;r3 As==00
    d3f2:	02 24       	jz	$+6      	;abs 0xd3f8
    d3f4:	0c 45       	mov	r5,	r12	;
    d3f6:	84 12       	call	r4		;
    d3f8:	0c 4a       	mov	r10,	r12	;
    d3fa:	b0 12 00 00 	call	#0		;
    d3fe:	2a 46       	mov	@r6,	r10	;
    d400:	8a 3f       	jmp	$-234    	;abs 0xd316
    d402:	06 4a       	mov	r10,	r6	;
    d404:	2a 4a       	mov	@r10,	r10	;
    d406:	87 3f       	jmp	$-240    	;abs 0xd316
    d408:	31 50 0e 00 	add	#14,	r1	;#0x000e
    d40c:	64 17       	popm	#7,	r10	;16-bit words
    d40e:	30 41       	ret			

0000d410 <__mspabi_slli_15>:
    d410:	0c 5c       	rla	r12		;

0000d412 <__mspabi_slli_14>:
    d412:	0c 5c       	rla	r12		;

0000d414 <__mspabi_slli_13>:
    d414:	0c 5c       	rla	r12		;

0000d416 <__mspabi_slli_12>:
    d416:	0c 5c       	rla	r12		;

0000d418 <__mspabi_slli_11>:
    d418:	0c 5c       	rla	r12		;

0000d41a <__mspabi_slli_10>:
    d41a:	0c 5c       	rla	r12		;

0000d41c <__mspabi_slli_9>:
    d41c:	0c 5c       	rla	r12		;

0000d41e <__mspabi_slli_8>:
    d41e:	0c 5c       	rla	r12		;

0000d420 <__mspabi_slli_7>:
    d420:	0c 5c       	rla	r12		;

0000d422 <__mspabi_slli_6>:
    d422:	0c 5c       	rla	r12		;

0000d424 <__mspabi_slli_5>:
    d424:	0c 5c       	rla	r12		;

0000d426 <__mspabi_slli_4>:
    d426:	0c 5c       	rla	r12		;

0000d428 <__mspabi_slli_3>:
    d428:	0c 5c       	rla	r12		;

0000d42a <__mspabi_slli_2>:
    d42a:	0c 5c       	rla	r12		;

0000d42c <__mspabi_slli_1>:
    d42c:	0c 5c       	rla	r12		;
    d42e:	30 41       	ret			
    d430:	3d 53       	add	#-1,	r13	;r3 As==11
    d432:	0c 5c       	rla	r12		;

0000d434 <__mspabi_slli>:
    d434:	0d 93       	cmp	#0,	r13	;r3 As==00
    d436:	fc 23       	jnz	$-6      	;abs 0xd430
    d438:	30 41       	ret			

0000d43a <__mspabi_slll_15>:
    d43a:	0c 5c       	rla	r12		;
    d43c:	0d 6d       	rlc	r13		;

0000d43e <__mspabi_slll_14>:
    d43e:	0c 5c       	rla	r12		;
    d440:	0d 6d       	rlc	r13		;

0000d442 <__mspabi_slll_13>:
    d442:	0c 5c       	rla	r12		;
    d444:	0d 6d       	rlc	r13		;

0000d446 <__mspabi_slll_12>:
    d446:	0c 5c       	rla	r12		;
    d448:	0d 6d       	rlc	r13		;

0000d44a <__mspabi_slll_11>:
    d44a:	0c 5c       	rla	r12		;
    d44c:	0d 6d       	rlc	r13		;

0000d44e <__mspabi_slll_10>:
    d44e:	0c 5c       	rla	r12		;
    d450:	0d 6d       	rlc	r13		;

0000d452 <__mspabi_slll_9>:
    d452:	0c 5c       	rla	r12		;
    d454:	0d 6d       	rlc	r13		;

0000d456 <__mspabi_slll_8>:
    d456:	0c 5c       	rla	r12		;
    d458:	0d 6d       	rlc	r13		;

0000d45a <__mspabi_slll_7>:
    d45a:	0c 5c       	rla	r12		;
    d45c:	0d 6d       	rlc	r13		;

0000d45e <__mspabi_slll_6>:
    d45e:	0c 5c       	rla	r12		;
    d460:	0d 6d       	rlc	r13		;

0000d462 <__mspabi_slll_5>:
    d462:	0c 5c       	rla	r12		;
    d464:	0d 6d       	rlc	r13		;

0000d466 <__mspabi_slll_4>:
    d466:	0c 5c       	rla	r12		;
    d468:	0d 6d       	rlc	r13		;

0000d46a <__mspabi_slll_3>:
    d46a:	0c 5c       	rla	r12		;
    d46c:	0d 6d       	rlc	r13		;

0000d46e <__mspabi_slll_2>:
    d46e:	0c 5c       	rla	r12		;
    d470:	0d 6d       	rlc	r13		;

0000d472 <__mspabi_slll_1>:
    d472:	0c 5c       	rla	r12		;
    d474:	0d 6d       	rlc	r13		;
    d476:	30 41       	ret			
    d478:	3e 53       	add	#-1,	r14	;r3 As==11
    d47a:	0c 5c       	rla	r12		;
    d47c:	0d 6d       	rlc	r13		;

0000d47e <__mspabi_slll>:
    d47e:	0e 93       	cmp	#0,	r14	;r3 As==00
    d480:	fb 23       	jnz	$-8      	;abs 0xd478
    d482:	30 41       	ret			

0000d484 <_exit>:
    d484:	ff 3f       	jmp	$+0      	;abs 0xd484

0000d486 <open>:
    d486:	b0 12 e4 d4 	call	#54500		;#0xd4e4
    d48a:	bc 40 58 00 	mov	#88,	0(r12)	;#0x0058
    d48e:	00 00 
    d490:	3c 43       	mov	#-1,	r12	;r3 As==11
    d492:	30 41       	ret			

0000d494 <close>:
    d494:	b0 12 e4 d4 	call	#54500		;#0xd4e4
    d498:	bc 40 58 00 	mov	#88,	0(r12)	;#0x0058
    d49c:	00 00 
    d49e:	3c 43       	mov	#-1,	r12	;r3 As==11
    d4a0:	30 41       	ret			

0000d4a2 <read>:
    d4a2:	b0 12 e4 d4 	call	#54500		;#0xd4e4
    d4a6:	bc 40 58 00 	mov	#88,	0(r12)	;#0x0058
    d4aa:	00 00 
    d4ac:	3c 43       	mov	#-1,	r12	;r3 As==11
    d4ae:	30 41       	ret			

0000d4b0 <fstat>:
    d4b0:	b0 12 e4 d4 	call	#54500		;#0xd4e4
    d4b4:	bc 40 58 00 	mov	#88,	0(r12)	;#0x0058
    d4b8:	00 00 
    d4ba:	3c 43       	mov	#-1,	r12	;r3 As==11
    d4bc:	30 41       	ret			

0000d4be <lseek>:
    d4be:	b0 12 e4 d4 	call	#54500		;#0xd4e4
    d4c2:	bc 40 58 00 	mov	#88,	0(r12)	;#0x0058
    d4c6:	00 00 
    d4c8:	3c 43       	mov	#-1,	r12	;r3 As==11
    d4ca:	30 41       	ret			

0000d4cc <kill>:
    d4cc:	b0 12 e4 d4 	call	#54500		;#0xd4e4
    d4d0:	bc 40 58 00 	mov	#88,	0(r12)	;#0x0058
    d4d4:	00 00 
    d4d6:	3c 43       	mov	#-1,	r12	;r3 As==11
    d4d8:	30 41       	ret			

0000d4da <_isatty>:
    d4da:	1c 43       	mov	#1,	r12	;r3 As==01
    d4dc:	30 41       	ret			

0000d4de <getpid>:
    d4de:	3c 40 2a 00 	mov	#42,	r12	;#0x002a
    d4e2:	30 41       	ret			

0000d4e4 <__errno>:
    d4e4:	1c 42 06 1c 	mov	&0x1c06,r12	;0x1c06
    d4e8:	30 41       	ret			

0000d4ea <memmove>:
    d4ea:	0a 15       	pushm	#1,	r10	;16-bit words
    d4ec:	0d 9c       	cmp	r12,	r13	;
    d4ee:	10 2c       	jc	$+34     	;abs 0xd510
    d4f0:	0b 4d       	mov	r13,	r11	;
    d4f2:	0b 5e       	add	r14,	r11	;
    d4f4:	0c 9b       	cmp	r11,	r12	;
    d4f6:	0c 2c       	jc	$+26     	;abs 0xd510
    d4f8:	0d 4e       	mov	r14,	r13	;
    d4fa:	3d 53       	add	#-1,	r13	;r3 As==11
    d4fc:	3d 93       	cmp	#-1,	r13	;r3 As==11
    d4fe:	13 24       	jz	$+40     	;abs 0xd526
    d500:	0f 4d       	mov	r13,	r15	;
    d502:	0f 8e       	sub	r14,	r15	;
    d504:	0f 5b       	add	r11,	r15	;
    d506:	0a 4c       	mov	r12,	r10	;
    d508:	0a 5d       	add	r13,	r10	;
    d50a:	ea 4f 00 00 	mov.b	@r15,	0(r10)	;
    d50e:	f5 3f       	jmp	$-20     	;abs 0xd4fa
    d510:	0f 43       	clr	r15		;
    d512:	0f 9e       	cmp	r14,	r15	;
    d514:	08 24       	jz	$+18     	;abs 0xd526
    d516:	0a 4d       	mov	r13,	r10	;
    d518:	0a 5f       	add	r15,	r10	;
    d51a:	0b 4c       	mov	r12,	r11	;
    d51c:	0b 5f       	add	r15,	r11	;
    d51e:	eb 4a 00 00 	mov.b	@r10,	0(r11)	;
    d522:	1f 53       	inc	r15		;
    d524:	f6 3f       	jmp	$-18     	;abs 0xd512
    d526:	0a 17       	popm	#1,	r10	;16-bit words
    d528:	30 41       	ret			

0000d52a <memset>:
    d52a:	0f 4c       	mov	r12,	r15	;
    d52c:	0e 5c       	add	r12,	r14	;
    d52e:	0f 9e       	cmp	r14,	r15	;
    d530:	04 24       	jz	$+10     	;abs 0xd53a
    d532:	cf 4d 00 00 	mov.b	r13,	0(r15)	;
    d536:	1f 53       	inc	r15		;
    d538:	fa 3f       	jmp	$-10     	;abs 0xd52e
    d53a:	30 41       	ret			

0000d53c <__do_global_ctors_aux>:
    d53c:	0a 15       	pushm	#1,	r10	;16-bit words
    d53e:	1c 42 44 44 	mov	&0x4444,r12	;0x4444
    d542:	3c 93       	cmp	#-1,	r12	;r3 As==11
    d544:	08 24       	jz	$+18     	;abs 0xd556
    d546:	3a 40 44 44 	mov	#17476,	r10	;#0x4444
    d54a:	8c 12       	call	r12		;
    d54c:	3a 50 fe ff 	add	#65534,	r10	;#0xfffe
    d550:	2c 4a       	mov	@r10,	r12	;
    d552:	3c 93       	cmp	#-1,	r12	;r3 As==11
    d554:	fa 23       	jnz	$-10     	;abs 0xd54a
    d556:	0a 17       	popm	#1,	r10	;16-bit words
    d558:	30 41       	ret			

0000d55a <call___do_global_ctors_aux>:
    d55a:	30 41       	ret			

0000d55c <__msp430_init>:
    d55c:	b0 12 a8 af 	call	#44968		;#0xafa8
    d560:	b0 12 3c d5 	call	#54588		;#0xd53c
    d564:	b0 12 e8 ae 	call	#44776		;#0xaee8
    d568:	b0 12 dc ae 	call	#44764		;#0xaedc
    d56c:	30 41       	ret			

0000d56e <__msp430_fini>:
    d56e:	b0 12 f4 ae 	call	#44788		;#0xaef4
    d572:	b0 12 5a af 	call	#44890		;#0xaf5a
    d576:	30 41       	ret			
