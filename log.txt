
templog.out:     file format elf32-msp430


Disassembly of section __interrupt_vector_49:

0000fff0 <__interrupt_vector_49>:
    fff0:	62 65       	interrupt service routine at 0x6562

Disassembly of section .text:

00005200 <__crt0_start>:
    5200:	31 40 00 24 	mov	#9216,	r1	;#0x2400

00005204 <__crt0_init_bss>:
    5204:	3c 40 7e 1c 	mov	#7294,	r12	;#0x1c7e
    5208:	0d 43       	clr	r13		;
    520a:	3e 40 22 00 	mov	#34,	r14	;#0x0022
    520e:	b0 12 42 68 	call	#26690		;#0x6842

00005212 <__crt0_movedata>:
    5212:	3c 40 00 1c 	mov	#7168,	r12	;#0x1c00
    5216:	3d 40 7e 51 	mov	#20862,	r13	;#0x517e
    521a:	0d 9c       	cmp	r12,	r13	;
    521c:	04 24       	jz	$+10     	;abs 0x5226
    521e:	3e 40 7e 00 	mov	#126,	r14	;#0x007e
    5222:	b0 12 02 68 	call	#26626		;#0x6802

00005226 <__crt0_call_init_then_main>:
    5226:	b0 12 74 68 	call	#26740		;#0x6874
    522a:	0c 43       	clr	r12		;
    522c:	b0 12 f4 60 	call	#24820		;#0x60f4

00005230 <_msp430_run_init_array>:
    5230:	34 40 98 44 	mov	#17560,	r4	;#0x4498
    5234:	35 40 98 44 	mov	#17560,	r5	;#0x4498
    5238:	26 43       	mov	#2,	r6	;r3 As==10
    523a:	0d 3c       	jmp	$+28     	;abs 0x5256

0000523c <_msp430_run_preinit_array>:
    523c:	34 40 98 44 	mov	#17560,	r4	;#0x4498
    5240:	35 40 98 44 	mov	#17560,	r5	;#0x4498
    5244:	26 43       	mov	#2,	r6	;r3 As==10
    5246:	07 3c       	jmp	$+16     	;abs 0x5256

00005248 <_msp430_run_fini_array>:
    5248:	34 40 98 44 	mov	#17560,	r4	;#0x4498
    524c:	35 40 98 44 	mov	#17560,	r5	;#0x4498
    5250:	36 40 fe ff 	mov	#65534,	r6	;#0xfffe
    5254:	00 3c       	jmp	$+2      	;abs 0x5256

00005256 <_msp430_run_array>:
    5256:	05 94       	cmp	r4,	r5	;
    5258:	05 24       	jz	$+12     	;abs 0x5264
    525a:	27 44       	mov	@r4,	r7	;
    525c:	04 56       	add	r6,	r4	;
    525e:	a7 12       	call	@r7		;
    5260:	10 40 f4 ff 	br	0xfff4		;PC rel. 0x5256

00005264 <_msp430_run_done>:
    5264:	30 41       	ret			

00005266 <deregister_tm_clones>:
    5266:	3c 40 90 68 	mov	#26768,	r12	;#0x6890
    526a:	3c 80 8f 68 	sub	#26767,	r12	;#0x688f
    526e:	2d 43       	mov	#2,	r13	;r3 As==10
    5270:	0d 9c       	cmp	r12,	r13	;
    5272:	07 2c       	jc	$+16     	;abs 0x5282
    5274:	3d 40 00 00 	mov	#0,	r13	;
    5278:	0d 93       	cmp	#0,	r13	;r3 As==00
    527a:	03 24       	jz	$+8      	;abs 0x5282
    527c:	3c 40 90 68 	mov	#26768,	r12	;#0x6890
    5280:	8d 12       	call	r13		;
    5282:	30 41       	ret			

00005284 <register_tm_clones>:
    5284:	3d 40 90 68 	mov	#26768,	r13	;#0x6890
    5288:	3d 80 90 68 	sub	#26768,	r13	;#0x6890
    528c:	0d 11       	rra	r13		;
    528e:	0c 4d       	mov	r13,	r12	;
    5290:	5c 03       	rrum	#1,	r12	;
    5292:	4d 18 0c 11 	rpt #14 { rrax.w	r12		;
    5296:	0d 5c       	add	r12,	r13	;
    5298:	0d 11       	rra	r13		;
    529a:	0d 93       	cmp	#0,	r13	;r3 As==00
    529c:	07 24       	jz	$+16     	;abs 0x52ac
    529e:	3e 40 00 00 	mov	#0,	r14	;
    52a2:	0e 93       	cmp	#0,	r14	;r3 As==00
    52a4:	03 24       	jz	$+8      	;abs 0x52ac
    52a6:	3c 40 90 68 	mov	#26768,	r12	;#0x6890
    52aa:	8e 12       	call	r14		;
    52ac:	30 41       	ret			

000052ae <__do_global_dtors_aux>:
    52ae:	0a 15       	pushm	#1,	r10	;16-bit words
    52b0:	c2 93 7e 1c 	cmp.b	#0,	&0x1c7e	;r3 As==00
    52b4:	20 20       	jnz	$+66     	;abs 0x52f6
    52b6:	1c 42 80 1c 	mov	&0x1c80,r12	;0x1c80
    52ba:	3a 40 a2 44 	mov	#17570,	r10	;#0x44a2
    52be:	3a 80 a0 44 	sub	#17568,	r10	;#0x44a0
    52c2:	0a 11       	rra	r10		;
    52c4:	3a 53       	add	#-1,	r10	;r3 As==11
    52c6:	0c 9a       	cmp	r10,	r12	;
    52c8:	0b 2c       	jc	$+24     	;abs 0x52e0
    52ca:	1c 53       	inc	r12		;
    52cc:	82 4c 80 1c 	mov	r12,	&0x1c80	;
    52d0:	0c 5c       	rla	r12		;
    52d2:	1c 4c a0 44 	mov	17568(r12),r12	;0x044a0
    52d6:	8c 12       	call	r12		;
    52d8:	1c 42 80 1c 	mov	&0x1c80,r12	;0x1c80
    52dc:	0c 9a       	cmp	r10,	r12	;
    52de:	f5 2b       	jnc	$-20     	;abs 0x52ca
    52e0:	b0 12 66 52 	call	#21094		;#0x5266
    52e4:	3d 40 00 00 	mov	#0,	r13	;
    52e8:	0d 93       	cmp	#0,	r13	;r3 As==00
    52ea:	03 24       	jz	$+8      	;abs 0x52f2
    52ec:	3c 40 94 44 	mov	#17556,	r12	;#0x4494
    52f0:	8d 12       	call	r13		;
    52f2:	d2 43 7e 1c 	mov.b	#1,	&0x1c7e	;r3 As==01
    52f6:	0a 17       	popm	#1,	r10	;16-bit words
    52f8:	30 41       	ret			

000052fa <call___do_global_dtors_aux>:
    52fa:	30 41       	ret			

000052fc <frame_dummy>:
    52fc:	3e 40 00 00 	mov	#0,	r14	;
    5300:	0e 93       	cmp	#0,	r14	;r3 As==00
    5302:	05 24       	jz	$+12     	;abs 0x530e
    5304:	3c 40 94 44 	mov	#17556,	r12	;#0x4494
    5308:	3d 40 82 1c 	mov	#7298,	r13	;#0x1c82
    530c:	8e 12       	call	r14		;
    530e:	3c 40 00 1c 	mov	#7168,	r12	;#0x1c00
    5312:	8c 93 00 00 	cmp	#0,	0(r12)	;r3 As==00
    5316:	03 20       	jnz	$+8      	;abs 0x531e
    5318:	b0 12 84 52 	call	#21124		;#0x5284
    531c:	30 41       	ret			
    531e:	3d 40 00 00 	mov	#0,	r13	;
    5322:	0d 93       	cmp	#0,	r13	;r3 As==00
    5324:	f9 27       	jz	$-12     	;abs 0x5318
    5326:	8d 12       	call	r13		;
    5328:	f7 3f       	jmp	$-16     	;abs 0x5318

0000532a <call_frame_dummy>:
    532a:	30 41       	ret			

0000532c <TimerB1_ISR>:
    532c:	04 12       	push	r4		;
    532e:	04 41       	mov	r1,	r4	;
    5330:	0c 12       	push	r12		;
    5332:	1c 42 c0 03 	mov	&0x03c0,r12	;0x03c0
    5336:	3c f0 fd ff 	and	#65533,	r12	;#0xfffd
    533a:	82 4c c0 03 	mov	r12,	&0x03c0	;
    533e:	1c 42 c0 03 	mov	&0x03c0,r12	;0x03c0
    5342:	0c 93       	cmp	#0,	r12	;r3 As==00
    5344:	17 24       	jz	$+48     	;abs 0x5374
    5346:	00 3c       	jmp	$+2      	;abs 0x5348
    5348:	1c 42 90 1c 	mov	&0x1c90,r12	;0x1c90
    534c:	1c 53       	inc	r12		;
    534e:	82 4c 90 1c 	mov	r12,	&0x1c90	;
    5352:	1c 42 c0 03 	mov	&0x03c0,r12	;0x03c0
    5356:	2c d2       	bis	#4,	r12	;r2 As==10
    5358:	82 4c c0 03 	mov	r12,	&0x03c0	;
    535c:	1c 42 c0 03 	mov	&0x03c0,r12	;0x03c0
    5360:	2c d3       	bis	#2,	r12	;r3 As==10
    5362:	82 4c c0 03 	mov	r12,	&0x03c0	;
    5366:	1c 42 c0 03 	mov	&0x03c0,r12	;0x03c0
    536a:	3c f0 fe ff 	and	#65534,	r12	;#0xfffe
    536e:	82 4c c0 03 	mov	r12,	&0x03c0	;
    5372:	00 3c       	jmp	$+2      	;abs 0x5374
    5374:	3c 41       	pop	r12		;
    5376:	34 41       	pop	r4		;
    5378:	00 13       	reti			
	...

0000537c <print_log>:
    537c:	04 12       	push	r4		;
    537e:	04 41       	mov	r1,	r4	;
    5380:	31 80 16 00 	sub	#22,	r1	;#0x0016
    5384:	0c 4f       	mov	r15,	r12	;
    5386:	84 4f fe ff 	mov	r15,	-2(r4)	; 0xfffe
    538a:	1d 4f 82 00 	mov	130(r15),r13	;0x00082
    538e:	1f 4f 80 00 	mov	128(r15),r15	;0x00080
    5392:	0e 41       	mov	r1,	r14	;
    5394:	8e 4f 04 00 	mov	r15,	4(r14)	;
    5398:	8e 4d 02 00 	mov	r13,	2(r14)	;
    539c:	be 40 00 44 	mov	#17408,	0(r14)	;#0x4400
    53a0:	00 00 
    53a2:	84 4c fa ff 	mov	r12,	-6(r4)	; 0xfffa
    53a6:	b0 12 d6 61 	call	#25046		;#0x61d6
    53aa:	0c 41       	mov	r1,	r12	;
    53ac:	bc 40 1d 44 	mov	#17437,	0(r12)	;#0x441d
    53b0:	00 00 
    53b2:	84 4f f8 ff 	mov	r15,	-8(r4)	; 0xfff8
    53b6:	b0 12 d6 61 	call	#25046		;#0x61d6
    53ba:	84 43 fc ff 	mov	#0,	-4(r4)	;r3 As==00, 0xfffc
    53be:	84 4f f6 ff 	mov	r15,	-10(r4)	; 0xfff6
    53c2:	00 3c       	jmp	$+2      	;abs 0x53c4
    53c4:	1c 44 fc ff 	mov	-4(r4),	r12	;
    53c8:	1d 44 fe ff 	mov	-2(r4),	r13	;
    53cc:	1d 4d 80 00 	mov	128(r13),r13	;0x00080
    53d0:	0c 9d       	cmp	r13,	r12	;
    53d2:	2e 2c       	jc	$+94     	;abs 0x5430
    53d4:	00 3c       	jmp	$+2      	;abs 0x53d6
    53d6:	1c 44 fc ff 	mov	-4(r4),	r12	;
    53da:	1d 44 fe ff 	mov	-2(r4),	r13	;
    53de:	0c 5c       	rla	r12		;
    53e0:	0d 5c       	add	r12,	r13	;
    53e2:	2c 4d       	mov	@r13,	r12	;
    53e4:	0d 41       	mov	r1,	r13	;
    53e6:	8d 4c 02 00 	mov	r12,	2(r13)	;
    53ea:	bd 40 31 44 	mov	#17457,	0(r13)	;#0x4431
    53ee:	00 00 
    53f0:	b0 12 d6 61 	call	#25046		;#0x61d6
    53f4:	1c 44 fc ff 	mov	-4(r4),	r12	;
    53f8:	0c 93       	cmp	#0,	r12	;r3 As==00
    53fa:	84 4f f4 ff 	mov	r15,	-12(r4)	; 0xfff4
    53fe:	09 24       	jz	$+20     	;abs 0x5412
    5400:	00 3c       	jmp	$+2      	;abs 0x5402
    5402:	1c 44 fc ff 	mov	-4(r4),	r12	;
    5406:	1c 53       	inc	r12		;
    5408:	3c b0 07 00 	bit	#7,	r12	;
    540c:	02 20       	jnz	$+6      	;abs 0x5412
    540e:	00 3c       	jmp	$+2      	;abs 0x5410
    5410:	00 3c       	jmp	$+2      	;abs 0x5412
    5412:	0c 41       	mov	r1,	r12	;
    5414:	bc 40 52 44 	mov	#17490,	0(r12)	;#0x4452
    5418:	00 00 
    541a:	b0 12 d6 61 	call	#25046		;#0x61d6
    541e:	84 4f f2 ff 	mov	r15,	-14(r4)	; 0xfff2
    5422:	00 3c       	jmp	$+2      	;abs 0x5424
    5424:	1c 44 fc ff 	mov	-4(r4),	r12	;
    5428:	1c 53       	inc	r12		;
    542a:	84 4c fc ff 	mov	r12,	-4(r4)	; 0xfffc
    542e:	ca 3f       	jmp	$-106    	;abs 0x53c4
    5430:	1c 44 fe ff 	mov	-2(r4),	r12	;
    5434:	5d 4c 80 00 	mov.b	128(r12),r13	;0x00080
    5438:	7d b0 07 00 	bit.b	#7,	r13	;
    543c:	02 24       	jz	$+6      	;abs 0x5442
    543e:	00 3c       	jmp	$+2      	;abs 0x5440
    5440:	00 3c       	jmp	$+2      	;abs 0x5442
    5442:	0c 41       	mov	r1,	r12	;
    5444:	bc 40 52 44 	mov	#17490,	0(r12)	;#0x4452
    5448:	00 00 
    544a:	b0 12 d6 61 	call	#25046		;#0x61d6
    544e:	84 4f f0 ff 	mov	r15,	-16(r4)	; 0xfff0
    5452:	31 50 16 00 	add	#22,	r1	;#0x0016
    5456:	34 41       	pop	r4		;
    5458:	30 41       	ret			
	...

0000545c <init_dict>:
    545c:	04 12       	push	r4		;
    545e:	04 41       	mov	r1,	r4	;
    5460:	31 80 0a 00 	sub	#10,	r1	;#0x000a
    5464:	0c 4f       	mov	r15,	r12	;
    5466:	84 4f fe ff 	mov	r15,	-2(r4)	; 0xfffe
    546a:	8f 43 00 0c 	mov	#0,	3072(r15);r3 As==00, 0x0c00
    546e:	84 43 fc ff 	mov	#0,	-4(r4)	;r3 As==00, 0xfffc
    5472:	84 4c f8 ff 	mov	r12,	-8(r4)	; 0xfff8
    5476:	00 3c       	jmp	$+2      	;abs 0x5478
    5478:	1c 44 fc ff 	mov	-4(r4),	r12	;
    547c:	3c 90 00 01 	cmp	#256,	r12	;#0x0100
    5480:	30 2c       	jc	$+98     	;abs 0x54e2
    5482:	00 3c       	jmp	$+2      	;abs 0x5484
    5484:	92 43 e0 44 	mov	#1,	&0x44e0	;r3 As==01
    5488:	1c 44 fc ff 	mov	-4(r4),	r12	;
    548c:	82 4c e0 44 	mov	r12,	&0x44e0	;
    5490:	1f 44 fc ff 	mov	-4(r4),	r15	;
    5494:	1c 44 fe ff 	mov	-2(r4),	r12	;
    5498:	3e 40 06 00 	mov	#6,	r14	;
    549c:	84 4c f6 ff 	mov	r12,	-10(r4)	; 0xfff6
    54a0:	b0 12 18 61 	call	#24856		;#0x6118
    54a4:	1c 44 f6 ff 	mov	-10(r4),r12	;0xfffffff6
    54a8:	0c 5f       	add	r15,	r12	;
    54aa:	84 4c fa ff 	mov	r12,	-6(r4)	; 0xfffa
    54ae:	1e 44 fc ff 	mov	-4(r4),	r14	;
    54b2:	8c 4e 00 00 	mov	r14,	0(r12)	;
    54b6:	1c 44 fa ff 	mov	-6(r4),	r12	;
    54ba:	8c 43 02 00 	mov	#0,	2(r12)	;r3 As==00
    54be:	1c 44 fa ff 	mov	-6(r4),	r12	;
    54c2:	8c 43 04 00 	mov	#0,	4(r12)	;r3 As==00
    54c6:	1c 44 fe ff 	mov	-2(r4),	r12	;
    54ca:	1e 4c 00 0c 	mov	3072(r12),r14	;0x00c00
    54ce:	1e 53       	inc	r14		;
    54d0:	8c 4e 00 0c 	mov	r14,	3072(r12); 0x0c00
    54d4:	00 3c       	jmp	$+2      	;abs 0x54d6
    54d6:	1c 44 fc ff 	mov	-4(r4),	r12	;
    54da:	1c 53       	inc	r12		;
    54dc:	84 4c fc ff 	mov	r12,	-4(r4)	; 0xfffc
    54e0:	cb 3f       	jmp	$-104    	;abs 0x5478
    54e2:	31 50 0a 00 	add	#10,	r1	;#0x000a
    54e6:	34 41       	pop	r4		;
    54e8:	30 41       	ret			
	...

000054ec <find_child>:
    54ec:	04 12       	push	r4		;
    54ee:	04 41       	mov	r1,	r4	;
    54f0:	0b 12       	push	r11		;
    54f2:	0a 12       	push	r10		;
    54f4:	31 80 18 00 	sub	#24,	r1	;#0x0018
    54f8:	0c 4d       	mov	r13,	r12	;
    54fa:	0b 4e       	mov	r14,	r11	;
    54fc:	0a 4f       	mov	r15,	r10	;
    54fe:	84 4f f8 ff 	mov	r15,	-8(r4)	; 0xfff8
    5502:	84 4e f6 ff 	mov	r14,	-10(r4)	; 0xfff6
    5506:	84 4d f4 ff 	mov	r13,	-12(r4)	; 0xfff4
    550a:	a2 42 e0 44 	mov	#4,	&0x44e0	;r2 As==10
    550e:	1f 44 f6 ff 	mov	-10(r4),r15	;0xfffffff6
    5512:	1d 44 f4 ff 	mov	-12(r4),r13	;0xfffffff4
    5516:	3e 40 06 00 	mov	#6,	r14	;
    551a:	84 4c ec ff 	mov	r12,	-20(r4)	; 0xffec
    551e:	84 4b ea ff 	mov	r11,	-22(r4)	; 0xffea
    5522:	84 4a e8 ff 	mov	r10,	-24(r4)	; 0xffe8
    5526:	84 4d e6 ff 	mov	r13,	-26(r4)	; 0xffe6
    552a:	b0 12 18 61 	call	#24856		;#0x6118
    552e:	1c 44 e6 ff 	mov	-26(r4),r12	;0xffffffe6
    5532:	0c 5f       	add	r15,	r12	;
    5534:	84 4c f2 ff 	mov	r12,	-14(r4)	; 0xfff2
    5538:	1c 4c 04 00 	mov	4(r12),	r12	;
    553c:	0c 93       	cmp	#0,	r12	;r3 As==00
    553e:	04 20       	jnz	$+10     	;abs 0x5548
    5540:	00 3c       	jmp	$+2      	;abs 0x5542
    5542:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa
    5546:	34 3c       	jmp	$+106    	;abs 0x55b0
    5548:	1c 44 f2 ff 	mov	-14(r4),r12	;0xfffffff2
    554c:	1c 4c 04 00 	mov	4(r12),	r12	;
    5550:	84 4c f0 ff 	mov	r12,	-16(r4)	; 0xfff0
    5554:	00 3c       	jmp	$+2      	;abs 0x5556
    5556:	1c 44 f0 ff 	mov	-16(r4),r12	;0xfffffff0
    555a:	0c 93       	cmp	#0,	r12	;r3 As==00
    555c:	26 24       	jz	$+78     	;abs 0x55aa
    555e:	00 3c       	jmp	$+2      	;abs 0x5560
    5560:	b2 40 05 00 	mov	#5,	&0x44e0	;
    5564:	e0 44 
    5566:	1f 44 f0 ff 	mov	-16(r4),r15	;0xfffffff0
    556a:	1c 44 f4 ff 	mov	-12(r4),r12	;0xfffffff4
    556e:	3e 40 06 00 	mov	#6,	r14	;
    5572:	84 4c e4 ff 	mov	r12,	-28(r4)	; 0xffe4
    5576:	b0 12 18 61 	call	#24856		;#0x6118
    557a:	1c 44 e4 ff 	mov	-28(r4),r12	;0xffffffe4
    557e:	0c 5f       	add	r15,	r12	;
    5580:	84 4c ee ff 	mov	r12,	-18(r4)	; 0xffee
    5584:	2c 4c       	mov	@r12,	r12	;
    5586:	1e 44 f8 ff 	mov	-8(r4),	r14	;
    558a:	0c 9e       	cmp	r14,	r12	;
    558c:	06 20       	jnz	$+14     	;abs 0x559a
    558e:	00 3c       	jmp	$+2      	;abs 0x5590
    5590:	1c 44 f0 ff 	mov	-16(r4),r12	;0xfffffff0
    5594:	84 4c fa ff 	mov	r12,	-6(r4)	; 0xfffa
    5598:	0b 3c       	jmp	$+24     	;abs 0x55b0
    559a:	1c 44 ee ff 	mov	-18(r4),r12	;0xffffffee
    559e:	1c 4c 02 00 	mov	2(r12),	r12	;
    55a2:	84 4c f0 ff 	mov	r12,	-16(r4)	; 0xfff0
    55a6:	00 3c       	jmp	$+2      	;abs 0x55a8
    55a8:	d6 3f       	jmp	$-82     	;abs 0x5556
    55aa:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa
    55ae:	00 3c       	jmp	$+2      	;abs 0x55b0
    55b0:	1f 44 fa ff 	mov	-6(r4),	r15	;
    55b4:	31 50 18 00 	add	#24,	r1	;#0x0018
    55b8:	3a 41       	pop	r10		;
    55ba:	3b 41       	pop	r11		;
    55bc:	34 41       	pop	r4		;
    55be:	30 41       	ret			

000055c0 <add_node>:
    55c0:	04 12       	push	r4		;
    55c2:	04 41       	mov	r1,	r4	;
    55c4:	0b 12       	push	r11		;
    55c6:	0a 12       	push	r10		;
    55c8:	31 80 2c 00 	sub	#44,	r1	;#0x002c
    55cc:	0c 4d       	mov	r13,	r12	;
    55ce:	0b 4e       	mov	r14,	r11	;
    55d0:	0a 4f       	mov	r15,	r10	;
    55d2:	84 4f fa ff 	mov	r15,	-6(r4)	; 0xfffa
    55d6:	84 4e f8 ff 	mov	r14,	-8(r4)	; 0xfff8
    55da:	84 4d f6 ff 	mov	r13,	-10(r4)	; 0xfff6
    55de:	b2 40 06 00 	mov	#6,	&0x44e0	;
    55e2:	e0 44 
    55e4:	1d 44 f6 ff 	mov	-10(r4),r13	;0xfffffff6
    55e8:	1d 4d 00 0c 	mov	3072(r13),r13	;0x00c00
    55ec:	3d 90 00 02 	cmp	#512,	r13	;#0x0200
    55f0:	84 4c ea ff 	mov	r12,	-22(r4)	; 0xffea
    55f4:	84 4b e8 ff 	mov	r11,	-24(r4)	; 0xffe8
    55f8:	84 4a e6 ff 	mov	r10,	-26(r4)	; 0xffe6
    55fc:	0a 20       	jnz	$+22     	;abs 0x5612
    55fe:	00 3c       	jmp	$+2      	;abs 0x5600
    5600:	0c 41       	mov	r1,	r12	;
    5602:	bc 40 37 44 	mov	#17463,	0(r12)	;#0x4437
    5606:	00 00 
    5608:	b0 12 d6 61 	call	#25046		;#0x61d6
    560c:	84 4f e4 ff 	mov	r15,	-28(r4)	; 0xffe4
    5610:	00 3c       	jmp	$+2      	;abs 0x5612
    5612:	b2 40 07 00 	mov	#7,	&0x44e0	;
    5616:	e0 44 
    5618:	1c 44 f6 ff 	mov	-10(r4),r12	;0xfffffff6
    561c:	1f 4c 00 0c 	mov	3072(r12),r15	;0x00c00
    5620:	3d 40 06 00 	mov	#6,	r13	;
    5624:	0e 4d       	mov	r13,	r14	;
    5626:	84 4c e2 ff 	mov	r12,	-30(r4)	; 0xffe2
    562a:	84 4d e0 ff 	mov	r13,	-32(r4)	; 0xffe0
    562e:	b0 12 18 61 	call	#24856		;#0x6118
    5632:	1c 44 e2 ff 	mov	-30(r4),r12	;0xffffffe2
    5636:	0c 5f       	add	r15,	r12	;
    5638:	84 4c f4 ff 	mov	r12,	-12(r4)	; 0xfff4
    563c:	1d 44 fa ff 	mov	-6(r4),	r13	;
    5640:	8c 4d 00 00 	mov	r13,	0(r12)	;
    5644:	1c 44 f4 ff 	mov	-12(r4),r12	;0xfffffff4
    5648:	8c 43 02 00 	mov	#0,	2(r12)	;r3 As==00
    564c:	1c 44 f4 ff 	mov	-12(r4),r12	;0xfffffff4
    5650:	8c 43 04 00 	mov	#0,	4(r12)	;r3 As==00
    5654:	1c 44 f6 ff 	mov	-10(r4),r12	;0xfffffff6
    5658:	1d 4c 00 0c 	mov	3072(r12),r13	;0x00c00
    565c:	0e 4d       	mov	r13,	r14	;
    565e:	1e 53       	inc	r14		;
    5660:	8c 4e 00 0c 	mov	r14,	3072(r12); 0x0c00
    5664:	84 4d f2 ff 	mov	r13,	-14(r4)	; 0xfff2
    5668:	1f 44 f8 ff 	mov	-8(r4),	r15	;
    566c:	1c 44 f6 ff 	mov	-10(r4),r12	;0xfffffff6
    5670:	1e 44 e0 ff 	mov	-32(r4),r14	;0xffffffe0
    5674:	84 4c de ff 	mov	r12,	-34(r4)	; 0xffde
    5678:	b0 12 18 61 	call	#24856		;#0x6118
    567c:	1c 44 de ff 	mov	-34(r4),r12	;0xffffffde
    5680:	0c 5f       	add	r15,	r12	;
    5682:	1c 4c 04 00 	mov	4(r12),	r12	;
    5686:	84 4c f0 ff 	mov	r12,	-16(r4)	; 0xfff0
    568a:	0c 93       	cmp	#0,	r12	;r3 As==00
    568c:	4b 24       	jz	$+152    	;abs 0x5724
    568e:	00 3c       	jmp	$+2      	;abs 0x5690
    5690:	1c 44 f0 ff 	mov	-16(r4),r12	;0xfffffff0
    5694:	84 4c ee ff 	mov	r12,	-18(r4)	; 0xffee
    5698:	1d 44 f6 ff 	mov	-10(r4),r13	;0xfffffff6
    569c:	3e 40 06 00 	mov	#6,	r14	;
    56a0:	0f 4c       	mov	r12,	r15	;
    56a2:	84 4d dc ff 	mov	r13,	-36(r4)	; 0xffdc
    56a6:	b0 12 18 61 	call	#24856		;#0x6118
    56aa:	1c 44 dc ff 	mov	-36(r4),r12	;0xffffffdc
    56ae:	0c 5f       	add	r15,	r12	;
    56b0:	84 4c ec ff 	mov	r12,	-20(r4)	; 0xffec
    56b4:	00 3c       	jmp	$+2      	;abs 0x56b6
    56b6:	1c 44 ec ff 	mov	-20(r4),r12	;0xffffffec
    56ba:	1c 4c 02 00 	mov	2(r12),	r12	;
    56be:	0c 93       	cmp	#0,	r12	;r3 As==00
    56c0:	18 24       	jz	$+50     	;abs 0x56f2
    56c2:	00 3c       	jmp	$+2      	;abs 0x56c4
    56c4:	b2 42 e0 44 	mov	#8,	&0x44e0	;r2 As==11
    56c8:	1c 44 ec ff 	mov	-20(r4),r12	;0xffffffec
    56cc:	1c 4c 02 00 	mov	2(r12),	r12	;
    56d0:	84 4c ee ff 	mov	r12,	-18(r4)	; 0xffee
    56d4:	1d 44 f6 ff 	mov	-10(r4),r13	;0xfffffff6
    56d8:	3e 40 06 00 	mov	#6,	r14	;
    56dc:	0f 4c       	mov	r12,	r15	;
    56de:	84 4d da ff 	mov	r13,	-38(r4)	; 0xffda
    56e2:	b0 12 18 61 	call	#24856		;#0x6118
    56e6:	1c 44 da ff 	mov	-38(r4),r12	;0xffffffda
    56ea:	0c 5f       	add	r15,	r12	;
    56ec:	84 4c ec ff 	mov	r12,	-20(r4)	; 0xffec
    56f0:	e2 3f       	jmp	$-58     	;abs 0x56b6
    56f2:	b2 40 09 00 	mov	#9,	&0x44e0	;
    56f6:	e0 44 
    56f8:	1c 44 f2 ff 	mov	-14(r4),r12	;0xfffffff2
    56fc:	1f 44 ee ff 	mov	-18(r4),r15	;0xffffffee
    5700:	1d 44 f6 ff 	mov	-10(r4),r13	;0xfffffff6
    5704:	3e 40 06 00 	mov	#6,	r14	;
    5708:	84 4c d8 ff 	mov	r12,	-40(r4)	; 0xffd8
    570c:	84 4d d6 ff 	mov	r13,	-42(r4)	; 0xffd6
    5710:	b0 12 18 61 	call	#24856		;#0x6118
    5714:	1c 44 d6 ff 	mov	-42(r4),r12	;0xffffffd6
    5718:	0c 5f       	add	r15,	r12	;
    571a:	1d 44 d8 ff 	mov	-40(r4),r13	;0xffffffd8
    571e:	8c 4d 02 00 	mov	r13,	2(r12)	;
    5722:	19 3c       	jmp	$+52     	;abs 0x5756
    5724:	b2 40 0a 00 	mov	#10,	&0x44e0	;#0x000a
    5728:	e0 44 
    572a:	1c 44 f2 ff 	mov	-14(r4),r12	;0xfffffff2
    572e:	1f 44 f8 ff 	mov	-8(r4),	r15	;
    5732:	1d 44 f6 ff 	mov	-10(r4),r13	;0xfffffff6
    5736:	3e 40 06 00 	mov	#6,	r14	;
    573a:	84 4c d4 ff 	mov	r12,	-44(r4)	; 0xffd4
    573e:	84 4d d2 ff 	mov	r13,	-46(r4)	; 0xffd2
    5742:	b0 12 18 61 	call	#24856		;#0x6118
    5746:	1c 44 d2 ff 	mov	-46(r4),r12	;0xffffffd2
    574a:	0c 5f       	add	r15,	r12	;
    574c:	1d 44 d4 ff 	mov	-44(r4),r13	;0xffffffd4
    5750:	8c 4d 04 00 	mov	r13,	4(r12)	;
    5754:	00 3c       	jmp	$+2      	;abs 0x5756
    5756:	31 50 2c 00 	add	#44,	r1	;#0x002c
    575a:	3a 41       	pop	r10		;
    575c:	3b 41       	pop	r11		;
    575e:	34 41       	pop	r4		;
    5760:	30 41       	ret			
	...

00005764 <append_compressed>:
    5764:	04 12       	push	r4		;
    5766:	04 41       	mov	r1,	r4	;
    5768:	0b 12       	push	r11		;
    576a:	0a 12       	push	r10		;
    576c:	31 82       	sub	#8,	r1	;r2 As==11
    576e:	0c 4e       	mov	r14,	r12	;
    5770:	0d 4f       	mov	r15,	r13	;
    5772:	84 4f fa ff 	mov	r15,	-6(r4)	; 0xfffa
    5776:	84 4e f8 ff 	mov	r14,	-8(r4)	; 0xfff8
    577a:	b2 40 0b 00 	mov	#11,	&0x44e0	;#0x000b
    577e:	e0 44 
    5780:	1e 44 fa ff 	mov	-6(r4),	r14	;
    5784:	1f 44 f8 ff 	mov	-8(r4),	r15	;
    5788:	1b 4f 80 00 	mov	128(r15),r11	;0x00080
    578c:	0a 4b       	mov	r11,	r10	;
    578e:	1a 53       	inc	r10		;
    5790:	8f 4a 80 00 	mov	r10,	128(r15); 0x0080
    5794:	1f 44 f8 ff 	mov	-8(r4),	r15	;
    5798:	0b 5b       	rla	r11		;
    579a:	0f 5b       	add	r11,	r15	;
    579c:	8f 4e 00 00 	mov	r14,	0(r15)	;
    57a0:	84 4c f6 ff 	mov	r12,	-10(r4)	; 0xfff6
    57a4:	84 4d f4 ff 	mov	r13,	-12(r4)	; 0xfff4
    57a8:	31 52       	add	#8,	r1	;r2 As==11
    57aa:	3a 41       	pop	r10		;
    57ac:	3b 41       	pop	r11		;
    57ae:	34 41       	pop	r4		;
    57b0:	30 41       	ret			
	...

000057b4 <init>:
    57b4:	04 12       	push	r4		;
    57b6:	04 41       	mov	r1,	r4	;
    57b8:	31 80 06 00 	sub	#6,	r1	;
    57bc:	b0 12 74 5e 	call	#24180		;#0x5e74
    57c0:	b0 12 4a 63 	call	#25418		;#0x634a
    57c4:	32 d2       	eint			
    57c6:	03 43       	nop			
    57c8:	1c 42 e0 44 	mov	&0x44e0,r12	;0x44e0
    57cc:	0d 41       	mov	r1,	r13	;
    57ce:	8d 4c 02 00 	mov	r12,	2(r13)	;
    57d2:	bd 40 4e 44 	mov	#17486,	0(r13)	;#0x444e
    57d6:	00 00 
    57d8:	b0 12 d6 61 	call	#25046		;#0x61d6
    57dc:	84 4f fe ff 	mov	r15,	-2(r4)	; 0xfffe
    57e0:	31 50 06 00 	add	#6,	r1	;
    57e4:	34 41       	pop	r4		;
    57e6:	30 41       	ret			

000057e8 <task_0>:
    57e8:	21 83       	decd	r1		;
    57ea:	81 43 00 00 	mov	#0,	0(r1)	;r3 As==00
    57ee:	82 43 e0 44 	mov	#0,	&0x44e0	;r3 As==00
    57f2:	b2 40 e2 44 	mov	#17634,	&0x44a4	;#0x44e2
    57f6:	a4 44 
    57f8:	82 43 e2 50 	mov	#0,	&0x50e2	;r3 As==00
    57fc:	3f 40 0c 58 	mov	#22540,	r15	;#0x580c
    5800:	82 43 a8 44 	mov	#0,	&0x44a8	;r3 As==00
    5804:	b0 12 14 60 	call	#24596		;#0x6014
    5808:	21 53       	incd	r1		;
    580a:	30 41       	ret			

0000580c <task_1>:
    580c:	31 80 0a 00 	sub	#10,	r1	;#0x000a
    5810:	1c 42 a8 44 	mov	&0x44a8,r12	;0x44a8
    5814:	82 4c a6 44 	mov	r12,	&0x44a6	;
    5818:	3c 90 00 01 	cmp	#256,	r12	;#0x0100
    581c:	46 2c       	jc	$+142    	;abs 0x58aa
    581e:	00 3c       	jmp	$+2      	;abs 0x5820
    5820:	92 43 e0 44 	mov	#1,	&0x44e0	;r3 As==01
    5824:	3f 40 a6 44 	mov	#17574,	r15	;#0x44a6
    5828:	1c 42 a6 44 	mov	&0x44a6,r12	;0x44a6
    582c:	82 4c e0 44 	mov	r12,	&0x44e0	;
    5830:	1c 42 a6 44 	mov	&0x44a6,r12	;0x44a6
    5834:	1d 42 a4 44 	mov	&0x44a4,r13	;0x44a4
    5838:	3e 40 06 00 	mov	#6,	r14	;
    583c:	81 4f 06 00 	mov	r15,	6(r1)	;
    5840:	0f 4c       	mov	r12,	r15	;
    5842:	81 4d 04 00 	mov	r13,	4(r1)	;
    5846:	b0 12 18 61 	call	#24856		;#0x6118
    584a:	1c 41 04 00 	mov	4(r1),	r12	;
    584e:	0c 5f       	add	r15,	r12	;
    5850:	81 4c 08 00 	mov	r12,	8(r1)	;
    5854:	1d 42 a6 44 	mov	&0x44a6,r13	;0x44a6
    5858:	8c 4d 00 00 	mov	r13,	0(r12)	;
    585c:	1c 41 08 00 	mov	8(r1),	r12	;
    5860:	8c 43 02 00 	mov	#0,	2(r12)	;r3 As==00
    5864:	1c 41 08 00 	mov	8(r1),	r12	;
    5868:	8c 43 04 00 	mov	#0,	4(r12)	;r3 As==00
    586c:	1c 42 a4 44 	mov	&0x44a4,r12	;0x44a4
    5870:	1d 4c 00 0c 	mov	3072(r12),r13	;0x00c00
    5874:	1d 53       	inc	r13		;
    5876:	8c 4d 00 0c 	mov	r13,	3072(r12); 0x0c00
    587a:	1c 42 a6 44 	mov	&0x44a6,r12	;0x44a6
    587e:	1c 53       	inc	r12		;
    5880:	3f 40 0c 58 	mov	#22540,	r15	;#0x580c
    5884:	82 4c a6 44 	mov	r12,	&0x44a6	;
    5888:	3e 40 a8 44 	mov	#17576,	r14	;#0x44a8
    588c:	2d 43       	mov	#2,	r13	;r3 As==10
    588e:	1c 41 06 00 	mov	6(r1),	r12	;
    5892:	81 4f 02 00 	mov	r15,	2(r1)	;
    5896:	0f 4c       	mov	r12,	r15	;
    5898:	b0 12 7c 60 	call	#24700		;#0x607c
    589c:	1f 41 02 00 	mov	2(r1),	r15	;
    58a0:	b0 12 14 60 	call	#24596		;#0x6014
    58a4:	31 50 0a 00 	add	#10,	r1	;#0x000a
    58a8:	30 41       	ret			
    58aa:	82 43 aa 44 	mov	#0,	&0x44aa	;r3 As==00
    58ae:	82 43 ae 44 	mov	#0,	&0x44ae	;r3 As==00
    58b2:	82 43 b2 44 	mov	#0,	&0x44b2	;r3 As==00
    58b6:	92 43 66 51 	mov	#1,	&0x5166	;r3 As==01
    58ba:	3f 40 e4 58 	mov	#22756,	r15	;#0x58e4
    58be:	82 43 64 51 	mov	#0,	&0x5164	;r3 As==00
    58c2:	3e 40 a8 44 	mov	#17576,	r14	;#0x44a8
    58c6:	3c 40 a6 44 	mov	#17574,	r12	;#0x44a6
    58ca:	2d 43       	mov	#2,	r13	;r3 As==10
    58cc:	81 4f 00 00 	mov	r15,	0(r1)	;
    58d0:	0f 4c       	mov	r12,	r15	;
    58d2:	b0 12 7c 60 	call	#24700		;#0x607c
    58d6:	2f 41       	mov	@r1,	r15	;
    58d8:	b0 12 14 60 	call	#24596		;#0x6014
    58dc:	31 50 0a 00 	add	#10,	r1	;#0x000a
    58e0:	30 41       	ret			
	...

000058e4 <task_2>:
    58e4:	31 82       	sub	#8,	r1	;r2 As==11
    58e6:	1c 42 ae 44 	mov	&0x44ae,r12	;0x44ae
    58ea:	82 4c ac 44 	mov	r12,	&0x44ac	;
    58ee:	1c 42 b2 44 	mov	&0x44b2,r12	;0x44b2
    58f2:	82 4c b0 44 	mov	r12,	&0x44b0	;
    58f6:	a2 43 e0 44 	mov	#2,	&0x44e0	;r3 As==10
    58fa:	1c 42 aa 44 	mov	&0x44aa,r12	;0x44aa
    58fe:	82 4c b4 44 	mov	r12,	&0x44b4	;
    5902:	1c 42 ac 44 	mov	&0x44ac,r12	;0x44ac
    5906:	0c 93       	cmp	#0,	r12	;r3 As==00
    5908:	0f 20       	jnz	$+32     	;abs 0x5928
    590a:	00 3c       	jmp	$+2      	;abs 0x590c
    590c:	1c 42 b0 44 	mov	&0x44b0,r12	;0x44b0
    5910:	81 4c 06 00 	mov	r12,	6(r1)	;
    5914:	1c 53       	inc	r12		;
    5916:	3c f0 03 00 	and	#3,	r12	;
    591a:	81 4c 04 00 	mov	r12,	4(r1)	;
    591e:	82 4c b6 44 	mov	r12,	&0x44b6	;
    5922:	82 4c b0 44 	mov	r12,	&0x44b0	;
    5926:	00 3c       	jmp	$+2      	;abs 0x5928
    5928:	3f 40 ac 44 	mov	#17580,	r15	;#0x44ac
    592c:	1c 42 ac 44 	mov	&0x44ac,r12	;0x44ac
    5930:	1c 53       	inc	r12		;
    5932:	82 4c ac 44 	mov	r12,	&0x44ac	;
    5936:	3c 40 68 59 	mov	#22888,	r12	;#0x5968
    593a:	3e 40 ae 44 	mov	#17582,	r14	;#0x44ae
    593e:	2d 43       	mov	#2,	r13	;r3 As==10
    5940:	81 4d 02 00 	mov	r13,	2(r1)	;
    5944:	81 4c 00 00 	mov	r12,	0(r1)	;
    5948:	b0 12 7c 60 	call	#24700		;#0x607c
    594c:	3e 40 b2 44 	mov	#17586,	r14	;#0x44b2
    5950:	3f 40 b0 44 	mov	#17584,	r15	;#0x44b0
    5954:	1d 41 02 00 	mov	2(r1),	r13	;
    5958:	b0 12 7c 60 	call	#24700		;#0x607c
    595c:	2f 41       	mov	@r1,	r15	;
    595e:	b0 12 14 60 	call	#24596		;#0x6014
    5962:	31 52       	add	#8,	r1	;r2 As==11
    5964:	30 41       	ret			
	...

00005968 <task_3>:
    5968:	31 80 16 00 	sub	#22,	r1	;#0x0016
    596c:	82 43 e0 44 	mov	#0,	&0x44e0	;r3 As==00
    5970:	1c 42 ae 44 	mov	&0x44ae,r12	;0x44ae
    5974:	0c 93       	cmp	#0,	r12	;r3 As==00
    5976:	84 20       	jnz	$+266    	;abs 0x5a80
    5978:	00 3c       	jmp	$+2      	;abs 0x597a
    597a:	2c 43       	mov	#2,	r12	;r3 As==10
    597c:	81 4c 0c 00 	mov	r12,	12(r1)	; 0x000c
    5980:	00 3c       	jmp	$+2      	;abs 0x5982
    5982:	1c 41 0c 00 	mov	12(r1),	r12	;0x0000c
    5986:	81 4c 14 00 	mov	r12,	20(r1)	; 0x0014
    598a:	0c 5c       	rla	r12		;
    598c:	0c 5c       	rla	r12		;
    598e:	0c 5c       	rla	r12		;
    5990:	81 4c 12 00 	mov	r12,	18(r1)	; 0x0012
    5994:	1c 42 b6 44 	mov	&0x44b6,r12	;0x44b6
    5998:	5d 41 12 00 	mov.b	18(r1),	r13	;0x00012
    599c:	3e 40 ff 00 	mov	#255,	r14	;#0x00ff
    59a0:	4d 93       	cmp.b	#0,	r13	;r3 As==00
    59a2:	4f 4d       	mov.b	r13,	r15	;
    59a4:	81 4c 0a 00 	mov	r12,	10(r1)	; 0x000a
    59a8:	c1 4d 09 00 	mov.b	r13,	9(r1)	;
    59ac:	81 4e 06 00 	mov	r14,	6(r1)	;
    59b0:	c1 4f 05 00 	mov.b	r15,	5(r1)	;
    59b4:	0b 24       	jz	$+24     	;abs 0x59cc
    59b6:	5c 41 05 00 	mov.b	5(r1),	r12	;
    59ba:	1d 41 06 00 	mov	6(r1),	r13	;
    59be:	0d 5d       	rla	r13		;
    59c0:	5c 83       	dec.b	r12		;
    59c2:	81 4d 06 00 	mov	r13,	6(r1)	;
    59c6:	c1 4c 05 00 	mov.b	r12,	5(r1)	;
    59ca:	f5 23       	jnz	$-20     	;abs 0x59b6
    59cc:	1c 41 06 00 	mov	6(r1),	r12	;
    59d0:	1d 41 0a 00 	mov	10(r1),	r13	;0x0000a
    59d4:	0d fc       	and	r12,	r13	;
    59d6:	5e 41 09 00 	mov.b	9(r1),	r14	;
    59da:	4e 93       	cmp.b	#0,	r14	;r3 As==00
    59dc:	c1 4e 04 00 	mov.b	r14,	4(r1)	;
    59e0:	81 4d 02 00 	mov	r13,	2(r1)	;
    59e4:	0c 24       	jz	$+26     	;abs 0x59fe
    59e6:	5c 41 04 00 	mov.b	4(r1),	r12	;
    59ea:	1d 41 02 00 	mov	2(r1),	r13	;
    59ee:	12 c3       	clrc			
    59f0:	0d 10       	rrc	r13		;
    59f2:	5c 83       	dec.b	r12		;
    59f4:	81 4d 02 00 	mov	r13,	2(r1)	;
    59f8:	c1 4c 04 00 	mov.b	r12,	4(r1)	;
    59fc:	f4 23       	jnz	$-22     	;abs 0x59e6
    59fe:	1c 41 02 00 	mov	2(r1),	r12	;
    5a02:	82 4c aa 44 	mov	r12,	&0x44aa	;
    5a06:	1c 42 66 51 	mov	&0x5166,r12	;0x5166
    5a0a:	1c 53       	inc	r12		;
    5a0c:	82 4c 66 51 	mov	r12,	&0x5166	;
    5a10:	1c 42 b4 44 	mov	&0x44b4,r12	;0x44b4
    5a14:	82 4c b8 44 	mov	r12,	&0x44b8	;
    5a18:	1d 42 aa 44 	mov	&0x44aa,r13	;0x44aa
    5a1c:	82 4d ba 44 	mov	r13,	&0x44ba	;
    5a20:	81 4c 10 00 	mov	r12,	16(r1)	; 0x0010
    5a24:	b2 40 e2 44 	mov	#17634,	&0x44bc	;#0x44e2
    5a28:	bc 44 
    5a2a:	a2 42 e0 44 	mov	#4,	&0x44e0	;r2 As==10
    5a2e:	1f 41 10 00 	mov	16(r1),	r15	;0x00010
    5a32:	1c 42 bc 44 	mov	&0x44bc,r12	;0x44bc
    5a36:	3e 40 06 00 	mov	#6,	r14	;
    5a3a:	81 4c 00 00 	mov	r12,	0(r1)	;
    5a3e:	b0 12 18 61 	call	#24856		;#0x6118
    5a42:	2c 41       	mov	@r1,	r12	;
    5a44:	0c 5f       	add	r15,	r12	;
    5a46:	81 4c 0e 00 	mov	r12,	14(r1)	; 0x000e
    5a4a:	1c 4c 04 00 	mov	4(r12),	r12	;
    5a4e:	0c 93       	cmp	#0,	r12	;r3 As==00
    5a50:	0a 20       	jnz	$+22     	;abs 0x5a66
    5a52:	00 3c       	jmp	$+2      	;abs 0x5a54
    5a54:	3f 40 8c 5a 	mov	#23180,	r15	;#0x5a8c
    5a58:	82 43 be 44 	mov	#0,	&0x44be	;r3 As==00
    5a5c:	b0 12 14 60 	call	#24596		;#0x6014
    5a60:	31 50 16 00 	add	#22,	r1	;#0x0016
    5a64:	30 41       	ret			
    5a66:	1c 41 0e 00 	mov	14(r1),	r12	;0x0000e
    5a6a:	1c 4c 04 00 	mov	4(r12),	r12	;
    5a6e:	3f 40 a0 5a 	mov	#23200,	r15	;#0x5aa0
    5a72:	82 4c c2 44 	mov	r12,	&0x44c2	;
    5a76:	b0 12 14 60 	call	#24596		;#0x6014
    5a7a:	31 50 16 00 	add	#22,	r1	;#0x0016
    5a7e:	30 41       	ret			
    5a80:	1c 42 ae 44 	mov	&0x44ae,r12	;0x44ae
    5a84:	3c 53       	add	#-1,	r12	;r3 As==11
    5a86:	81 4c 0c 00 	mov	r12,	12(r1)	; 0x000c
    5a8a:	7b 3f       	jmp	$-264    	;abs 0x5982

00005a8c <task_4>:
    5a8c:	1c 42 be 44 	mov	&0x44be,r12	;0x44be
    5a90:	82 4c b4 44 	mov	r12,	&0x44b4	;
    5a94:	00 3c       	jmp	$+2      	;abs 0x5a96
    5a96:	3f 40 68 59 	mov	#22888,	r15	;#0x5968
    5a9a:	b0 12 14 60 	call	#24596		;#0x6014
    5a9e:	30 41       	ret			

00005aa0 <task_5>:
    5aa0:	31 80 0a 00 	sub	#10,	r1	;#0x000a
    5aa4:	1c 42 c2 44 	mov	&0x44c2,r12	;0x44c2
    5aa8:	82 4c c0 44 	mov	r12,	&0x44c0	;
    5aac:	0c 93       	cmp	#0,	r12	;r3 As==00
    5aae:	49 24       	jz	$+148    	;abs 0x5b42
    5ab0:	00 3c       	jmp	$+2      	;abs 0x5ab2
    5ab2:	b2 40 05 00 	mov	#5,	&0x44e0	;
    5ab6:	e0 44 
    5ab8:	1f 42 c0 44 	mov	&0x44c0,r15	;0x44c0
    5abc:	1c 42 bc 44 	mov	&0x44bc,r12	;0x44bc
    5ac0:	3e 40 06 00 	mov	#6,	r14	;
    5ac4:	81 4c 06 00 	mov	r12,	6(r1)	;
    5ac8:	b0 12 18 61 	call	#24856		;#0x6118
    5acc:	1c 41 06 00 	mov	6(r1),	r12	;
    5ad0:	0c 5f       	add	r15,	r12	;
    5ad2:	81 4c 08 00 	mov	r12,	8(r1)	;
    5ad6:	2c 4c       	mov	@r12,	r12	;
    5ad8:	1e 42 ba 44 	mov	&0x44ba,r14	;0x44ba
    5adc:	0c 9e       	cmp	r14,	r12	;
    5ade:	18 20       	jnz	$+50     	;abs 0x5b10
    5ae0:	00 3c       	jmp	$+2      	;abs 0x5ae2
    5ae2:	3f 40 c0 44 	mov	#17600,	r15	;#0x44c0
    5ae6:	1c 42 c0 44 	mov	&0x44c0,r12	;0x44c0
    5aea:	3d 40 8c 5a 	mov	#23180,	r13	;#0x5a8c
    5aee:	82 4c be 44 	mov	r12,	&0x44be	;
    5af2:	3e 40 c2 44 	mov	#17602,	r14	;#0x44c2
    5af6:	2c 43       	mov	#2,	r12	;r3 As==10
    5af8:	81 4d 04 00 	mov	r13,	4(r1)	;
    5afc:	0d 4c       	mov	r12,	r13	;
    5afe:	b0 12 7c 60 	call	#24700		;#0x607c
    5b02:	1f 41 04 00 	mov	4(r1),	r15	;
    5b06:	b0 12 14 60 	call	#24596		;#0x6014
    5b0a:	31 50 0a 00 	add	#10,	r1	;#0x000a
    5b0e:	30 41       	ret			
    5b10:	1c 41 08 00 	mov	8(r1),	r12	;
    5b14:	1c 4c 02 00 	mov	2(r12),	r12	;
    5b18:	3f 40 a0 5a 	mov	#23200,	r15	;#0x5aa0
    5b1c:	82 4c c0 44 	mov	r12,	&0x44c0	;
    5b20:	3c 40 c0 44 	mov	#17600,	r12	;#0x44c0
    5b24:	3e 40 c2 44 	mov	#17602,	r14	;#0x44c2
    5b28:	2d 43       	mov	#2,	r13	;r3 As==10
    5b2a:	81 4f 02 00 	mov	r15,	2(r1)	;
    5b2e:	0f 4c       	mov	r12,	r15	;
    5b30:	b0 12 7c 60 	call	#24700		;#0x607c
    5b34:	1f 41 02 00 	mov	2(r1),	r15	;
    5b38:	b0 12 14 60 	call	#24596		;#0x6014
    5b3c:	31 50 0a 00 	add	#10,	r1	;#0x000a
    5b40:	30 41       	ret			
    5b42:	3f 40 8c 5a 	mov	#23180,	r15	;#0x5a8c
    5b46:	82 43 be 44 	mov	#0,	&0x44be	;r3 As==00
    5b4a:	3e 40 c2 44 	mov	#17602,	r14	;#0x44c2
    5b4e:	3c 40 c0 44 	mov	#17600,	r12	;#0x44c0
    5b52:	2d 43       	mov	#2,	r13	;r3 As==10
    5b54:	81 4f 00 00 	mov	r15,	0(r1)	;
    5b58:	0f 4c       	mov	r12,	r15	;
    5b5a:	b0 12 7c 60 	call	#24700		;#0x607c
    5b5e:	2f 41       	mov	@r1,	r15	;
    5b60:	b0 12 14 60 	call	#24596		;#0x6014
    5b64:	31 50 0a 00 	add	#10,	r1	;#0x000a
    5b68:	30 41       	ret			
	...

00005b6c <task_6>:
    5b6c:	31 80 1c 00 	sub	#28,	r1	;#0x001c
    5b70:	1c 42 b8 44 	mov	&0x44b8,r12	;0x44b8
    5b74:	81 4c 1a 00 	mov	r12,	26(r1)	; 0x001a
    5b78:	b1 40 e4 50 	mov	#20708,	24(r1)	;#0x50e4, 0x0018
    5b7c:	18 00 
    5b7e:	b2 40 0b 00 	mov	#11,	&0x44e0	;#0x000b
    5b82:	e0 44 
    5b84:	1c 41 1a 00 	mov	26(r1),	r12	;0x0001a
    5b88:	1d 41 18 00 	mov	24(r1),	r13	;0x00018
    5b8c:	1e 4d 80 00 	mov	128(r13),r14	;0x00080
    5b90:	0f 4e       	mov	r14,	r15	;
    5b92:	1f 53       	inc	r15		;
    5b94:	8d 4f 80 00 	mov	r15,	128(r13); 0x0080
    5b98:	1d 41 18 00 	mov	24(r1),	r13	;0x00018
    5b9c:	0e 5e       	rla	r14		;
    5b9e:	0d 5e       	add	r14,	r13	;
    5ba0:	8d 4c 00 00 	mov	r12,	0(r13)	;
    5ba4:	1c 42 aa 44 	mov	&0x44aa,r12	;0x44aa
    5ba8:	1d 42 b8 44 	mov	&0x44b8,r13	;0x44b8
    5bac:	81 4c 16 00 	mov	r12,	22(r1)	; 0x0016
    5bb0:	81 4d 14 00 	mov	r13,	20(r1)	; 0x0014
    5bb4:	b2 40 e2 44 	mov	#17634,	&0x44c4	;#0x44e2
    5bb8:	c4 44 
    5bba:	b2 40 06 00 	mov	#6,	&0x44e0	;
    5bbe:	e0 44 
    5bc0:	1c 42 c4 44 	mov	&0x44c4,r12	;0x44c4
    5bc4:	1c 4c 00 0c 	mov	3072(r12),r12	;0x00c00
    5bc8:	3c 90 00 02 	cmp	#512,	r12	;#0x0200
    5bcc:	0a 20       	jnz	$+22     	;abs 0x5be2
    5bce:	00 3c       	jmp	$+2      	;abs 0x5bd0
    5bd0:	0c 41       	mov	r1,	r12	;
    5bd2:	bc 40 37 44 	mov	#17463,	0(r12)	;#0x4437
    5bd6:	00 00 
    5bd8:	b0 12 d6 61 	call	#25046		;#0x61d6
    5bdc:	81 4f 0e 00 	mov	r15,	14(r1)	; 0x000e
    5be0:	00 3c       	jmp	$+2      	;abs 0x5be2
    5be2:	b2 40 07 00 	mov	#7,	&0x44e0	;
    5be6:	e0 44 
    5be8:	1c 42 c4 44 	mov	&0x44c4,r12	;0x44c4
    5bec:	1f 4c 00 0c 	mov	3072(r12),r15	;0x00c00
    5bf0:	3d 40 06 00 	mov	#6,	r13	;
    5bf4:	0e 4d       	mov	r13,	r14	;
    5bf6:	81 4c 0c 00 	mov	r12,	12(r1)	; 0x000c
    5bfa:	81 4d 0a 00 	mov	r13,	10(r1)	; 0x000a
    5bfe:	b0 12 18 61 	call	#24856		;#0x6118
    5c02:	1c 41 0c 00 	mov	12(r1),	r12	;0x0000c
    5c06:	0c 5f       	add	r15,	r12	;
    5c08:	81 4c 12 00 	mov	r12,	18(r1)	; 0x0012
    5c0c:	1d 41 16 00 	mov	22(r1),	r13	;0x00016
    5c10:	8c 4d 00 00 	mov	r13,	0(r12)	;
    5c14:	1c 41 12 00 	mov	18(r1),	r12	;0x00012
    5c18:	8c 43 02 00 	mov	#0,	2(r12)	;r3 As==00
    5c1c:	1c 41 12 00 	mov	18(r1),	r12	;0x00012
    5c20:	8c 43 04 00 	mov	#0,	4(r12)	;r3 As==00
    5c24:	1c 42 c4 44 	mov	&0x44c4,r12	;0x44c4
    5c28:	1d 4c 00 0c 	mov	3072(r12),r13	;0x00c00
    5c2c:	0e 4d       	mov	r13,	r14	;
    5c2e:	1e 53       	inc	r14		;
    5c30:	8c 4e 00 0c 	mov	r14,	3072(r12); 0x0c00
    5c34:	82 4d c6 44 	mov	r13,	&0x44c6	;
    5c38:	1f 41 14 00 	mov	20(r1),	r15	;0x00014
    5c3c:	1c 42 c4 44 	mov	&0x44c4,r12	;0x44c4
    5c40:	1e 41 0a 00 	mov	10(r1),	r14	;0x0000a
    5c44:	81 4c 08 00 	mov	r12,	8(r1)	;
    5c48:	b0 12 18 61 	call	#24856		;#0x6118
    5c4c:	1c 41 08 00 	mov	8(r1),	r12	;
    5c50:	0c 5f       	add	r15,	r12	;
    5c52:	1c 4c 04 00 	mov	4(r12),	r12	;
    5c56:	81 4c 10 00 	mov	r12,	16(r1)	; 0x0010
    5c5a:	0c 93       	cmp	#0,	r12	;r3 As==00
    5c5c:	1a 24       	jz	$+54     	;abs 0x5c92
    5c5e:	00 3c       	jmp	$+2      	;abs 0x5c60
    5c60:	1c 41 10 00 	mov	16(r1),	r12	;0x00010
    5c64:	82 4c c8 44 	mov	r12,	&0x44c8	;
    5c68:	1d 42 c4 44 	mov	&0x44c4,r13	;0x44c4
    5c6c:	3e 40 06 00 	mov	#6,	r14	;
    5c70:	0f 4c       	mov	r12,	r15	;
    5c72:	81 4d 06 00 	mov	r13,	6(r1)	;
    5c76:	b0 12 18 61 	call	#24856		;#0x6118
    5c7a:	1c 41 06 00 	mov	6(r1),	r12	;
    5c7e:	0c 5f       	add	r15,	r12	;
    5c80:	3f 40 d0 5c 	mov	#23760,	r15	;#0x5cd0
    5c84:	82 4c cc 44 	mov	r12,	&0x44cc	;
    5c88:	b0 12 14 60 	call	#24596		;#0x6014
    5c8c:	31 50 1c 00 	add	#28,	r1	;#0x001c
    5c90:	30 41       	ret			
    5c92:	b2 40 0a 00 	mov	#10,	&0x44e0	;#0x000a
    5c96:	e0 44 
    5c98:	1c 42 c6 44 	mov	&0x44c6,r12	;0x44c6
    5c9c:	1f 41 14 00 	mov	20(r1),	r15	;0x00014
    5ca0:	1d 42 c4 44 	mov	&0x44c4,r13	;0x44c4
    5ca4:	3e 40 06 00 	mov	#6,	r14	;
    5ca8:	81 4c 04 00 	mov	r12,	4(r1)	;
    5cac:	81 4d 02 00 	mov	r13,	2(r1)	;
    5cb0:	b0 12 18 61 	call	#24856		;#0x6118
    5cb4:	1c 41 02 00 	mov	2(r1),	r12	;
    5cb8:	0c 5f       	add	r15,	r12	;
    5cba:	3f 40 94 5d 	mov	#23956,	r15	;#0x5d94
    5cbe:	1d 41 04 00 	mov	4(r1),	r13	;
    5cc2:	8c 4d 04 00 	mov	r13,	4(r12)	;
    5cc6:	b0 12 14 60 	call	#24596		;#0x6014
    5cca:	31 50 1c 00 	add	#28,	r1	;#0x001c
    5cce:	30 41       	ret			

00005cd0 <task_8>:
    5cd0:	31 80 0c 00 	sub	#12,	r1	;#0x000c
    5cd4:	1c 42 cc 44 	mov	&0x44cc,r12	;0x44cc
    5cd8:	82 4c ca 44 	mov	r12,	&0x44ca	;
    5cdc:	1c 4c 02 00 	mov	2(r12),	r12	;
    5ce0:	0c 93       	cmp	#0,	r12	;r3 As==00
    5ce2:	2e 24       	jz	$+94     	;abs 0x5d40
    5ce4:	00 3c       	jmp	$+2      	;abs 0x5ce6
    5ce6:	b2 42 e0 44 	mov	#8,	&0x44e0	;r2 As==11
    5cea:	3f 40 ca 44 	mov	#17610,	r15	;#0x44ca
    5cee:	1c 42 ca 44 	mov	&0x44ca,r12	;0x44ca
    5cf2:	1c 4c 02 00 	mov	2(r12),	r12	;
    5cf6:	82 4c c8 44 	mov	r12,	&0x44c8	;
    5cfa:	1d 42 c4 44 	mov	&0x44c4,r13	;0x44c4
    5cfe:	3e 40 06 00 	mov	#6,	r14	;
    5d02:	81 4f 0a 00 	mov	r15,	10(r1)	; 0x000a
    5d06:	0f 4c       	mov	r12,	r15	;
    5d08:	81 4d 08 00 	mov	r13,	8(r1)	;
    5d0c:	b0 12 18 61 	call	#24856		;#0x6118
    5d10:	1c 41 08 00 	mov	8(r1),	r12	;
    5d14:	0c 5f       	add	r15,	r12	;
    5d16:	3f 40 d0 5c 	mov	#23760,	r15	;#0x5cd0
    5d1a:	82 4c ca 44 	mov	r12,	&0x44ca	;
    5d1e:	3e 40 cc 44 	mov	#17612,	r14	;#0x44cc
    5d22:	2d 43       	mov	#2,	r13	;r3 As==10
    5d24:	1c 41 0a 00 	mov	10(r1),	r12	;0x0000a
    5d28:	81 4f 06 00 	mov	r15,	6(r1)	;
    5d2c:	0f 4c       	mov	r12,	r15	;
    5d2e:	b0 12 7c 60 	call	#24700		;#0x607c
    5d32:	1f 41 06 00 	mov	6(r1),	r15	;
    5d36:	b0 12 14 60 	call	#24596		;#0x6014
    5d3a:	31 50 0c 00 	add	#12,	r1	;#0x000c
    5d3e:	30 41       	ret			
    5d40:	b2 40 09 00 	mov	#9,	&0x44e0	;
    5d44:	e0 44 
    5d46:	1c 42 c6 44 	mov	&0x44c6,r12	;0x44c6
    5d4a:	1f 42 c8 44 	mov	&0x44c8,r15	;0x44c8
    5d4e:	1d 42 c4 44 	mov	&0x44c4,r13	;0x44c4
    5d52:	3e 40 06 00 	mov	#6,	r14	;
    5d56:	81 4c 04 00 	mov	r12,	4(r1)	;
    5d5a:	81 4d 02 00 	mov	r13,	2(r1)	;
    5d5e:	b0 12 18 61 	call	#24856		;#0x6118
    5d62:	1c 41 02 00 	mov	2(r1),	r12	;
    5d66:	0c 5f       	add	r15,	r12	;
    5d68:	3f 40 94 5d 	mov	#23956,	r15	;#0x5d94
    5d6c:	1d 41 04 00 	mov	4(r1),	r13	;
    5d70:	8c 4d 02 00 	mov	r13,	2(r12)	;
    5d74:	3e 40 cc 44 	mov	#17612,	r14	;#0x44cc
    5d78:	3c 40 ca 44 	mov	#17610,	r12	;#0x44ca
    5d7c:	2d 43       	mov	#2,	r13	;r3 As==10
    5d7e:	81 4f 00 00 	mov	r15,	0(r1)	;
    5d82:	0f 4c       	mov	r12,	r15	;
    5d84:	b0 12 7c 60 	call	#24700		;#0x607c
    5d88:	2f 41       	mov	@r1,	r15	;
    5d8a:	b0 12 14 60 	call	#24596		;#0x6014
    5d8e:	31 50 0c 00 	add	#12,	r1	;#0x000c
    5d92:	30 41       	ret			

00005d94 <task_9>:
    5d94:	3f 40 e4 58 	mov	#22756,	r15	;#0x58e4
    5d98:	b0 12 14 60 	call	#24596		;#0x6014
    5d9c:	30 41       	ret			
	...

00005da0 <task_10>:
    5da0:	0b 12       	push	r11		;
    5da2:	31 80 0c 00 	sub	#12,	r1	;#0x000c
    5da6:	1c 42 d2 44 	mov	&0x44d2,r12	;0x44d2
    5daa:	82 4c d0 44 	mov	r12,	&0x44d0	;
    5dae:	1d 42 ce 44 	mov	&0x44ce,r13	;0x44ce
    5db2:	1d 4d 80 00 	mov	128(r13),r13	;0x00080
    5db6:	0c 9d       	cmp	r13,	r12	;
    5db8:	42 2c       	jc	$+134    	;abs 0x5e3e
    5dba:	00 3c       	jmp	$+2      	;abs 0x5dbc
    5dbc:	1c 42 d0 44 	mov	&0x44d0,r12	;0x44d0
    5dc0:	1d 42 ce 44 	mov	&0x44ce,r13	;0x44ce
    5dc4:	0c 5c       	rla	r12		;
    5dc6:	0d 5c       	add	r12,	r13	;
    5dc8:	2c 4d       	mov	@r13,	r12	;
    5dca:	0d 41       	mov	r1,	r13	;
    5dcc:	8d 4c 02 00 	mov	r12,	2(r13)	;
    5dd0:	bd 40 31 44 	mov	#17457,	0(r13)	;#0x4431
    5dd4:	00 00 
    5dd6:	b0 12 d6 61 	call	#25046		;#0x61d6
    5dda:	1c 42 d0 44 	mov	&0x44d0,r12	;0x44d0
    5dde:	0c 93       	cmp	#0,	r12	;r3 As==00
    5de0:	81 4f 0a 00 	mov	r15,	10(r1)	; 0x000a
    5de4:	09 24       	jz	$+20     	;abs 0x5df8
    5de6:	00 3c       	jmp	$+2      	;abs 0x5de8
    5de8:	1c 42 d0 44 	mov	&0x44d0,r12	;0x44d0
    5dec:	1c 53       	inc	r12		;
    5dee:	3c b0 07 00 	bit	#7,	r12	;
    5df2:	02 20       	jnz	$+6      	;abs 0x5df8
    5df4:	00 3c       	jmp	$+2      	;abs 0x5df6
    5df6:	00 3c       	jmp	$+2      	;abs 0x5df8
    5df8:	0c 41       	mov	r1,	r12	;
    5dfa:	bc 40 52 44 	mov	#17490,	0(r12)	;#0x4452
    5dfe:	00 00 
    5e00:	b0 12 d6 61 	call	#25046		;#0x61d6
    5e04:	3c 40 d0 44 	mov	#17616,	r12	;#0x44d0
    5e08:	1d 42 d0 44 	mov	&0x44d0,r13	;0x44d0
    5e0c:	1d 53       	inc	r13		;
    5e0e:	3e 40 a0 5d 	mov	#23968,	r14	;#0x5da0
    5e12:	82 4d d0 44 	mov	r13,	&0x44d0	;
    5e16:	3d 40 d2 44 	mov	#17618,	r13	;#0x44d2
    5e1a:	2b 43       	mov	#2,	r11	;r3 As==10
    5e1c:	81 4f 08 00 	mov	r15,	8(r1)	;
    5e20:	0f 4c       	mov	r12,	r15	;
    5e22:	81 4e 06 00 	mov	r14,	6(r1)	;
    5e26:	0e 4d       	mov	r13,	r14	;
    5e28:	0d 4b       	mov	r11,	r13	;
    5e2a:	b0 12 7c 60 	call	#24700		;#0x607c
    5e2e:	1f 41 06 00 	mov	6(r1),	r15	;
    5e32:	b0 12 14 60 	call	#24596		;#0x6014
    5e36:	31 50 0c 00 	add	#12,	r1	;#0x000c
    5e3a:	3b 41       	pop	r11		;
    5e3c:	30 41       	ret			
    5e3e:	1c 42 ce 44 	mov	&0x44ce,r12	;0x44ce
    5e42:	5d 4c 80 00 	mov.b	128(r12),r13	;0x00080
    5e46:	7d b0 07 00 	bit.b	#7,	r13	;
    5e4a:	02 24       	jz	$+6      	;abs 0x5e50
    5e4c:	00 3c       	jmp	$+2      	;abs 0x5e4e
    5e4e:	00 3c       	jmp	$+2      	;abs 0x5e50
    5e50:	0c 41       	mov	r1,	r12	;
    5e52:	bc 40 52 44 	mov	#17490,	0(r12)	;#0x4452
    5e56:	00 00 
    5e58:	b0 12 d6 61 	call	#25046		;#0x61d6
    5e5c:	82 43 64 51 	mov	#0,	&0x5164	;r3 As==00
    5e60:	82 43 66 51 	mov	#0,	&0x5166	;r3 As==00
    5e64:	0c 43       	clr	r12		;
    5e66:	81 4f 04 00 	mov	r15,	4(r1)	;
    5e6a:	0f 4c       	mov	r12,	r15	;
    5e6c:	b0 12 e6 65 	call	#26086		;#0x65e6

00005e70 <clear_isDirty>:
    5e70:	30 41       	ret			
	...

00005e74 <init_hw>:
    5e74:	04 12       	push	r4		;
    5e76:	04 41       	mov	r1,	r4	;
    5e78:	b0 12 a8 5e 	call	#24232		;#0x5ea8
    5e7c:	1c 42 30 01 	mov	&0x0130,r12	;0x0130
    5e80:	3c f0 fe ff 	and	#65534,	r12	;#0xfffe
    5e84:	82 4c 30 01 	mov	r12,	&0x0130	;
    5e88:	b0 12 38 5f 	call	#24376		;#0x5f38
    5e8c:	34 41       	pop	r4		;
    5e8e:	30 41       	ret			

00005e90 <msp_watchdog_enable>:
    5e90:	04 12       	push	r4		;
    5e92:	04 41       	mov	r1,	r4	;
    5e94:	4c 4f       	mov.b	r15,	r12	;
    5e96:	3f d0 08 5a 	bis	#23048,	r15	;#0x5a08
    5e9a:	82 4f 5c 01 	mov	r15,	&0x015c	;
    5e9e:	c2 4c 92 1c 	mov.b	r12,	&0x1c92	;
    5ea2:	34 41       	pop	r4		;
    5ea4:	30 41       	ret			
	...

00005ea8 <msp_watchdog_disable>:
    5ea8:	04 12       	push	r4		;
    5eaa:	04 41       	mov	r1,	r4	;
    5eac:	b2 40 80 5a 	mov	#23168,	&0x015c	;#0x5a80
    5eb0:	5c 01 
    5eb2:	34 41       	pop	r4		;
    5eb4:	30 41       	ret			
	...

00005eb8 <msp_watchdog_kick>:
    5eb8:	04 12       	push	r4		;
    5eba:	04 41       	mov	r1,	r4	;
    5ebc:	5c 42 92 1c 	mov.b	&0x1c92,r12	;0x1c92
    5ec0:	3c d0 08 5a 	bis	#23048,	r12	;#0x5a08
    5ec4:	82 4c 5c 01 	mov	r12,	&0x015c	;
    5ec8:	34 41       	pop	r4		;
    5eca:	30 41       	ret			

00005ecc <memcpy>:
    5ecc:	04 12       	push	r4		;
    5ece:	04 41       	mov	r1,	r4	;
    5ed0:	31 82       	sub	#8,	r1	;r2 As==11
    5ed2:	0c 4d       	mov	r13,	r12	;
    5ed4:	0d 93       	cmp	#0,	r13	;r3 As==00
    5ed6:	84 4f fe ff 	mov	r15,	-2(r4)	; 0xfffe
    5eda:	84 4c fc ff 	mov	r12,	-4(r4)	; 0xfffc
    5ede:	84 4e fa ff 	mov	r14,	-6(r4)	; 0xfffa
    5ee2:	19 24       	jz	$+52     	;abs 0x5f16
    5ee4:	00 3c       	jmp	$+2      	;abs 0x5ee6
    5ee6:	0c 43       	clr	r12		;
    5ee8:	84 4c f8 ff 	mov	r12,	-8(r4)	; 0xfff8
    5eec:	00 3c       	jmp	$+2      	;abs 0x5eee
    5eee:	1c 44 f8 ff 	mov	-8(r4),	r12	;
    5ef2:	1d 44 fa ff 	mov	-6(r4),	r13	;
    5ef6:	0d 5c       	add	r12,	r13	;
    5ef8:	6e 4d       	mov.b	@r13,	r14	;
    5efa:	1d 44 fe ff 	mov	-2(r4),	r13	;
    5efe:	0d 5c       	add	r12,	r13	;
    5f00:	cd 4e 00 00 	mov.b	r14,	0(r13)	;
    5f04:	1c 53       	inc	r12		;
    5f06:	1d 44 fc ff 	mov	-4(r4),	r13	;
    5f0a:	0c 9d       	cmp	r13,	r12	;
    5f0c:	84 4c f8 ff 	mov	r12,	-8(r4)	; 0xfff8
    5f10:	ee 23       	jnz	$-34     	;abs 0x5eee
    5f12:	00 3c       	jmp	$+2      	;abs 0x5f14
    5f14:	00 3c       	jmp	$+2      	;abs 0x5f16
    5f16:	1f 44 fe ff 	mov	-2(r4),	r15	;
    5f1a:	31 52       	add	#8,	r1	;r2 As==11
    5f1c:	34 41       	pop	r4		;
    5f1e:	30 41       	ret			

00005f20 <my_memset>:
    5f20:	04 12       	push	r4		;
    5f22:	04 41       	mov	r1,	r4	;
    5f24:	0c 4f       	mov	r15,	r12	;
    5f26:	0d 5f       	add	r15,	r13	;
    5f28:	0c 9d       	cmp	r13,	r12	;
    5f2a:	04 24       	jz	$+10     	;abs 0x5f34
    5f2c:	cc 4e 00 00 	mov.b	r14,	0(r12)	;
    5f30:	1c 53       	inc	r12		;
    5f32:	fa 3f       	jmp	$-10     	;abs 0x5f28
    5f34:	34 41       	pop	r4		;
    5f36:	30 41       	ret			

00005f38 <msp_clock_setup>:
    5f38:	04 12       	push	r4		;
    5f3a:	04 41       	mov	r1,	r4	;
    5f3c:	f2 40 a5 ff 	mov.b	#65445,	&0x0161	;#0xffa5
    5f40:	61 01 
    5f42:	b2 40 46 00 	mov	#70,	&0x0162	;#0x0046
    5f46:	62 01 
    5f48:	b2 40 33 00 	mov	#51,	&0x0164	;#0x0033
    5f4c:	64 01 
    5f4e:	82 43 66 01 	mov	#0,	&0x0166	;r3 As==00
    5f52:	34 41       	pop	r4		;
    5f54:	30 41       	ret			
	...

00005f58 <task_prologue>:
    5f58:	04 12       	push	r4		;
    5f5a:	04 41       	mov	r1,	r4	;
    5f5c:	31 80 06 00 	sub	#6,	r1	;
    5f60:	1c 42 7c 51 	mov	&0x517c,r12	;0x517c
    5f64:	3c 93       	cmp	#-1,	r12	;r3 As==11
    5f66:	09 20       	jnz	$+20     	;abs 0x5f7a
    5f68:	00 3c       	jmp	$+2      	;abs 0x5f6a
    5f6a:	b0 12 70 5e 	call	#24176		;#0x5e70
    5f6e:	1c 42 7c 51 	mov	&0x517c,r12	;0x517c
    5f72:	1c 53       	inc	r12		;
    5f74:	82 4c 7c 51 	mov	r12,	&0x517c	;
    5f78:	00 3c       	jmp	$+2      	;abs 0x5f7a
    5f7a:	1c 42 7c 51 	mov	&0x517c,r12	;0x517c
    5f7e:	1c 53       	inc	r12		;
    5f80:	82 4c 7c 51 	mov	r12,	&0x517c	;
    5f84:	1c 42 7a 51 	mov	&0x517a,r12	;0x517a
    5f88:	5d 4c 02 00 	mov.b	2(r12),	r13	;
    5f8c:	4d 93       	cmp.b	#0,	r13	;r3 As==00
    5f8e:	3a 24       	jz	$+118    	;abs 0x6004
    5f90:	00 3c       	jmp	$+2      	;abs 0x5f92
    5f92:	00 3c       	jmp	$+2      	;abs 0x5f94
    5f94:	1c 42 6e 51 	mov	&0x516e,r12	;0x516e
    5f98:	1d 42 70 51 	mov	&0x5170,r13	;0x5170
    5f9c:	0c 9d       	cmp	r13,	r12	;
    5f9e:	29 2c       	jc	$+84     	;abs 0x5ff2
    5fa0:	00 3c       	jmp	$+2      	;abs 0x5fa2
    5fa2:	1c 42 6a 51 	mov	&0x516a,r12	;0x516a
    5fa6:	1d 42 6e 51 	mov	&0x516e,r13	;0x516e
    5faa:	0d 5d       	rla	r13		;
    5fac:	0c 5d       	add	r13,	r12	;
    5fae:	2c 4c       	mov	@r12,	r12	;
    5fb0:	84 4c fe ff 	mov	r12,	-2(r4)	; 0xfffe
    5fb4:	1c 42 68 51 	mov	&0x5168,r12	;0x5168
    5fb8:	1d 42 6e 51 	mov	&0x516e,r13	;0x516e
    5fbc:	0d 5d       	rla	r13		;
    5fbe:	0c 5d       	add	r13,	r12	;
    5fc0:	2c 4c       	mov	@r12,	r12	;
    5fc2:	84 4c fc ff 	mov	r12,	-4(r4)	; 0xfffc
    5fc6:	1c 42 6c 51 	mov	&0x516c,r12	;0x516c
    5fca:	1d 42 6e 51 	mov	&0x516e,r13	;0x516e
    5fce:	0d 5d       	rla	r13		;
    5fd0:	0c 5d       	add	r13,	r12	;
    5fd2:	2c 4c       	mov	@r12,	r12	;
    5fd4:	84 4c fa ff 	mov	r12,	-6(r4)	; 0xfffa
    5fd8:	1f 44 fe ff 	mov	-2(r4),	r15	;
    5fdc:	1e 44 fc ff 	mov	-4(r4),	r14	;
    5fe0:	0d 4c       	mov	r12,	r13	;
    5fe2:	b0 12 cc 5e 	call	#24268		;#0x5ecc
    5fe6:	1c 42 6e 51 	mov	&0x516e,r12	;0x516e
    5fea:	1c 53       	inc	r12		;
    5fec:	82 4c 6e 51 	mov	r12,	&0x516e	;
    5ff0:	d1 3f       	jmp	$-92     	;abs 0x5f94
    5ff2:	82 43 70 51 	mov	#0,	&0x5170	;r3 As==00
    5ff6:	82 43 6e 51 	mov	#0,	&0x516e	;r3 As==00
    5ffa:	1c 42 7a 51 	mov	&0x517a,r12	;0x517a
    5ffe:	cc 43 02 00 	mov.b	#0,	2(r12)	;r3 As==00
    6002:	03 3c       	jmp	$+8      	;abs 0x600a
    6004:	82 43 70 51 	mov	#0,	&0x5170	;r3 As==00
    6008:	00 3c       	jmp	$+2      	;abs 0x600a
    600a:	31 50 06 00 	add	#6,	r1	;
    600e:	34 41       	pop	r4		;
    6010:	30 41       	ret			
	...

00006014 <transition_to>:
    6014:	04 12       	push	r4		;
    6016:	04 41       	mov	r1,	r4	;
    6018:	31 80 0a 00 	sub	#10,	r1	;#0x000a
    601c:	0c 4f       	mov	r15,	r12	;
    601e:	84 4f fe ff 	mov	r15,	-2(r4)	; 0xfffe
    6022:	1f 42 7a 51 	mov	&0x517a,r15	;0x517a
    6026:	3d 40 76 51 	mov	#20854,	r13	;#0x5176
    602a:	3e 40 72 51 	mov	#20850,	r14	;#0x5172
    602e:	0f 9d       	cmp	r13,	r15	;
    6030:	84 4c fa ff 	mov	r12,	-6(r4)	; 0xfffa
    6034:	84 4d f8 ff 	mov	r13,	-8(r4)	; 0xfff8
    6038:	84 4e f6 ff 	mov	r14,	-10(r4)	; 0xfff6
    603c:	04 24       	jz	$+10     	;abs 0x6046
    603e:	1c 44 f8 ff 	mov	-8(r4),	r12	;
    6042:	84 4c f6 ff 	mov	r12,	-10(r4)	; 0xfff6
    6046:	1c 44 f6 ff 	mov	-10(r4),r12	;0xfffffff6
    604a:	84 4c fc ff 	mov	r12,	-4(r4)	; 0xfffc
    604e:	1d 44 fe ff 	mov	-2(r4),	r13	;
    6052:	8c 4d 00 00 	mov	r13,	0(r12)	;
    6056:	1c 44 fc ff 	mov	-4(r4),	r12	;
    605a:	dc 43 02 00 	mov.b	#1,	2(r12)	;r3 As==01
    605e:	1c 44 fc ff 	mov	-4(r4),	r12	;
    6062:	82 4c 7a 51 	mov	r12,	&0x517a	;
    6066:	b0 12 58 5f 	call	#24408		;#0x5f58
    606a:	1c 44 fe ff 	mov	-2(r4),	r12	;
    606e:	31 40 00 24 	mov	#9216,	r1	;#0x2400
    6072:	00 4c       	br	r12		;
    6074:	31 50 0a 00 	add	#10,	r1	;#0x000a
    6078:	34 41       	pop	r4		;
    607a:	30 41       	ret			

0000607c <write_to_gbuf>:
    607c:	04 12       	push	r4		;
    607e:	04 41       	mov	r1,	r4	;
    6080:	0b 12       	push	r11		;
    6082:	0a 12       	push	r10		;
    6084:	31 80 0c 00 	sub	#12,	r1	;#0x000c
    6088:	0c 4d       	mov	r13,	r12	;
    608a:	0b 4e       	mov	r14,	r11	;
    608c:	0a 4f       	mov	r15,	r10	;
    608e:	84 4f fa ff 	mov	r15,	-6(r4)	; 0xfffa
    6092:	84 4e f8 ff 	mov	r14,	-8(r4)	; 0xfff8
    6096:	84 4d f6 ff 	mov	r13,	-10(r4)	; 0xfff6
    609a:	1e 42 6c 51 	mov	&0x516c,r14	;0x516c
    609e:	1f 42 70 51 	mov	&0x5170,r15	;0x5170
    60a2:	0f 5f       	rla	r15		;
    60a4:	0e 5f       	add	r15,	r14	;
    60a6:	8e 4d 00 00 	mov	r13,	0(r14)	;
    60aa:	1d 44 f8 ff 	mov	-8(r4),	r13	;
    60ae:	1e 42 6a 51 	mov	&0x516a,r14	;0x516a
    60b2:	1f 42 70 51 	mov	&0x5170,r15	;0x5170
    60b6:	0f 5f       	rla	r15		;
    60b8:	0e 5f       	add	r15,	r14	;
    60ba:	8e 4d 00 00 	mov	r13,	0(r14)	;
    60be:	1d 44 fa ff 	mov	-6(r4),	r13	;
    60c2:	1e 42 68 51 	mov	&0x5168,r14	;0x5168
    60c6:	1f 42 70 51 	mov	&0x5170,r15	;0x5170
    60ca:	0f 5f       	rla	r15		;
    60cc:	0e 5f       	add	r15,	r14	;
    60ce:	8e 4d 00 00 	mov	r13,	0(r14)	;
    60d2:	1d 42 70 51 	mov	&0x5170,r13	;0x5170
    60d6:	1d 53       	inc	r13		;
    60d8:	82 4d 70 51 	mov	r13,	&0x5170	;
    60dc:	84 4c f4 ff 	mov	r12,	-12(r4)	; 0xfff4
    60e0:	84 4b f2 ff 	mov	r11,	-14(r4)	; 0xfff2
    60e4:	84 4a f0 ff 	mov	r10,	-16(r4)	; 0xfff0
    60e8:	31 50 0c 00 	add	#12,	r1	;#0x000c
    60ec:	3a 41       	pop	r10		;
    60ee:	3b 41       	pop	r11		;
    60f0:	34 41       	pop	r4		;
    60f2:	30 41       	ret			

000060f4 <main>:
    60f4:	04 12       	push	r4		;
    60f6:	04 41       	mov	r1,	r4	;
    60f8:	21 83       	decd	r1		;
    60fa:	84 43 fe ff 	mov	#0,	-2(r4)	;r3 As==00, 0xfffe
    60fe:	b0 12 b4 57 	call	#22452		;#0x57b4
    6102:	b0 12 58 5f 	call	#24408		;#0x5f58
    6106:	1c 42 7a 51 	mov	&0x517a,r12	;0x517a
    610a:	2c 4c       	mov	@r12,	r12	;
    610c:	00 4c       	br	r12		;
    610e:	0f 43       	clr	r15		;
    6110:	21 53       	incd	r1		;
    6112:	34 41       	pop	r4		;
    6114:	30 41       	ret			
	...

00006118 <__mulhi3hw_noint>:
    6118:	82 4f c0 04 	mov	r15,	&0x04c0	;
    611c:	82 4e c8 04 	mov	r14,	&0x04c8	;
    6120:	1f 42 ca 04 	mov	&0x04ca,r15	;0x04ca
    6124:	30 41       	ret			

00006126 <xtoa>:
            10,     // +8
             1,     // +9
};

static void xtoa(unsigned long x, const unsigned long *dp)
{
    6126:	6a 15       	pushm	#7,	r10	;16-bit words
    6128:	08 4c       	mov	r12,	r8	;
    612a:	09 4d       	mov	r13,	r9	;
    char c;
    unsigned long d;
    if(x) {
    612c:	0c dd       	bis	r13,	r12	;
    612e:	0c 93       	cmp	#0,	r12	;r3 As==00
    6130:	36 24       	jz	$+110    	;abs 0x619e
        while(x < *dp) ++dp;
    6132:	1d 9e 02 00 	cmp	2(r14),	r13	;
    6136:	05 28       	jnc	$+12     	;abs 0x6142
    6138:	8e 9d 02 00 	cmp	r13,	2(r14)	;
    613c:	0d 20       	jnz	$+28     	;abs 0x6158
    613e:	28 9e       	cmp	@r14,	r8	;
    6140:	0b 2c       	jc	$+24     	;abs 0x6158
    6142:	0c 49       	mov	r9,	r12	;
    6144:	0d 48       	mov	r8,	r13	;
    6146:	2e 52       	add	#4,	r14	;r2 As==10
    6148:	1c 9e 02 00 	cmp	2(r14),	r12	;
    614c:	fc 2b       	jnc	$-6      	;abs 0x6146
    614e:	8e 99 02 00 	cmp	r9,	2(r14)	;
    6152:	02 20       	jnz	$+6      	;abs 0x6158
    6154:	2d 9e       	cmp	@r14,	r13	;
    6156:	f7 2b       	jnc	$-16     	;abs 0x6146
    6158:	0a 4e       	mov	r14,	r10	;
        do {
            d = *dp++;
            c = '0';
    615a:	34 40 30 00 	mov	#48,	r4	;#0x0030
            while(x >= d) ++c, x -= d;
            PUTC(c);
    615e:	35 40 50 63 	mov	#25424,	r5	;#0x6350
    char c;
    unsigned long d;
    if(x) {
        while(x < *dp) ++dp;
        do {
            d = *dp++;
    6162:	26 4a       	mov	@r10,	r6	;
    6164:	17 4a 02 00 	mov	2(r10),	r7	;
            c = '0';
            while(x >= d) ++c, x -= d;
    6168:	09 97       	cmp	r7,	r9	;
    616a:	12 28       	jnc	$+38     	;abs 0x6190
    616c:	07 99       	cmp	r9,	r7	;
    616e:	02 20       	jnz	$+6      	;abs 0x6174
    6170:	08 96       	cmp	r6,	r8	;
    6172:	0e 28       	jnc	$+30     	;abs 0x6190
    6174:	0c 44       	mov	r4,	r12	;
    6176:	0e 47       	mov	r7,	r14	;
    6178:	5c 53       	inc.b	r12		;
    617a:	3c f0 ff 00 	and	#255,	r12	;#0x00ff
    617e:	08 86       	sub	r6,	r8	;
    6180:	09 77       	subc	r7,	r9	;
    6182:	09 97       	cmp	r7,	r9	;
    6184:	06 28       	jnc	$+14     	;abs 0x6192
    6186:	0e 99       	cmp	r9,	r14	;
    6188:	f7 23       	jnz	$-16     	;abs 0x6178
    618a:	08 96       	cmp	r6,	r8	;
    618c:	f5 2f       	jc	$-20     	;abs 0x6178
    618e:	01 3c       	jmp	$+4      	;abs 0x6192
    unsigned long d;
    if(x) {
        while(x < *dp) ++dp;
        do {
            d = *dp++;
            c = '0';
    6190:	0c 44       	mov	r4,	r12	;
            while(x >= d) ++c, x -= d;
            PUTC(c);
    6192:	85 12       	call	r5		;
    6194:	2a 52       	add	#4,	r10	;r2 As==10
        } while(!(d & 1));
    6196:	16 f3       	and	#1,	r6	;r3 As==01
    6198:	06 93       	cmp	#0,	r6	;r3 As==00
    619a:	e3 27       	jz	$-56     	;abs 0x6162
    619c:	04 3c       	jmp	$+10     	;abs 0x61a6
    } else {
        PUTC('0');
    619e:	3c 40 30 00 	mov	#48,	r12	;#0x0030
    61a2:	b0 12 50 63 	call	#25424		;#0x6350
    }
}
    61a6:	64 17       	popm	#7,	r10	;16-bit words
    61a8:	30 41       	ret			

000061aa <puth>:

static void puth(unsigned n)
{
    static const char hex[16] = { '0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
    char c = hex[n & 15];
    PUTC(hex[n & 15]);
    61aa:	3c f0 0f 00 	and	#15,	r12	;#0x000f
    61ae:	5c 4c 56 44 	mov.b	17494(r12),r12	;0x04456
    61b2:	b0 12 50 63 	call	#25424		;#0x6350
}
    61b6:	30 41       	ret			

000061b8 <puts>:

int puts(const char *str){
    61b8:	1a 15       	pushm	#2,	r10	;16-bit words
    61ba:	0a 4c       	mov	r12,	r10	;
	while(*str != 0){
    61bc:	6c 4c       	mov.b	@r12,	r12	;
    61be:	0c 93       	cmp	#0,	r12	;r3 As==00
    61c0:	07 24       	jz	$+16     	;abs 0x61d0
		PUTC(*str++);
    61c2:	39 40 50 63 	mov	#25424,	r9	;#0x6350
    61c6:	1a 53       	inc	r10		;
    61c8:	89 12       	call	r9		;
    char c = hex[n & 15];
    PUTC(hex[n & 15]);
}

int puts(const char *str){
	while(*str != 0){
    61ca:	6c 4a       	mov.b	@r10,	r12	;
    61cc:	0c 93       	cmp	#0,	r12	;r3 As==00
    61ce:	fb 23       	jnz	$-8      	;abs 0x61c6
		PUTC(*str++);
	}
	return 0;
}
    61d0:	0c 43       	clr	r12		;
    61d2:	19 17       	popm	#2,	r10	;16-bit words
    61d4:	30 41       	ret			

000061d6 <printf>:

int printf(const char *format, ...)
{
    61d6:	6a 15       	pushm	#7,	r10	;16-bit words
    61d8:	1a 41 10 00 	mov	16(r1),	r10	;0x00010
    long n;
    int fill_zeros;
    unsigned d;

    va_list a;
    va_start(a, format);
    61dc:	08 41       	mov	r1,	r8	;
    61de:	38 50 12 00 	add	#18,	r8	;#0x0012
                    goto parse_fmt_char;
                case 0: return 0;
                default: goto bad_fmt;
            }
        } else
bad_fmt:    PUTC(c);
    61e2:	35 40 50 63 	mov	#25424,	r5	;#0x6350
                    break;
                case 'i':                       // 16 bit Integer
                case 'u':                       // 16 bit Unsigned
                    i = va_arg(a, int);
                    if(c == 'i' && i < 0) i = -i, PUTC('-');
                    xtoa((unsigned)i, dv + 5);
    61e6:	34 40 7a 44 	mov	#17530,	r4	;#0x447a
    int fill_zeros;
    unsigned d;

    va_list a;
    va_start(a, format);
    while((c = *format++)) {
    61ea:	a7 3c       	jmp	$+336    	;abs 0x633a
        if(c == '%') {
    61ec:	3c 90 25 00 	cmp	#37,	r12	;#0x0025
    61f0:	a2 20       	jnz	$+326    	;abs 0x6336
    61f2:	0d 4a       	mov	r10,	r13	;
    61f4:	2d 53       	incd	r13		;
    61f6:	07 43       	clr	r7		;
            fill_zeros = 0;
parse_fmt_char:
            switch(c = *format++) {
    61f8:	7e 40 6c 00 	mov.b	#108,	r14	;#0x006c
    61fc:	0a 4d       	mov	r13,	r10	;
    61fe:	6c 49       	mov.b	@r9,	r12	;
    6200:	3c 90 6c 00 	cmp	#108,	r12	;#0x006c
    6204:	4b 24       	jz	$+152    	;abs 0x629c
    6206:	4e 9c       	cmp.b	r12,	r14	;
    6208:	11 28       	jnc	$+36     	;abs 0x622c
    620a:	3c 90 30 00 	cmp	#48,	r12	;#0x0030
    620e:	8c 24       	jz	$+282    	;abs 0x6328
    6210:	7d 40 30 00 	mov.b	#48,	r13	;#0x0030
    6214:	4d 9c       	cmp.b	r12,	r13	;
    6216:	03 28       	jnc	$+8      	;abs 0x621e
    6218:	0c 93       	cmp	#0,	r12	;r3 As==00
    621a:	94 24       	jz	$+298    	;abs 0x6344
    621c:	8b 3c       	jmp	$+280    	;abs 0x6334
    621e:	3c 90 63 00 	cmp	#99,	r12	;#0x0063
    6222:	1d 24       	jz	$+60     	;abs 0x625e
    6224:	3c 90 69 00 	cmp	#105,	r12	;#0x0069
    6228:	22 24       	jz	$+70     	;abs 0x626e
    622a:	84 3c       	jmp	$+266    	;abs 0x6334
    622c:	3c 90 73 00 	cmp	#115,	r12	;#0x0073
    6230:	0f 24       	jz	$+32     	;abs 0x6250
    6232:	7d 40 73 00 	mov.b	#115,	r13	;#0x0073
    6236:	4d 9c       	cmp.b	r12,	r13	;
    6238:	04 28       	jnc	$+10     	;abs 0x6242
    623a:	3c 90 6e 00 	cmp	#110,	r12	;#0x006e
    623e:	2e 24       	jz	$+94     	;abs 0x629c
    6240:	79 3c       	jmp	$+244    	;abs 0x6334
    6242:	3c 90 75 00 	cmp	#117,	r12	;#0x0075
    6246:	13 24       	jz	$+40     	;abs 0x626e
    6248:	3c 90 78 00 	cmp	#120,	r12	;#0x0078
    624c:	44 24       	jz	$+138    	;abs 0x62d6
    624e:	72 3c       	jmp	$+230    	;abs 0x6334
                case 's':                       // String
                    io_puts_no_newline(va_arg(a, char*));
    6250:	09 48       	mov	r8,	r9	;
    6252:	29 53       	incd	r9		;
    6254:	2c 48       	mov	@r8,	r12	;
    6256:	b0 12 6c 63 	call	#25452		;#0x636c
    625a:	08 49       	mov	r9,	r8	;
                    break;
    625c:	6e 3c       	jmp	$+222    	;abs 0x633a
                case 'c':                       // Char
                    PUTC(va_arg(a, int)); // TODO: 'char' generated a warning
    625e:	18 53       	inc	r8		;
    6260:	0c 48       	mov	r8,	r12	;
    6262:	1c c3       	bic	#1,	r12	;r3 As==01
    6264:	08 4c       	mov	r12,	r8	;
    6266:	28 53       	incd	r8		;
    6268:	2c 4c       	mov	@r12,	r12	;
    626a:	85 12       	call	r5		;
                    break;
    626c:	66 3c       	jmp	$+206    	;abs 0x633a
                case 'i':                       // 16 bit Integer
                case 'u':                       // 16 bit Unsigned
                    i = va_arg(a, int);
    626e:	18 53       	inc	r8		;
    6270:	0d 48       	mov	r8,	r13	;
    6272:	1d c3       	bic	#1,	r13	;r3 As==01
    6274:	08 4d       	mov	r13,	r8	;
    6276:	28 53       	incd	r8		;
    6278:	29 4d       	mov	@r13,	r9	;
                    if(c == 'i' && i < 0) i = -i, PUTC('-');
    627a:	3c 90 69 00 	cmp	#105,	r12	;#0x0069
    627e:	08 20       	jnz	$+18     	;abs 0x6290
    6280:	09 93       	cmp	#0,	r9	;r3 As==00
    6282:	06 34       	jge	$+14     	;abs 0x6290
    6284:	0c 43       	clr	r12		;
    6286:	0c 89       	sub	r9,	r12	;
    6288:	09 4c       	mov	r12,	r9	;
    628a:	3c 40 2d 00 	mov	#45,	r12	;#0x002d
    628e:	85 12       	call	r5		;
                    xtoa((unsigned)i, dv + 5);
    6290:	0c 49       	mov	r9,	r12	;
    6292:	0d 43       	clr	r13		;
    6294:	0e 44       	mov	r4,	r14	;
    6296:	b0 12 26 61 	call	#24870		;#0x6126
                    break;
    629a:	4f 3c       	jmp	$+160    	;abs 0x633a
                case 'l':                       // 32 bit Long
                case 'n':                       // 32 bit uNsigned loNg
                    n = va_arg(a, long);
    629c:	18 53       	inc	r8		;
    629e:	0d 48       	mov	r8,	r13	;
    62a0:	1d c3       	bic	#1,	r13	;r3 As==01
    62a2:	08 4d       	mov	r13,	r8	;
    62a4:	28 52       	add	#4,	r8	;r2 As==10
    62a6:	26 4d       	mov	@r13,	r6	;
    62a8:	17 4d 02 00 	mov	2(r13),	r7	;
                    if(c == 'l' &&  n < 0) n = -n, PUTC('-');
    62ac:	3c 90 6c 00 	cmp	#108,	r12	;#0x006c
    62b0:	0b 20       	jnz	$+24     	;abs 0x62c8
    62b2:	07 93       	cmp	#0,	r7	;r3 As==00
    62b4:	09 34       	jge	$+20     	;abs 0x62c8
    62b6:	0c 43       	clr	r12		;
    62b8:	0d 43       	clr	r13		;
    62ba:	0c 86       	sub	r6,	r12	;
    62bc:	0d 77       	subc	r7,	r13	;
    62be:	06 4c       	mov	r12,	r6	;
    62c0:	07 4d       	mov	r13,	r7	;
    62c2:	3c 40 2d 00 	mov	#45,	r12	;#0x002d
    62c6:	85 12       	call	r5		;
                    xtoa((unsigned long)n, dv);
    62c8:	0c 46       	mov	r6,	r12	;
    62ca:	0d 47       	mov	r7,	r13	;
    62cc:	3e 40 66 44 	mov	#17510,	r14	;#0x4466
    62d0:	b0 12 26 61 	call	#24870		;#0x6126
                    break;
    62d4:	32 3c       	jmp	$+102    	;abs 0x633a
                case 'x':                       // 16 bit heXadecimal
                    i = va_arg(a, int);
    62d6:	18 53       	inc	r8		;
    62d8:	0c 48       	mov	r8,	r12	;
    62da:	1c c3       	bic	#1,	r12	;r3 As==01
    62dc:	08 4c       	mov	r12,	r8	;
    62de:	28 53       	incd	r8		;
    62e0:	29 4c       	mov	@r12,	r9	;
                    d = i >> 12;
    62e2:	0c 49       	mov	r9,	r12	;
    62e4:	4b 18 0c 11 	rpt #12 { rrax.w	r12		;
                    if (d > 0 || fill_zeros >= 4)
    62e8:	0c 93       	cmp	#0,	r12	;r3 As==00
    62ea:	04 20       	jnz	$+10     	;abs 0x62f4
    62ec:	3d 40 03 00 	mov	#3,	r13	;
    62f0:	0d 97       	cmp	r7,	r13	;
    62f2:	02 34       	jge	$+6      	;abs 0x62f8
                        puth(d);
    62f4:	b0 12 aa 61 	call	#25002		;#0x61aa
                    d = i >> 8;
    62f8:	0c 49       	mov	r9,	r12	;
    62fa:	47 18 0c 11 	rpt #8 { rrax.w	r12		;
                    if (d > 0 || fill_zeros >= 3)
    62fe:	0c 93       	cmp	#0,	r12	;r3 As==00
    6300:	03 20       	jnz	$+8      	;abs 0x6308
    6302:	2d 43       	mov	#2,	r13	;r3 As==10
    6304:	0d 97       	cmp	r7,	r13	;
    6306:	02 34       	jge	$+6      	;abs 0x630c
                        puth(d);
    6308:	b0 12 aa 61 	call	#25002		;#0x61aa
                    d = i >> 4;
    630c:	0c 49       	mov	r9,	r12	;
    630e:	43 18 0c 11 	rpt #4 { rrax.w	r12		;
                    if (d > 0 || fill_zeros >= 2)
    6312:	0c 93       	cmp	#0,	r12	;r3 As==00
    6314:	03 20       	jnz	$+8      	;abs 0x631c
    6316:	1d 43       	mov	#1,	r13	;r3 As==01
    6318:	0d 97       	cmp	r7,	r13	;
    631a:	02 34       	jge	$+6      	;abs 0x6320
                        puth(d);
    631c:	b0 12 aa 61 	call	#25002		;#0x61aa
                    puth(i);
    6320:	0c 49       	mov	r9,	r12	;
    6322:	b0 12 aa 61 	call	#25002		;#0x61aa
                    break;
    6326:	09 3c       	jmp	$+20     	;abs 0x633a
    6328:	29 53       	incd	r9		;
                case '0':
                    c = *format++;
                    fill_zeros = c - '0';
    632a:	67 4d       	mov.b	@r13,	r7	;
    632c:	37 50 d0 ff 	add	#65488,	r7	;#0xffd0
    6330:	2d 53       	incd	r13		;
                    goto parse_fmt_char;
    6332:	64 3f       	jmp	$-310    	;abs 0x61fc
    va_start(a, format);
    while((c = *format++)) {
        if(c == '%') {
            fill_zeros = 0;
parse_fmt_char:
            switch(c = *format++) {
    6334:	09 4a       	mov	r10,	r9	;
                    goto parse_fmt_char;
                case 0: return 0;
                default: goto bad_fmt;
            }
        } else
bad_fmt:    PUTC(c);
    6336:	85 12       	call	r5		;
    6338:	0a 49       	mov	r9,	r10	;
    int fill_zeros;
    unsigned d;

    va_list a;
    va_start(a, format);
    while((c = *format++)) {
    633a:	09 4a       	mov	r10,	r9	;
    633c:	19 53       	inc	r9		;
    633e:	6c 4a       	mov.b	@r10,	r12	;
    6340:	0c 93       	cmp	#0,	r12	;r3 As==00
    6342:	54 23       	jnz	$-342    	;abs 0x61ec
        } else
bad_fmt:    PUTC(c);
    }
    va_end(a);
    return 0; // TODO: return number of chars printed
}
    6344:	0c 43       	clr	r12		;
    6346:	64 17       	popm	#7,	r10	;16-bit words
    6348:	30 41       	ret			

0000634a <mspconsole_init>:

#include <stdlib.h>

void mspconsole_init()
{
    UART_init();
    634a:	b0 12 a8 63 	call	#25512		;#0x63a8
}
    634e:	30 41       	ret			

00006350 <io_putchar>:
			: "=r" (r12)
			);
}

int io_putchar_c(int c)
*/{
    6350:	0a 15       	pushm	#1,	r10	;16-bit words
    6352:	21 83       	decd	r1		;
    6354:	0a 4c       	mov	r12,	r10	;
    uint8_t ch = c;
    6356:	c1 4c 01 00 	mov.b	r12,	1(r1)	;
    UART_send(&ch, 1);
    635a:	0c 41       	mov	r1,	r12	;
    635c:	1c 53       	inc	r12		;
    635e:	1d 43       	mov	#1,	r13	;r3 As==01
    6360:	b0 12 34 64 	call	#25652		;#0x6434
    return c;
}
    6364:	0c 4a       	mov	r10,	r12	;
    6366:	21 53       	incd	r1		;
    6368:	0a 17       	popm	#1,	r10	;16-bit words
    636a:	30 41       	ret			

0000636c <io_puts_no_newline>:

int io_puts_no_newline(const char *ptr)
{
    636c:	0a 15       	pushm	#1,	r10	;16-bit words
    unsigned len = 0;
    const char *p = ptr;

    while (*p++ != '\0')
    636e:	cc 93 00 00 	cmp.b	#0,	0(r12)	;r3 As==00
    6372:	08 24       	jz	$+18     	;abs 0x6384
    6374:	0a 43       	clr	r10		;
        len++;
    6376:	1a 53       	inc	r10		;
    6378:	0d 4c       	mov	r12,	r13	;
    637a:	0d 5a       	add	r10,	r13	;
int io_puts_no_newline(const char *ptr)
{
    unsigned len = 0;
    const char *p = ptr;

    while (*p++ != '\0')
    637c:	cd 93 00 00 	cmp.b	#0,	0(r13)	;r3 As==00
    6380:	fa 23       	jnz	$-10     	;abs 0x6376
    6382:	01 3c       	jmp	$+4      	;abs 0x6386
    return c;
}

int io_puts_no_newline(const char *ptr)
{
    unsigned len = 0;
    6384:	0a 43       	clr	r10		;
    const char *p = ptr;

    while (*p++ != '\0')
        len++;

    UART_send((uint8_t *)ptr, len);
    6386:	0d 4a       	mov	r10,	r13	;
    6388:	b0 12 34 64 	call	#25652		;#0x6434
    return len;
}
    638c:	0c 4a       	mov	r10,	r12	;
    638e:	0a 17       	popm	#1,	r10	;16-bit words
    6390:	30 41       	ret			

00006392 <io_puts>:

int io_puts(const char *ptr)
{
    6392:	0a 15       	pushm	#1,	r10	;16-bit words
    unsigned len;

    len = io_puts_no_newline(ptr);
    6394:	b0 12 6c 63 	call	#25452		;#0x636c
    6398:	0a 4c       	mov	r12,	r10	;

    // Semantics of puts are annoying...
    io_putchar('\n');
    639a:	3c 40 0a 00 	mov	#10,	r12	;#0x000a
    639e:	b0 12 50 63 	call	#25424		;#0x6350

    return len;
}
    63a2:	0c 4a       	mov	r10,	r12	;
    63a4:	0a 17       	popm	#1,	r10	;16-bit words
    63a6:	30 41       	ret			

000063a8 <UART_init>:
 * @todo Currently assumes an 8MHz SMCLK. Make robust to clock frequency changes by using 32k ACLK.
 */
void UART_init(void) {

    // Configure USCI_A0 for UART mode
    UCA0CTLW0 = UCSWRST;                      // Put eUSCI in reset
    63a8:	92 43 c0 05 	mov	#1,	&0x05c0	;r3 As==01
    UCA0CTLW0 |= UCSSEL__SMCLK;               // CLK = SMCLK
    63ac:	b2 d0 80 00 	bis	#128,	&0x05c0	;#0x0080
    63b0:	c0 05 
    UCA0BR1 = 0;
    UCA0MCTLW = UCOS16 | UCBRF_2 | (0xBB << 8);
#endif // UART_BAUDRATE
#elif UART_CLOCK == 8000000
#if UART_BAUDRATE == 115200
    UCA0BR0 = 4;
    63b2:	e2 42 c6 05 	mov.b	#4,	&0x05c6	;r2 As==10
    UCA0BR1 = 0;
    63b6:	c2 43 c7 05 	mov.b	#0,	&0x05c7	;r3 As==00
    UCA0MCTLW = UCOS16 | UCBRF_4 | (0x55 << 8);
    63ba:	b2 40 41 55 	mov	#21825,	&0x05c8	;#0x5541
    63be:	c8 05 
#endif // UART_BAUDRATE
#endif // UART_CLOCK

#if defined(__MSP430FR5969__) || defined(__MSP430FR5949__)
    PUART_TXSEL0 &= ~PIN_UART_TX; // TX pin to UART module
    63c0:	d2 c3 0b 02 	bic.b	#1,	&0x020b	;r3 As==01
    PUART_TXSEL1 |= PIN_UART_TX;
    63c4:	d2 d3 0d 02 	bis.b	#1,	&0x020d	;r3 As==01

    PUART_RXSEL0 &= ~PIN_UART_RX; // RX pin to UART module
    63c8:	e2 c3 0b 02 	bic.b	#2,	&0x020b	;r3 As==10
    PUART_RXSEL1 |= PIN_UART_RX;
    63cc:	e2 d3 0d 02 	bis.b	#2,	&0x020d	;r3 As==10
    PUART_RXSEL1 &= ~PIN_UART_RX;
#else
#error MCU not supported
#endif

    UCA0CTLW0 &= ~UCSWRST;                    // Initialize eUSCI
    63d0:	92 c3 c0 05 	bic	#1,	&0x05c0	;r3 As==01

    // Initialize module state
    UART_SM.isTxBusy = FALSE;
    63d4:	3c 40 94 1c 	mov	#7316,	r12	;#0x1c94
    63d8:	cc 43 00 00 	mov.b	#0,	0(r12)	;r3 As==00
    UART_SM.txBytesRemaining = 0;
    63dc:	8c 43 04 00 	mov	#0,	4(r12)	;r3 As==00
    UART_SM.isRxBusy = FALSE;
    63e0:	cc 43 06 00 	mov.b	#0,	6(r12)	;r3 As==00
    UART_SM.rxBytesRemaining = 0;
    63e4:	8c 43 0a 00 	mov	#0,	10(r12)	;r3 As==00, 0x000a

}
    63e8:	30 41       	ret			

000063ea <UART_teardown>:
void UART_teardown()
{
    // disable UART
    // Not sure how to do this best, but set all UCA0* registers to
    // their default values.  See User's Guide for default values.
    PUART_TXSEL0 &= ~PIN_UART_TX;
    63ea:	d2 c3 0b 02 	bic.b	#1,	&0x020b	;r3 As==01
    PUART_TXSEL1 &= ~PIN_UART_TX;
    63ee:	d2 c3 0d 02 	bic.b	#1,	&0x020d	;r3 As==01
    PUART_RXSEL0 &= ~PIN_UART_RX;
    63f2:	e2 c3 0b 02 	bic.b	#2,	&0x020b	;r3 As==10
    PUART_RXSEL1 &= ~PIN_UART_RX;
    63f6:	e2 c3 0d 02 	bic.b	#2,	&0x020d	;r3 As==10
    UCA0CTLW0 = 0x0001;
    63fa:	92 43 c0 05 	mov	#1,	&0x05c0	;r3 As==01
    UCA0BR0 = 0x0000;
    63fe:	c2 43 c6 05 	mov.b	#0,	&0x05c6	;r3 As==00
    UCA0MCTLW = 0x0000;
    6402:	82 43 c8 05 	mov	#0,	&0x05c8	;r3 As==00
    UCA0IE = 0x0000;
    6406:	82 43 da 05 	mov	#0,	&0x05da	;r3 As==00
    UCA0IFG = 0x0000;
    640a:	82 43 dc 05 	mov	#0,	&0x05dc	;r3 As==00
}
    640e:	30 41       	ret			

00006410 <UART_asyncSend>:
 * @param size the number of bytes to send
 */
void UART_asyncSend(uint8_t* txBuf, uint16_t size) {

    // Block until prior transmission has completed
    while (UART_SM.isTxBusy)
    6410:	3f 40 94 1c 	mov	#7316,	r15	;#0x1c94
    6414:	6e 4f       	mov.b	@r15,	r14	;
    6416:	0e 93       	cmp	#0,	r14	;r3 As==00
    6418:	fd 23       	jnz	$-4      	;abs 0x6414
        ;

    // Set up for start of transmission
    UART_SM.isTxBusy = TRUE;
    641a:	3e 40 94 1c 	mov	#7316,	r14	;#0x1c94
    641e:	de 43 00 00 	mov.b	#1,	0(r14)	;r3 As==01
    UART_SM.txPtr = txBuf;
    6422:	8e 4c 02 00 	mov	r12,	2(r14)	;
    UART_SM.txBytesRemaining = size;
    6426:	8e 4d 04 00 	mov	r13,	4(r14)	;

    UCA0IFG &= ~(USCI_UART_UCTXIFG); // Clear the 'ready to accept byte' flag
    642a:	a2 c2 dc 05 	bic	#4,	&0x05dc	;r2 As==10

    UCA0IE |= UCTXIE; // Enable USCI_A0 TX interrupt ('ready to accept byte')
    642e:	a2 d3 da 05 	bis	#2,	&0x05da	;r3 As==10
    //UCA0TXBUF = *(UART_SM.txPtr++); // Load in first byte

    // The bytes are transmitted in the TX ISR (which is called whenever the
    // UART is ready to accept a byte), and the isBusy flag is cleared when the
    // last byte has *finished* transmitting.
}
    6432:	30 41       	ret			

00006434 <UART_send>:
 * @param size the number of bytes to send
 *
 */
void UART_send(uint8_t* txBuf, uint16_t size) {

    UART_asyncSend(txBuf, size);
    6434:	b0 12 10 64 	call	#25616		;#0x6410

    // Block until complete
    while (UART_SM.isTxBusy)
    6438:	3d 40 94 1c 	mov	#7316,	r13	;#0x1c94
    643c:	6c 4d       	mov.b	@r13,	r12	;
    643e:	0c 93       	cmp	#0,	r12	;r3 As==00
    6440:	fd 23       	jnz	$-4      	;abs 0x643c
        ;
}
    6442:	30 41       	ret			

00006444 <UART_critSend>:
 *  and use UART status register polling instead of interrupts.
 */
void UART_critSend(uint8_t* txBuf, uint16_t size) {

    // Block until prior transmission has completed
    while (UART_SM.isTxBusy)
    6444:	3f 40 94 1c 	mov	#7316,	r15	;#0x1c94
    6448:	6e 4f       	mov.b	@r15,	r14	;
    644a:	0e 93       	cmp	#0,	r14	;r3 As==00
    644c:	fd 23       	jnz	$-4      	;abs 0x6448
        ;

    // Set up for start of transmission
    UART_SM.isTxBusy = TRUE;
    644e:	3e 40 94 1c 	mov	#7316,	r14	;#0x1c94
    6452:	de 43 00 00 	mov.b	#1,	0(r14)	;r3 As==01
    UART_SM.txPtr = txBuf;
    6456:	8e 4c 02 00 	mov	r12,	2(r14)	;
    UART_SM.txBytesRemaining = size;
    645a:	8e 4d 04 00 	mov	r13,	4(r14)	;

    UCA0IV &= ~(USCI_UART_UCTXIFG); // Clear byte completion flag
    645e:	a2 c2 de 05 	bic	#4,	&0x05de	;r2 As==10

    while (UART_SM.txBytesRemaining--) {
    6462:	1c 4e 04 00 	mov	4(r14),	r12	;
    6466:	0d 4c       	mov	r12,	r13	;
    6468:	3d 53       	add	#-1,	r13	;r3 As==11
    646a:	8e 4d 04 00 	mov	r13,	4(r14)	;
    646e:	0c 93       	cmp	#0,	r12	;r3 As==00
    6470:	19 24       	jz	$+52     	;abs 0x64a4
        UCA0TXBUF = *(UART_SM.txPtr++); // Load in next byte
    6472:	0c 4e       	mov	r14,	r12	;
    6474:	1d 4c 02 00 	mov	2(r12),	r13	;
    6478:	0e 4d       	mov	r13,	r14	;
    647a:	1e 53       	inc	r14		;
    647c:	8c 4e 02 00 	mov	r14,	2(r12)	;
    6480:	6d 4d       	mov.b	@r13,	r13	;
    6482:	3d f0 ff 00 	and	#255,	r13	;#0x00ff
    6486:	82 4d ce 05 	mov	r13,	&0x05ce	;
        while (!(UCA0IFG & UCTXIFG))
    648a:	a2 b3 dc 05 	bit	#2,	&0x05dc	;r3 As==10
    648e:	fd 27       	jz	$-4      	;abs 0x648a
            ; // Wait for byte transmission to complete
        UCA0IFG &= ~(UCTXIFG); // Clear byte completion flag
    6490:	a2 c3 dc 05 	bic	#2,	&0x05dc	;r3 As==10
    UART_SM.txPtr = txBuf;
    UART_SM.txBytesRemaining = size;

    UCA0IV &= ~(USCI_UART_UCTXIFG); // Clear byte completion flag

    while (UART_SM.txBytesRemaining--) {
    6494:	1d 4c 04 00 	mov	4(r12),	r13	;
    6498:	0e 4d       	mov	r13,	r14	;
    649a:	3e 53       	add	#-1,	r14	;r3 As==11
    649c:	8c 4e 04 00 	mov	r14,	4(r12)	;
    64a0:	0d 93       	cmp	#0,	r13	;r3 As==00
    64a2:	e8 23       	jnz	$-46     	;abs 0x6474
        while (!(UCA0IFG & UCTXIFG))
            ; // Wait for byte transmission to complete
        UCA0IFG &= ~(UCTXIFG); // Clear byte completion flag
    }

    UART_SM.isTxBusy = FALSE;
    64a4:	c2 43 94 1c 	mov.b	#0,	&0x1c94	;r3 As==00
}
    64a8:	30 41       	ret			

000064aa <UART_isTxBusy>:
/**
 * Return true if UART TX module is in the middle of an operation, false if not.
 */
uint8_t UART_isTxBusy() {
    return UART_SM.isTxBusy;
}
    64aa:	5c 42 94 1c 	mov.b	&0x1c94,r12	;0x1c94
    64ae:	30 41       	ret			

000064b0 <UART_asyncReceive>:
 * @param size the number of bytes to receive
 */
void UART_asyncReceive(uint8_t* rxBuf, uint16_t size) {

    // Block until prior reception has completed
    while (UART_SM.isRxBusy)
    64b0:	3f 40 94 1c 	mov	#7316,	r15	;#0x1c94
    64b4:	5e 4f 06 00 	mov.b	6(r15),	r14	;
    64b8:	0e 93       	cmp	#0,	r14	;r3 As==00
    64ba:	fc 23       	jnz	$-6      	;abs 0x64b4
        ;

    // Set up for start of reception
    UART_SM.isRxBusy = TRUE;
    64bc:	3e 40 94 1c 	mov	#7316,	r14	;#0x1c94
    64c0:	de 43 06 00 	mov.b	#1,	6(r14)	;r3 As==01
    UART_SM.rxPtr = rxBuf;
    64c4:	8e 4c 08 00 	mov	r12,	8(r14)	;
    UART_SM.rxBytesRemaining = size;
    64c8:	8e 4d 0a 00 	mov	r13,	10(r14)	; 0x000a

    UCA0IFG &= ~(UCRXIFG); // Clear byte completion flag
    64cc:	92 c3 dc 05 	bic	#1,	&0x05dc	;r3 As==01

    UCA0IE |= UCRXIE; // Enable USCI_A0 RX interrupt
    64d0:	92 d3 da 05 	bis	#1,	&0x05da	;r3 As==01

    // The rest of the reception will be completed by the RX ISR (which
    //  will wake after each byte has been received), and the isBusy flag
    //  will be cleared when done.
}
    64d4:	30 41       	ret			

000064d6 <UART_receive>:
 * @param size the number of bytes to receive
 *
 */
void UART_receive(uint8_t* rxBuf, uint16_t size) {

    UART_asyncReceive(rxBuf, size);
    64d6:	b0 12 b0 64 	call	#25776		;#0x64b0

    // Block until complete
    while (UART_SM.isRxBusy)
    64da:	3d 40 94 1c 	mov	#7316,	r13	;#0x1c94
    64de:	5c 4d 06 00 	mov.b	6(r13),	r12	;
    64e2:	0c 93       	cmp	#0,	r12	;r3 As==00
    64e4:	fc 23       	jnz	$-6      	;abs 0x64de
        ;
}
    64e6:	30 41       	ret			

000064e8 <UART_critReceive>:
 *  and use UART status register polling instead of interrupts.
 */
void UART_critReceive(uint8_t* rxBuf, uint16_t size) {

    // Block until prior reception has completed
    while (UART_SM.isRxBusy)
    64e8:	3f 40 94 1c 	mov	#7316,	r15	;#0x1c94
    64ec:	5e 4f 06 00 	mov.b	6(r15),	r14	;
    64f0:	0e 93       	cmp	#0,	r14	;r3 As==00
    64f2:	fc 23       	jnz	$-6      	;abs 0x64ec
        ;

    // Set up for start of reception
    UART_SM.isRxBusy = TRUE;
    64f4:	3e 40 94 1c 	mov	#7316,	r14	;#0x1c94
    64f8:	de 43 06 00 	mov.b	#1,	6(r14)	;r3 As==01
    UART_SM.rxPtr = rxBuf;
    64fc:	8e 4c 08 00 	mov	r12,	8(r14)	;
    UART_SM.rxBytesRemaining = size;
    6500:	8e 4d 0a 00 	mov	r13,	10(r14)	; 0x000a

    UCA0IFG &= ~(UCRXIFG); // Clear byte completion flag
    6504:	92 c3 dc 05 	bic	#1,	&0x05dc	;r3 As==01

    while (UART_SM.rxBytesRemaining--) {
    6508:	1c 4e 0a 00 	mov	10(r14),r12	;0x0000a
    650c:	0d 4c       	mov	r12,	r13	;
    650e:	3d 53       	add	#-1,	r13	;r3 As==11
    6510:	8e 4d 0a 00 	mov	r13,	10(r14)	; 0x000a
    6514:	0c 93       	cmp	#0,	r12	;r3 As==00
    6516:	18 24       	jz	$+50     	;abs 0x6548
        while (!(UCA0IFG & UCRXIFG))
            ; // Wait for byte reception to complete
        UCA0IFG &= ~(UCRXIFG); // Clear byte completion flag

        uint8_t rec = UCA0RXBUF; // Read next byte
        *(UART_SM.rxPtr++) = rec; // Store byte
    6518:	0c 4e       	mov	r14,	r12	;
    UART_SM.rxBytesRemaining = size;

    UCA0IFG &= ~(UCRXIFG); // Clear byte completion flag

    while (UART_SM.rxBytesRemaining--) {
        while (!(UCA0IFG & UCRXIFG))
    651a:	92 b3 dc 05 	bit	#1,	&0x05dc	;r3 As==01
    651e:	fd 27       	jz	$-4      	;abs 0x651a
            ; // Wait for byte reception to complete
        UCA0IFG &= ~(UCRXIFG); // Clear byte completion flag
    6520:	92 c3 dc 05 	bic	#1,	&0x05dc	;r3 As==01

        uint8_t rec = UCA0RXBUF; // Read next byte
    6524:	1e 42 cc 05 	mov	&0x05cc,r14	;0x05cc
        *(UART_SM.rxPtr++) = rec; // Store byte
    6528:	1d 4c 08 00 	mov	8(r12),	r13	;
    652c:	0f 4d       	mov	r13,	r15	;
    652e:	1f 53       	inc	r15		;
    6530:	8c 4f 08 00 	mov	r15,	8(r12)	;
    while (UART_SM.rxBytesRemaining--) {
        while (!(UCA0IFG & UCRXIFG))
            ; // Wait for byte reception to complete
        UCA0IFG &= ~(UCRXIFG); // Clear byte completion flag

        uint8_t rec = UCA0RXBUF; // Read next byte
    6534:	cd 4e 00 00 	mov.b	r14,	0(r13)	;
    UART_SM.rxPtr = rxBuf;
    UART_SM.rxBytesRemaining = size;

    UCA0IFG &= ~(UCRXIFG); // Clear byte completion flag

    while (UART_SM.rxBytesRemaining--) {
    6538:	1d 4c 0a 00 	mov	10(r12),r13	;0x0000a
    653c:	0e 4d       	mov	r13,	r14	;
    653e:	3e 53       	add	#-1,	r14	;r3 As==11
    6540:	8c 4e 0a 00 	mov	r14,	10(r12)	; 0x000a
    6544:	0d 93       	cmp	#0,	r13	;r3 As==00
    6546:	e9 23       	jnz	$-44     	;abs 0x651a

        uint8_t rec = UCA0RXBUF; // Read next byte
        *(UART_SM.rxPtr++) = rec; // Store byte
    }

    UART_SM.isRxBusy = FALSE;
    6548:	c2 43 9a 1c 	mov.b	#0,	&0x1c9a	;r3 As==00
}
    654c:	30 41       	ret			

0000654e <UART_isRxBusy>:
/**
 * Return true if UART RX module is in the middle of an operation, false if not.
 */
uint8_t UART_isRxBusy() {
    return UART_SM.isRxBusy;
}
    654e:	5c 42 9a 1c 	mov.b	&0x1c9a,r12	;0x1c9a
    6552:	30 41       	ret			

00006554 <UART_isRxDone>:
 * Return true if UART RX module is not in the middle of an operation (e.g. done), false if not.
 *
 * Could be used in combination with UART_asyncReceive.
 */
uint8_t UART_isRxDone() {
    return !(UART_SM.isRxBusy);
    6554:	5c 42 9a 1c 	mov.b	&0x1c9a,r12	;0x1c9a
    6558:	3c 53       	add	#-1,	r12	;r3 As==11
}
    655a:	5c 03       	rrum	#1,	r12	;
    655c:	4d 18 0c 11 	rpt #14 { rrax.w	r12		;
    6560:	30 41       	ret			

00006562 <USCI_A0_ISR>:
#elif defined(__GNUC__)
void __attribute__ ((interrupt(USCI_A0_VECTOR))) USCI_A0_ISR (void)
#else
#error Compiler not supported!
#endif
{
    6562:	3f 15       	pushm	#4,	r15	;16-bit words
    uint8_t rec;

    switch (__even_in_range(UCA0IV, USCI_UART_UCTXCPTIFG)) {
    6564:	1c 42 de 05 	mov	&0x05de,r12	;0x05de
    6568:	2c 93       	cmp	#2,	r12	;r3 As==10
    656a:	03 24       	jz	$+8      	;abs 0x6572
    656c:	2c 92       	cmp	#4,	r12	;r2 As==10
    656e:	1e 24       	jz	$+62     	;abs 0x65ac
    6570:	38 3c       	jmp	$+114    	;abs 0x65e2
    case USCI_NONE:
        break;
    case USCI_UART_UCRXIFG:
        if (UART_SM.rxBytesRemaining--) {
    6572:	3d 40 94 1c 	mov	#7316,	r13	;#0x1c94
    6576:	1c 4d 0a 00 	mov	10(r13),r12	;0x0000a
    657a:	0e 4c       	mov	r12,	r14	;
    657c:	3e 53       	add	#-1,	r14	;r3 As==11
    657e:	8d 4e 0a 00 	mov	r14,	10(r13)	; 0x000a
    6582:	0c 93       	cmp	#0,	r12	;r3 As==00
    6584:	0a 24       	jz	$+22     	;abs 0x659a
            rec = UCA0RXBUF; // Read next byte
    6586:	1e 42 cc 05 	mov	&0x05cc,r14	;0x05cc
            *(UART_SM.rxPtr++) = rec; // Store byte
    658a:	1c 4d 08 00 	mov	8(r13),	r12	;
    658e:	0f 4c       	mov	r12,	r15	;
    6590:	1f 53       	inc	r15		;
    6592:	8d 4f 08 00 	mov	r15,	8(r13)	;
    switch (__even_in_range(UCA0IV, USCI_UART_UCTXCPTIFG)) {
    case USCI_NONE:
        break;
    case USCI_UART_UCRXIFG:
        if (UART_SM.rxBytesRemaining--) {
            rec = UCA0RXBUF; // Read next byte
    6596:	cc 4e 00 00 	mov.b	r14,	0(r12)	;
            *(UART_SM.rxPtr++) = rec; // Store byte
        }

        if (0 == UART_SM.rxBytesRemaining) {
    659a:	1c 42 9e 1c 	mov	&0x1c9e,r12	;0x1c9e
    659e:	0c 93       	cmp	#0,	r12	;r3 As==00
    65a0:	20 20       	jnz	$+66     	;abs 0x65e2
            UCA0IE &= ~(UCRXIE); // Disable USCI_A0 RX interrupt
    65a2:	92 c3 da 05 	bic	#1,	&0x05da	;r3 As==01
            UART_SM.isRxBusy = FALSE;
    65a6:	c2 43 9a 1c 	mov.b	#0,	&0x1c9a	;r3 As==00
    65aa:	1b 3c       	jmp	$+56     	;abs 0x65e2
        }

        break;
    case USCI_UART_UCTXIFG:
        UCA0TXBUF = *(UART_SM.txPtr++); // if interrupt was enabled, there must be bytes
    65ac:	3c 40 94 1c 	mov	#7316,	r12	;#0x1c94
    65b0:	1d 4c 02 00 	mov	2(r12),	r13	;
    65b4:	0e 4d       	mov	r13,	r14	;
    65b6:	1e 53       	inc	r14		;
    65b8:	8c 4e 02 00 	mov	r14,	2(r12)	;
    65bc:	6d 4d       	mov.b	@r13,	r13	;
    65be:	3d f0 ff 00 	and	#255,	r13	;#0x00ff
    65c2:	82 4d ce 05 	mov	r13,	&0x05ce	;
        if (--UART_SM.txBytesRemaining == 0) {
    65c6:	1d 4c 04 00 	mov	4(r12),	r13	;
    65ca:	3d 53       	add	#-1,	r13	;r3 As==11
    65cc:	8c 4d 04 00 	mov	r13,	4(r12)	;
    65d0:	0d 93       	cmp	#0,	r13	;r3 As==00
    65d2:	07 20       	jnz	$+16     	;abs 0x65e2
            // TODO: actually, this wait should probably happen for blocking version only
            while (UCA0STATW & UCBUSY); // wait for last byte to finish transmitting
    65d4:	d2 b3 ca 05 	bit.b	#1,	&0x05ca	;r3 As==01
    65d8:	fd 23       	jnz	$-4      	;abs 0x65d4
            UCA0IE &= ~(UCTXIE); // Disable USCI_A0 TX interrupt
    65da:	a2 c3 da 05 	bic	#2,	&0x05da	;r3 As==10
            UART_SM.isTxBusy = FALSE;
    65de:	c2 43 94 1c 	mov.b	#0,	&0x1c94	;r3 As==00
    case USCI_UART_UCSTTIFG:
        break;
    case USCI_UART_UCTXCPTIFG:
        break;
    }
}
    65e2:	3c 17       	popm	#4,	r15	;16-bit words
    65e4:	00 13       	reti			

000065e6 <exit>:
    65e6:	0a 15       	pushm	#1,	r10	;16-bit words
    65e8:	0a 4c       	mov	r12,	r10	;
    65ea:	0d 43       	clr	r13		;
    65ec:	b0 12 04 66 	call	#26116		;#0x6604
    65f0:	1c 42 8e 44 	mov	&0x448e,r12	;0x448e
    65f4:	1d 4c 14 00 	mov	20(r12),r13	;0x00014
    65f8:	0d 93       	cmp	#0,	r13	;r3 As==00
    65fa:	01 24       	jz	$+4      	;abs 0x65fe
    65fc:	8d 12       	call	r13		;
    65fe:	0c 4a       	mov	r10,	r12	;
    6600:	b0 12 9c 67 	call	#26524		;#0x679c

00006604 <__call_exitprocs>:
    6604:	6a 15       	pushm	#7,	r10	;16-bit words
    6606:	31 80 0e 00 	sub	#14,	r1	;#0x000e
    660a:	81 4c 0a 00 	mov	r12,	10(r1)	; 0x000a
    660e:	81 4d 06 00 	mov	r13,	6(r1)	;
    6612:	1e 42 8e 44 	mov	&0x448e,r14	;0x448e
    6616:	3e 50 24 00 	add	#36,	r14	;#0x0024
    661a:	81 4e 0c 00 	mov	r14,	12(r1)	; 0x000c
    661e:	1e 42 8e 44 	mov	&0x448e,r14	;0x448e
    6622:	1a 4e 24 00 	mov	36(r14),r10	;0x00024
    6626:	16 41 0c 00 	mov	12(r1),	r6	;0x0000c
    662a:	34 40 00 00 	mov	#0,	r4	;
    662e:	0a 93       	cmp	#0,	r10	;r3 As==00
    6630:	77 24       	jz	$+240    	;abs 0x6720
    6632:	15 4a 44 00 	mov	68(r10),r5	;0x00044
    6636:	19 4a 02 00 	mov	2(r10),	r9	;
    663a:	08 49       	mov	r9,	r8	;
    663c:	38 53       	add	#-1,	r8	;r3 As==11
    663e:	39 50 ff 7f 	add	#32767,	r9	;#0x7fff
    6642:	09 59       	rla	r9		;
    6644:	07 45       	mov	r5,	r7	;
    6646:	07 59       	add	r9,	r7	;
    6648:	29 52       	add	#4,	r9	;r2 As==10
    664a:	09 5a       	add	r10,	r9	;
    664c:	08 93       	cmp	#0,	r8	;r3 As==00
    664e:	52 38       	jl	$+166    	;abs 0x66f4
    6650:	81 93 06 00 	cmp	#0,	6(r1)	;r3 As==00
    6654:	06 24       	jz	$+14     	;abs 0x6662
    6656:	05 93       	cmp	#0,	r5	;r3 As==00
    6658:	47 24       	jz	$+144    	;abs 0x66e8
    665a:	97 91 06 00 	cmp	6(r1),	64(r7)	; 0x0040
    665e:	40 00 
    6660:	43 20       	jnz	$+136    	;abs 0x66e8
    6662:	2f 49       	mov	@r9,	r15	;
    6664:	1c 4a 02 00 	mov	2(r10),	r12	;
    6668:	3c 53       	add	#-1,	r12	;r3 As==11
    666a:	08 9c       	cmp	r12,	r8	;
    666c:	03 20       	jnz	$+8      	;abs 0x6674
    666e:	8a 48 02 00 	mov	r8,	2(r10)	;
    6672:	02 3c       	jmp	$+6      	;abs 0x6678
    6674:	89 43 00 00 	mov	#0,	0(r9)	;r3 As==00
    6678:	0f 93       	cmp	#0,	r15	;r3 As==00
    667a:	36 24       	jz	$+110    	;abs 0x66e8
    667c:	91 4a 02 00 	mov	2(r10),	8(r1)	;
    6680:	08 00 
    6682:	05 93       	cmp	#0,	r5	;r3 As==00
    6684:	18 24       	jz	$+50     	;abs 0x66b6
    6686:	1c 43       	mov	#1,	r12	;r3 As==01
    6688:	0d 48       	mov	r8,	r13	;
    668a:	81 4f 00 00 	mov	r15,	0(r1)	;
    668e:	b0 12 4c 67 	call	#26444		;#0x674c
    6692:	0d 4c       	mov	r12,	r13	;
    6694:	0e 4c       	mov	r12,	r14	;
    6696:	4e 18 0e 11 	rpt #15 { rrax.w	r14		;
    669a:	81 4d 02 00 	mov	r13,	2(r1)	;
    669e:	81 4e 04 00 	mov	r14,	4(r1)	;
    66a2:	1b 45 80 00 	mov	128(r5),r11	;0x00080
    66a6:	0b fc       	and	r12,	r11	;
    66a8:	1d 45 82 00 	mov	130(r5),r13	;0x00082
    66ac:	0d fe       	and	r14,	r13	;
    66ae:	0d db       	bis	r11,	r13	;
    66b0:	2f 41       	mov	@r1,	r15	;
    66b2:	0d 93       	cmp	#0,	r13	;r3 As==00
    66b4:	02 20       	jnz	$+6      	;abs 0x66ba
    66b6:	8f 12       	call	r15		;
    66b8:	10 3c       	jmp	$+34     	;abs 0x66da
    66ba:	1c f5 84 00 	and	132(r5),r12	;0x00084
    66be:	1d 45 86 00 	mov	134(r5),r13	;0x00086
    66c2:	1d f1 04 00 	and	4(r1),	r13	;
    66c6:	0c dd       	bis	r13,	r12	;
    66c8:	0c 93       	cmp	#0,	r12	;r3 As==00
    66ca:	05 20       	jnz	$+12     	;abs 0x66d6
    66cc:	1c 41 0a 00 	mov	10(r1),	r12	;0x0000a
    66d0:	2d 47       	mov	@r7,	r13	;
    66d2:	8f 12       	call	r15		;
    66d4:	02 3c       	jmp	$+6      	;abs 0x66da
    66d6:	2c 47       	mov	@r7,	r12	;
    66d8:	8f 12       	call	r15		;
    66da:	91 9a 02 00 	cmp	2(r10),	8(r1)	;
    66de:	08 00 
    66e0:	9e 23       	jnz	$-194    	;abs 0x661e
    66e2:	86 9a 00 00 	cmp	r10,	0(r6)	;
    66e6:	9b 23       	jnz	$-200    	;abs 0x661e
    66e8:	38 53       	add	#-1,	r8	;r3 As==11
    66ea:	37 50 fe ff 	add	#65534,	r7	;#0xfffe
    66ee:	39 50 fe ff 	add	#65534,	r9	;#0xfffe
    66f2:	ac 3f       	jmp	$-166    	;abs 0x664c
    66f4:	04 93       	cmp	#0,	r4	;r3 As==00
    66f6:	14 24       	jz	$+42     	;abs 0x6720
    66f8:	8a 93 02 00 	cmp	#0,	2(r10)	;r3 As==00
    66fc:	0e 20       	jnz	$+30     	;abs 0x671a
    66fe:	2c 4a       	mov	@r10,	r12	;
    6700:	0c 93       	cmp	#0,	r12	;r3 As==00
    6702:	0b 24       	jz	$+24     	;abs 0x671a
    6704:	86 4c 00 00 	mov	r12,	0(r6)	;
    6708:	05 93       	cmp	#0,	r5	;r3 As==00
    670a:	02 24       	jz	$+6      	;abs 0x6710
    670c:	0c 45       	mov	r5,	r12	;
    670e:	84 12       	call	r4		;
    6710:	0c 4a       	mov	r10,	r12	;
    6712:	b0 12 00 00 	call	#0		;
    6716:	2a 46       	mov	@r6,	r10	;
    6718:	8a 3f       	jmp	$-234    	;abs 0x662e
    671a:	06 4a       	mov	r10,	r6	;
    671c:	2a 4a       	mov	@r10,	r10	;
    671e:	87 3f       	jmp	$-240    	;abs 0x662e
    6720:	31 50 0e 00 	add	#14,	r1	;#0x000e
    6724:	64 17       	popm	#7,	r10	;16-bit words
    6726:	30 41       	ret			

00006728 <__mspabi_slli_15>:
    6728:	0c 5c       	rla	r12		;

0000672a <__mspabi_slli_14>:
    672a:	0c 5c       	rla	r12		;

0000672c <__mspabi_slli_13>:
    672c:	0c 5c       	rla	r12		;

0000672e <__mspabi_slli_12>:
    672e:	0c 5c       	rla	r12		;

00006730 <__mspabi_slli_11>:
    6730:	0c 5c       	rla	r12		;

00006732 <__mspabi_slli_10>:
    6732:	0c 5c       	rla	r12		;

00006734 <__mspabi_slli_9>:
    6734:	0c 5c       	rla	r12		;

00006736 <__mspabi_slli_8>:
    6736:	0c 5c       	rla	r12		;

00006738 <__mspabi_slli_7>:
    6738:	0c 5c       	rla	r12		;

0000673a <__mspabi_slli_6>:
    673a:	0c 5c       	rla	r12		;

0000673c <__mspabi_slli_5>:
    673c:	0c 5c       	rla	r12		;

0000673e <__mspabi_slli_4>:
    673e:	0c 5c       	rla	r12		;

00006740 <__mspabi_slli_3>:
    6740:	0c 5c       	rla	r12		;

00006742 <__mspabi_slli_2>:
    6742:	0c 5c       	rla	r12		;

00006744 <__mspabi_slli_1>:
    6744:	0c 5c       	rla	r12		;
    6746:	30 41       	ret			
    6748:	3d 53       	add	#-1,	r13	;r3 As==11
    674a:	0c 5c       	rla	r12		;

0000674c <__mspabi_slli>:
    674c:	0d 93       	cmp	#0,	r13	;r3 As==00
    674e:	fc 23       	jnz	$-6      	;abs 0x6748
    6750:	30 41       	ret			

00006752 <__mspabi_slll_15>:
    6752:	0c 5c       	rla	r12		;
    6754:	0d 6d       	rlc	r13		;

00006756 <__mspabi_slll_14>:
    6756:	0c 5c       	rla	r12		;
    6758:	0d 6d       	rlc	r13		;

0000675a <__mspabi_slll_13>:
    675a:	0c 5c       	rla	r12		;
    675c:	0d 6d       	rlc	r13		;

0000675e <__mspabi_slll_12>:
    675e:	0c 5c       	rla	r12		;
    6760:	0d 6d       	rlc	r13		;

00006762 <__mspabi_slll_11>:
    6762:	0c 5c       	rla	r12		;
    6764:	0d 6d       	rlc	r13		;

00006766 <__mspabi_slll_10>:
    6766:	0c 5c       	rla	r12		;
    6768:	0d 6d       	rlc	r13		;

0000676a <__mspabi_slll_9>:
    676a:	0c 5c       	rla	r12		;
    676c:	0d 6d       	rlc	r13		;

0000676e <__mspabi_slll_8>:
    676e:	0c 5c       	rla	r12		;
    6770:	0d 6d       	rlc	r13		;

00006772 <__mspabi_slll_7>:
    6772:	0c 5c       	rla	r12		;
    6774:	0d 6d       	rlc	r13		;

00006776 <__mspabi_slll_6>:
    6776:	0c 5c       	rla	r12		;
    6778:	0d 6d       	rlc	r13		;

0000677a <__mspabi_slll_5>:
    677a:	0c 5c       	rla	r12		;
    677c:	0d 6d       	rlc	r13		;

0000677e <__mspabi_slll_4>:
    677e:	0c 5c       	rla	r12		;
    6780:	0d 6d       	rlc	r13		;

00006782 <__mspabi_slll_3>:
    6782:	0c 5c       	rla	r12		;
    6784:	0d 6d       	rlc	r13		;

00006786 <__mspabi_slll_2>:
    6786:	0c 5c       	rla	r12		;
    6788:	0d 6d       	rlc	r13		;

0000678a <__mspabi_slll_1>:
    678a:	0c 5c       	rla	r12		;
    678c:	0d 6d       	rlc	r13		;
    678e:	30 41       	ret			
    6790:	3e 53       	add	#-1,	r14	;r3 As==11
    6792:	0c 5c       	rla	r12		;
    6794:	0d 6d       	rlc	r13		;

00006796 <__mspabi_slll>:
    6796:	0e 93       	cmp	#0,	r14	;r3 As==00
    6798:	fb 23       	jnz	$-8      	;abs 0x6790
    679a:	30 41       	ret			

0000679c <_exit>:
    679c:	ff 3f       	jmp	$+0      	;abs 0x679c

0000679e <open>:
    679e:	b0 12 fc 67 	call	#26620		;#0x67fc
    67a2:	bc 40 58 00 	mov	#88,	0(r12)	;#0x0058
    67a6:	00 00 
    67a8:	3c 43       	mov	#-1,	r12	;r3 As==11
    67aa:	30 41       	ret			

000067ac <close>:
    67ac:	b0 12 fc 67 	call	#26620		;#0x67fc
    67b0:	bc 40 58 00 	mov	#88,	0(r12)	;#0x0058
    67b4:	00 00 
    67b6:	3c 43       	mov	#-1,	r12	;r3 As==11
    67b8:	30 41       	ret			

000067ba <read>:
    67ba:	b0 12 fc 67 	call	#26620		;#0x67fc
    67be:	bc 40 58 00 	mov	#88,	0(r12)	;#0x0058
    67c2:	00 00 
    67c4:	3c 43       	mov	#-1,	r12	;r3 As==11
    67c6:	30 41       	ret			

000067c8 <fstat>:
    67c8:	b0 12 fc 67 	call	#26620		;#0x67fc
    67cc:	bc 40 58 00 	mov	#88,	0(r12)	;#0x0058
    67d0:	00 00 
    67d2:	3c 43       	mov	#-1,	r12	;r3 As==11
    67d4:	30 41       	ret			

000067d6 <lseek>:
    67d6:	b0 12 fc 67 	call	#26620		;#0x67fc
    67da:	bc 40 58 00 	mov	#88,	0(r12)	;#0x0058
    67de:	00 00 
    67e0:	3c 43       	mov	#-1,	r12	;r3 As==11
    67e2:	30 41       	ret			

000067e4 <kill>:
    67e4:	b0 12 fc 67 	call	#26620		;#0x67fc
    67e8:	bc 40 58 00 	mov	#88,	0(r12)	;#0x0058
    67ec:	00 00 
    67ee:	3c 43       	mov	#-1,	r12	;r3 As==11
    67f0:	30 41       	ret			

000067f2 <_isatty>:
    67f2:	1c 43       	mov	#1,	r12	;r3 As==01
    67f4:	30 41       	ret			

000067f6 <getpid>:
    67f6:	3c 40 2a 00 	mov	#42,	r12	;#0x002a
    67fa:	30 41       	ret			

000067fc <__errno>:
    67fc:	1c 42 04 1c 	mov	&0x1c04,r12	;0x1c04
    6800:	30 41       	ret			

00006802 <memmove>:
    6802:	0a 15       	pushm	#1,	r10	;16-bit words
    6804:	0d 9c       	cmp	r12,	r13	;
    6806:	10 2c       	jc	$+34     	;abs 0x6828
    6808:	0b 4d       	mov	r13,	r11	;
    680a:	0b 5e       	add	r14,	r11	;
    680c:	0c 9b       	cmp	r11,	r12	;
    680e:	0c 2c       	jc	$+26     	;abs 0x6828
    6810:	0d 4e       	mov	r14,	r13	;
    6812:	3d 53       	add	#-1,	r13	;r3 As==11
    6814:	3d 93       	cmp	#-1,	r13	;r3 As==11
    6816:	13 24       	jz	$+40     	;abs 0x683e
    6818:	0f 4d       	mov	r13,	r15	;
    681a:	0f 8e       	sub	r14,	r15	;
    681c:	0f 5b       	add	r11,	r15	;
    681e:	0a 4c       	mov	r12,	r10	;
    6820:	0a 5d       	add	r13,	r10	;
    6822:	ea 4f 00 00 	mov.b	@r15,	0(r10)	;
    6826:	f5 3f       	jmp	$-20     	;abs 0x6812
    6828:	0f 43       	clr	r15		;
    682a:	0f 9e       	cmp	r14,	r15	;
    682c:	08 24       	jz	$+18     	;abs 0x683e
    682e:	0a 4d       	mov	r13,	r10	;
    6830:	0a 5f       	add	r15,	r10	;
    6832:	0b 4c       	mov	r12,	r11	;
    6834:	0b 5f       	add	r15,	r11	;
    6836:	eb 4a 00 00 	mov.b	@r10,	0(r11)	;
    683a:	1f 53       	inc	r15		;
    683c:	f6 3f       	jmp	$-18     	;abs 0x682a
    683e:	0a 17       	popm	#1,	r10	;16-bit words
    6840:	30 41       	ret			

00006842 <memset>:
    6842:	0f 4c       	mov	r12,	r15	;
    6844:	0e 5c       	add	r12,	r14	;
    6846:	0f 9e       	cmp	r14,	r15	;
    6848:	04 24       	jz	$+10     	;abs 0x6852
    684a:	cf 4d 00 00 	mov.b	r13,	0(r15)	;
    684e:	1f 53       	inc	r15		;
    6850:	fa 3f       	jmp	$-10     	;abs 0x6846
    6852:	30 41       	ret			

00006854 <__do_global_ctors_aux>:
    6854:	0a 15       	pushm	#1,	r10	;16-bit words
    6856:	1c 42 9c 44 	mov	&0x449c,r12	;0x449c
    685a:	3c 93       	cmp	#-1,	r12	;r3 As==11
    685c:	08 24       	jz	$+18     	;abs 0x686e
    685e:	3a 40 9c 44 	mov	#17564,	r10	;#0x449c
    6862:	8c 12       	call	r12		;
    6864:	3a 50 fe ff 	add	#65534,	r10	;#0xfffe
    6868:	2c 4a       	mov	@r10,	r12	;
    686a:	3c 93       	cmp	#-1,	r12	;r3 As==11
    686c:	fa 23       	jnz	$-10     	;abs 0x6862
    686e:	0a 17       	popm	#1,	r10	;16-bit words
    6870:	30 41       	ret			

00006872 <call___do_global_ctors_aux>:
    6872:	30 41       	ret			

00006874 <__msp430_init>:
    6874:	b0 12 fc 52 	call	#21244		;#0x52fc
    6878:	b0 12 54 68 	call	#26708		;#0x6854
    687c:	b0 12 3c 52 	call	#21052		;#0x523c
    6880:	b0 12 30 52 	call	#21040		;#0x5230
    6884:	30 41       	ret			

00006886 <__msp430_fini>:
    6886:	b0 12 48 52 	call	#21064		;#0x5248
    688a:	b0 12 ae 52 	call	#21166		;#0x52ae
    688e:	30 41       	ret			
